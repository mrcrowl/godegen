{{define "service" -}}

import { Config } from "../Config";
import { Callback } from "../utils/Callback";
import { JSONRPC } from "../utils/JSONRPC";
{{range .ReferencedTypes}}import {{"{"}} {{.Name}}{{if .Alias }} as {{.Alias}}{{ end }} {{"}"}} from "{{.RelativePath}}/{{.Name}}";
{{end}}

var __instance: {{.Name}} | undefined = undefined;

/**
 * services.{{.Namespace}}.{{.Name}} [CODE-GEN]
 */
export class {{.Name}} extends JSONRPC
{
	public static get instance()
    {
        if (!__instance)
        {
            __instance = new {{.Name}}();
        }

        return __instance;
    }

	static $inject = [];
	constructor()
	{
		var service: string = "{{.ServiceIdentifier}}";
		super(Config.serviceEndpointURL(), service, true);
	}
	{{range .Methods}}{{$method := .}}
	{{.Name}}({{range .Args}}{{.Name}}: {{.TypeName}}, {{end}}callback?: Callback<{{.TypeName}}>, thisObj?: any, allowRetry: boolean = true): Promise<{{.TypeName}}>
	{
		var args: any[] = [{{range $i, $arg := .Args}}{{if $i}}, {{end}}{{.Name}}{{end}}];
		return this.callRemote("{{$method.Name}}", args, callback, thisObj, allowRetry);
	}
	{{end -}}
{{"\n"}}}{{end}}