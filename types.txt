8200
--METHODDEF--
get_attemptID()
get_contentID()
get_section()
get_questionAttemptNumber()
.ctor(attemptID, contentID, section, questionAttemptNumber)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_ActivityID()
get_section()
get_contentID()
get_questionAttemptNumber()
get_questionAttemptSet()
get_requiresTeacherInput()
get_StudentReviewsRequested()
.ctor(attemptID, ActivityID, section, contentID, questionAttemptNumber, questionAttemptSet, requiresTeacherInput, StudentReviewsRequested)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_Section()
get_ContentID()
get_QuestionAttemptNumber()
.ctor(AttemptID, Section, ContentID, QuestionAttemptNumber)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_Section()
get_ContentID()
get_QuestionAttemptNumber()
get_complete()
.ctor(AttemptID, Section, ContentID, QuestionAttemptNumber, complete)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_section()
get_contentID()
get_questionAttemptNumber()
get_reviewer()
.ctor(attemptID, section, contentID, questionAttemptNumber, reviewer)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_Section()
get_ContentID()
get_QuestionAttemptNumber()
get_Reviewer()
get_QuestionAttemptSet()
get_isTeacherReview()
get_UserID()
get_ActivityID()
get_Score()
get_Comment()
get_AnnotationData()
get_TimeSpent()
get_Draft()
.ctor(AttemptID, Section, ContentID, QuestionAttemptNumber, Reviewer, QuestionAttemptSet, isTeacherReview, UserID, ActivityID, Score, Comment, AnnotationData, TimeSpent, Draft)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_section()
get_contentID()
get_questionAttemptNumber()
.ctor(attemptID, section, contentID, questionAttemptNumber)
Equals(value)
GetHashCode()
ToString()
get_sectionID()
.ctor(sectionID)
Equals(value)
GetHashCode()
ToString()
get_multipleSectionIDs()
.ctor(multipleSectionIDs)
Equals(value)
GetHashCode()
ToString()
get_contentID()
.ctor(contentID)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_sectionID()
get_contentID()
.ctor(attemptID, sectionID, contentID)
Equals(value)
GetHashCode()
ToString()
get_Subject()
get_SelectedCurriculumLevels()
get_SelectedCurricula()
get_numberOfResults()
.ctor(Subject, SelectedCurriculumLevels, SelectedCurricula, numberOfResults)
Equals(value)
GetHashCode()
ToString()
get_LP_SCHOOLS()
get_SearchTerm()
get_baseLanguage()
get_targetLanguage()
get_firstResultIndex()
get_numberOfResults()
.ctor(LP_SCHOOLS, SearchTerm, baseLanguage, targetLanguage, firstResultIndex, numberOfResults)
Equals(value)
GetHashCode()
ToString()
get_baseLanguage()
get_targetLanguage()
get_firstResultIndex()
get_numberOfResults()
.ctor(baseLanguage, targetLanguage, firstResultIndex, numberOfResults)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
.ctor(schoolID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_isTeacher()
.ctor(schoolID, isTeacher)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
.ctor(userID, schoolID)
Equals(value)
GetHashCode()
ToString()
get_isTeacher()
get_schoolID()
.ctor(isTeacher, schoolID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_applicationID()
get_baseLanguage()
get_targetSubject()
get_searchString()
get_Filters()
get_numberOfResults()
.ctor(userID, applicationID, baseLanguage, targetSubject, searchString, Filters, numberOfResults)
Equals(value)
GetHashCode()
ToString()
get_userID()
.ctor(userID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_jobTitle()
get_conferenceCode()
.ctor(userID, jobTitle, conferenceCode)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_phoneNumber()
get_firstName()
get_surname()
.ctor(schoolID, phoneNumber, firstName, surname)
Equals(value)
GetHashCode()
ToString()
get_periodID()
get_minLikelihood()
get_targetCountry()
.ctor(periodID, minLikelihood, targetCountry)
Equals(value)
GetHashCode()
ToString()
get_numberOfEmails()
.ctor(numberOfEmails)
Equals(value)
GetHashCode()
ToString()
get_LinkType()
get_StartDate()
get_ExpiryDate()
get_MaxAllowedClicks()
get_OnceOff()
get_UserID()
get_redirectURL()
get_brand()
get_clickNotificationRecipient()
get_parameters()
.ctor(LinkType, StartDate, ExpiryDate, MaxAllowedClicks, OnceOff, UserID, redirectURL, brand, clickNotificationRecipient, parameters)
Equals(value)
GetHashCode()
ToString()
get_LinkType()
get_StartDate()
get_ExpiryDate()
get_OnceOff()
get_MaxAllowedClicks()
get_UserID()
get_RedirectURL()
get_Brand()
get_clickNotificationRecipient()
get_parameters()
.ctor(LinkType, StartDate, ExpiryDate, OnceOff, MaxAllowedClicks, UserID, RedirectURL, Brand, clickNotificationRecipient, parameters)
Equals(value)
GetHashCode()
ToString()
get_LinkType()
get_StartDate()
get_ExpiryDate()
get_OnceOff()
get_redirectURL()
get_brand()
get_enforceStartDate()
get_clickNotificationRecipient()
get_parameters()
get_MaxAllowedClicks()
.ctor(LinkType, StartDate, ExpiryDate, OnceOff, redirectURL, brand, enforceStartDate, clickNotificationRecipient, parameters, MaxAllowedClicks)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_GroupID()
get_NewFrequency()
.ctor(UserID, GroupID, NewFrequency)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_groupID()
get_unsubscribed()
.ctor(userID, groupID, unsubscribed)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_unsubscribed()
.ctor(userID, unsubscribed)
Equals(value)
GetHashCode()
ToString()
get_questionID()
get_urlFullSize()
get_url300px()
.ctor(questionID, urlFullSize, url300px)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_latitude()
get_longitude()
.ctor(schoolID, latitude, longitude)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_departmentID()
get_maxResults()
.ctor(schoolID, departmentID, maxResults)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_SearchTerms()
get_NumberOfEPResults()
get_NumberOfKnowledgeOwlResults()
get_UserAction()
get_SelectedResultName()
get_SelectedResultIndex()
.ctor(userID, SearchTerms, NumberOfEPResults, NumberOfKnowledgeOwlResults, UserAction, SelectedResultName, SelectedResultIndex)
Equals(value)
GetHashCode()
ToString()
get_sessionID()
get_userID()
get_activityID()
get_translationDirection()
get_baseLanguage()
get_targetSubject()
get_multiplayer()
.ctor(sessionID, userID, activityID, translationDirection, baseLanguage, targetSubject, multiplayer)
Equals(value)
GetHashCode()
ToString()
get_sessionID()
.ctor(sessionID)
Equals(value)
GetHashCode()
ToString()
get_baseLanguage()
get_targetSubject()
get_activityID()
get_translationDirection()
.ctor(baseLanguage, targetSubject, activityID, translationDirection)
Equals(value)
GetHashCode()
ToString()
.ctor()
Equals(value)
GetHashCode()
ToString()
get_maxResults()
get_userID()
get_baseLanguage()
get_targetSubject()
get_targetModuleID()
.ctor(maxResults, userID, baseLanguage, targetSubject, targetModuleID)
Equals(value)
GetHashCode()
ToString()
get_maxResults()
get_userID()
get_schoolID()
get_baseLanguage()
get_targetSubject()
.ctor(maxResults, userID, schoolID, baseLanguage, targetSubject)
Equals(value)
GetHashCode()
ToString()
get_maxResults()
get_userID()
get_schoolID()
get_baseLanguage()
get_targetSubject()
get_taskID()
.ctor(maxResults, userID, schoolID, baseLanguage, targetSubject, taskID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_datasetID()
get_activityID()
get_translationDirection()
.ctor(userID, datasetID, activityID, translationDirection)
Equals(value)
GetHashCode()
ToString()
get_gameID()
.ctor(gameID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_gameID()
get_peerJSID()
get_userSpaceAlreadyReserved()
.ctor(userID, gameID, peerJSID, userSpaceAlreadyReserved)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_gameID()
.ctor(userID, gameID)
Equals(value)
GetHashCode()
ToString()
get_activityID()
get_translationDirection()
get_datasetID()
get_baseLanguage()
get_targetSubject()
get_seriesID()
get_startInXSeconds()
get_reserveSpaceForCreator()
get_numberOfQuestions()
get_MaxUsers()
.ctor(activityID, translationDirection, datasetID, baseLanguage, targetSubject, seriesID, startInXSeconds, reserveSpaceForCreator, numberOfQuestions, MaxUsers)
Equals(value)
GetHashCode()
ToString()
get_gameID()
get_ghostAttemptIDs()
.ctor(gameID, ghostAttemptIDs)
Equals(value)
GetHashCode()
ToString()
get_gameID()
get_userID()
.ctor(gameID, userID)
Equals(value)
GetHashCode()
ToString()
get_gameID()
get_XSecondsFromNow()
.ctor(gameID, XSecondsFromNow)
Equals(value)
GetHashCode()
ToString()
get_seriesID()
.ctor(seriesID)
Equals(value)
GetHashCode()
ToString()
get_RoomKey()
get_datasetID()
get_baseLanguage()
get_targetSubject()
.ctor(RoomKey, datasetID, baseLanguage, targetSubject)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_ActivityID()
get_TranslationDirection()
get_TotalTime()
get_UserID()
get_validForMilestoneAchievement()
get_saveDate()
get_TimezoneAdjustmentMinutes()
get_MAX_MILESTONES()
.ctor(AttemptID, ActivityID, TranslationDirection, TotalTime, UserID, validForMilestoneAchievement, saveDate, TimezoneAdjustmentMinutes, MAX_MILESTONES)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_ActivityID()
get_TranslationDirection()
get_DateAttempted()
get_Status()
get_NumberOfQuestionsSelected()
get_NumberOfPenaltyQuestions()
get_NumberOfQuestionsAnswered()
get_Score()
get_MaxScore()
get_TimeTaken()
get_TimePenalty()
get_LivesAllocated()
get_LivesRemaining()
get_BaseLanguage()
get_TargetSubject()
get_DashVersion()
get_MultiplayerGameID()
get_TaskID()
.ctor(UserID, ActivityID, TranslationDirection, DateAttempted, Status, NumberOfQuestionsSelected, NumberOfPenaltyQuestions, NumberOfQuestionsAnswered, Score, MaxScore, TimeTaken, TimePenalty, LivesAllocated, LivesRemaining, BaseLanguage, TargetSubject, DashVersion, MultiplayerGameID, TaskID)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_QuestionNumber()
get_ContentID()
get_ContentVersion()
get_SourceSectionID()
get_TranslationDirection()
get_QuestionState()
get_UsersAnswer()
get_StartTime()
get_TimeTaken()
get_TimePenalty()
get_Grade()
get_PenaltyQuestion()
get_SequenceNumber()
.ctor(attemptID, QuestionNumber, ContentID, ContentVersion, SourceSectionID, TranslationDirection, QuestionState, UsersAnswer, StartTime, TimeTaken, TimePenalty, Grade, PenaltyQuestion, SequenceNumber)
Equals(value)
GetHashCode()
ToString()
get_attemptIDs()
.ctor(attemptIDs)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_dataset()
get_activityID()
get_translationDirection()
.ctor(userID, dataset, activityID, translationDirection)
Equals(value)
GetHashCode()
ToString()
get_userIDs()
get_dataset()
get_activityID()
get_translationDirection()
.ctor(userIDs, dataset, activityID, translationDirection)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_knowledgeset()
get_activityID()
get_translationDirection()
.ctor(userID, knowledgeset, activityID, translationDirection)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_knowledgeset()
.ctor(userID, knowledgeset)
Equals(value)
GetHashCode()
ToString()
get_DataSet()
get_BaseLanguage()
get_TargetLanguage()
get_WeightDivisionID()
get_Offset()
get_NumberOfRows()
.ctor(DataSet, BaseLanguage, TargetLanguage, WeightDivisionID, Offset, NumberOfRows)
Equals(value)
GetHashCode()
ToString()
get_DataSet()
get_BaseLanguage()
get_TargetLanguage()
get_Offset()
get_NumberOfRows()
.ctor(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows)
Equals(value)
GetHashCode()
ToString()
get_datasetID()
.ctor(datasetID)
Equals(value)
GetHashCode()
ToString()
get_DataSet()
get_Offset()
get_NumberOfRows()
.ctor(DataSet, Offset, NumberOfRows)
Equals(value)
GetHashCode()
ToString()
get_dataSet()
get_countryID()
get_offset()
get_numberOfRows()
.ctor(dataSet, countryID, offset, numberOfRows)
Equals(value)
GetHashCode()
ToString()
get_BaseLanguage()
get_TargetLanguage()
get_NumberOfRows()
get_Offset()
get_DataSet()
get_PartnerListOptionID()
.ctor(BaseLanguage, TargetLanguage, NumberOfRows, Offset, DataSet, PartnerListOptionID)
Equals(value)
GetHashCode()
ToString()
get_GroupID()
.ctor(GroupID)
Equals(value)
GetHashCode()
ToString()
get_GroupID()
get_userID()
.ctor(GroupID, userID)
Equals(value)
GetHashCode()
ToString()
get_requestID()
.ctor(requestID)
Equals(value)
GetHashCode()
ToString()
get_batchID()
.ctor(batchID)
Equals(value)
GetHashCode()
ToString()
get_requestorID()
get_viewerID()
get_SourceURL()
get_PDF_GENERATION_STATUS_PENDING()
get_serialisedOptions()
get_batchID()
.ctor(requestorID, viewerID, SourceURL, PDF_GENERATION_STATUS_PENDING, serialisedOptions, batchID)
Equals(value)
GetHashCode()
ToString()
get_requestID()
get_OutputURL()
get_PDF_GENERATION_STATUS_COMPLETE()
get_s3Details()
.ctor(requestID, OutputURL, PDF_GENERATION_STATUS_COMPLETE, s3Details)
Equals(value)
GetHashCode()
ToString()
get_batchID()
get_OutputURL()
get_PDF_GENERATION_STATUS_COMPLETE()
get_s3Details()
.ctor(batchID, OutputURL, PDF_GENERATION_STATUS_COMPLETE, s3Details)
Equals(value)
GetHashCode()
ToString()
get_requestID()
get_PDF_GENERATION_STATUS_FAILED()
get_faultMessage()
.ctor(requestID, PDF_GENERATION_STATUS_FAILED, faultMessage)
Equals(value)
GetHashCode()
ToString()
get_requestID()
get_PDF_GENERATION_STATUS_FAILED()
get_MAX_RETRIES_ON_FAILURE()
get_PDF_GENERATION_STATUS_PENDING()
.ctor(requestID, PDF_GENERATION_STATUS_FAILED, MAX_RETRIES_ON_FAILURE, PDF_GENERATION_STATUS_PENDING)
Equals(value)
GetHashCode()
ToString()
get_batchID()
get_PDF_GENERATION_STATUS_FAILED()
get_MAX_RETRIES_ON_FAILURE()
get_PDF_GENERATION_STATUS_PENDING()
.ctor(batchID, PDF_GENERATION_STATUS_FAILED, MAX_RETRIES_ON_FAILURE, PDF_GENERATION_STATUS_PENDING)
Equals(value)
GetHashCode()
ToString()
get_requestorID()
get_PDF_GENERATION_STATUS_PENDING()
.ctor(requestorID, PDF_GENERATION_STATUS_PENDING)
Equals(value)
GetHashCode()
ToString()
get_referencedID()
get_batchJob()
get_notificationMethod()
get_PDF_GENERATION_STATUS_PENDING()
.ctor(referencedID, batchJob, notificationMethod, PDF_GENERATION_STATUS_PENDING)
Equals(value)
GetHashCode()
ToString()
get_referencedID()
get_batchJob()
.ctor(referencedID, batchJob)
Equals(value)
GetHashCode()
ToString()
get_notificationID()
get_newStatus()
.ctor(notificationID, newStatus)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_ActivityID()
get_UserID()
get_taskID()
.ctor(AttemptID, ActivityID, UserID, taskID)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_ActivityID()
get_userID()
.ctor(AttemptID, ActivityID, userID)
Equals(value)
GetHashCode()
ToString()
get_taskID()
get_activityID()
.ctor(taskID, activityID)
Equals(value)
GetHashCode()
ToString()
get_taskID()
get_userID()
get_activityID()
.ctor(taskID, userID, activityID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_taskID()
.ctor(userID, taskID)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_AverageTime()
get_AverageTime20thPercentile()
get_AverageTime80thPercentile()
get_StudentsUsedThisYear()
get_HoursSpendThisYear()
get_StudentsUsedThisMonth()
get_HoursSpendThisMonth()
.ctor(ListID, AverageTime, AverageTime20thPercentile, AverageTime80thPercentile, StudentsUsedThisYear, HoursSpendThisYear, StudentsUsedThisMonth, HoursSpendThisMonth)
Equals(value)
GetHashCode()
ToString()
get_startPoint()
get_numberToGet()
.ctor(startPoint, numberToGet)
Equals(value)
GetHashCode()
ToString()
get_recalculationDate()
.ctor(recalculationDate)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_recalculationDate()
.ctor(attemptID, recalculationDate)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_ActivityID()
get_BaseLanguage()
get_TargetSubject()
get_Section()
get_Score()
get_SaveDate()
.ctor(UserID, ActivityID, BaseLanguage, TargetSubject, Section, Score, SaveDate)
Equals(value)
GetHashCode()
ToString()
get_ActivityID()
get_SaveDate()
.ctor(ActivityID, SaveDate)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_activityID()
get_taskID()
.ctor(userID, activityID, taskID)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
.ctor(attemptID)
Equals(value)
GetHashCode()
ToString()
get_periodStartDate()
get_periodEndDate()
get_activityIDs()
.ctor(periodStartDate, periodEndDate, activityIDs)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_contentID()
get_section()
get_questionAttemptNumberLessThan()
.ctor(attemptID, contentID, section, questionAttemptNumberLessThan)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_contentID()
get_section()
get_numberOfNewAttempts()
.ctor(attemptID, contentID, section, numberOfNewAttempts)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_section()
get_contentID()
.ctor(attemptID, section, contentID)
Equals(value)
GetHashCode()
ToString()
get_section()
get_contentID()
.ctor(section, contentID)
Equals(value)
GetHashCode()
ToString()
get_section()
.ctor(section)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_contentID()
get_section()
.ctor(attemptID, contentID, section)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_ContentID()
get_TranslationDirection()
get_QuestionAttemptNumber()
get_Section()
get_ContentVersion()
get_BasedOnAttemptNumber()
get_QuestionState()
get_questionStateHash()
get_UsersAnswer()
get_usersAnswerHash()
get_TimeTaken()
get_TimeTakenForReview()
get_Grade()
get_DateStarted()
.ctor(AttemptID, ContentID, TranslationDirection, QuestionAttemptNumber, Section, ContentVersion, BasedOnAttemptNumber, QuestionState, questionStateHash, UsersAnswer, usersAnswerHash, TimeTaken, TimeTakenForReview, Grade, DateStarted)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_ContentID()
get_TranslationDirection()
get_QuestionAttemptNumber()
get_Section()
get_ContentVersion()
get_BasedOnAttemptNumber()
get_QuestionState()
get_questionStateHash()
get_UsersAnswer()
get_usersAnswerHash()
get_TimeTaken()
get_TimeTakenForReview()
get_DateStarted()
.ctor(AttemptID, ContentID, TranslationDirection, QuestionAttemptNumber, Section, ContentVersion, BasedOnAttemptNumber, QuestionState, questionStateHash, UsersAnswer, usersAnswerHash, TimeTaken, TimeTakenForReview, DateStarted)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_ContentID()
get_Section()
get_QuestionAttemptNumber()
get_UsersAnswer()
get_TimeTaken()
.ctor(AttemptID, ContentID, Section, QuestionAttemptNumber, UsersAnswer, TimeTaken)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_sectionIDs()
.ctor(attemptID, sectionIDs)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_CompletionEndpoint()
get_CompletionProgress()
get_TimeTaken()
get_TimeTakenForReview()
.ctor(ID, CompletionEndpoint, CompletionProgress, TimeTaken, TimeTakenForReview)
Equals(value)
GetHashCode()
ToString()
get_lastGenerationDate()
.ctor(lastGenerationDate)
Equals(value)
GetHashCode()
ToString()
get_Code()
.ctor(Code)
Equals(value)
GetHashCode()
ToString()
get_competitionCode()
.ctor(competitionCode)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_count()
.ctor(schoolID, count)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_StatsDatasetID()
get_CompetitionStart()
.ctor(userID, StatsDatasetID, CompetitionStart)
Equals(value)
GetHashCode()
ToString()
get_attributeCode()
.ctor(attributeCode)
Equals(value)
GetHashCode()
ToString()
get_Title()
get_Teaser()
get_Body()
get_Category()
get_ContentType()
get_Importance()
get_IncludeInEmails()
get_PubliclyVisible()
get_PublicationStartDate()
get_PublicationEndDate()
get_ImageURL()
get_ThumbnailURL()
get_CallToActionURL()
get_CallToActionText()
get_AttributedTo()
get_DateCreated()
get_DateModified()
get_CreatedBy()
get_ModifiedBy()
get_filterData()
get_Draft()
get_ItemID()
.ctor(Title, Teaser, Body, Category, ContentType, Importance, IncludeInEmails, PubliclyVisible, PublicationStartDate, PublicationEndDate, ImageURL, ThumbnailURL, CallToActionURL, CallToActionText, AttributedTo, DateCreated, DateModified, CreatedBy, ModifiedBy, filterData, Draft, ItemID)
Equals(value)
GetHashCode()
ToString()
get_itemID()
.ctor(itemID)
Equals(value)
GetHashCode()
ToString()
get_itemID()
get_ModifiedBy()
get_draft()
.ctor(itemID, ModifiedBy, draft)
Equals(value)
GetHashCode()
ToString()
get_newsFeedItemID()
.ctor(newsFeedItemID)
Equals(value)
GetHashCode()
ToString()
get_itemID()
get_userID()
.ctor(itemID, userID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_NewsFeedItemIDs()
.ctor(userID, NewsFeedItemIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_NewsFeedItemID()
get_ItemShownCount()
get_ItemLastShownDate()
get_ItemExpandedCount()
get_ItemLastExpandedDate()
get_CallToActionClickedCount()
get_CallToActionLastClickedDate()
get_Active()
.ctor(UserID, NewsFeedItemID, ItemShownCount, ItemLastShownDate, ItemExpandedCount, ItemLastExpandedDate, CallToActionClickedCount, CallToActionLastClickedDate, Active)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_ItemCount()
.ctor(userID, ItemCount)
Equals(value)
GetHashCode()
ToString()
get_categories()
.ctor(categories)
Equals(value)
GetHashCode()
ToString()
get_ProviderID()
get_userIdentifier()
.ctor(ProviderID, userIdentifier)
Equals(value)
GetHashCode()
ToString()
get_ConsumerKey()
.ctor(ConsumerKey)
Equals(value)
GetHashCode()
ToString()
get_ID()
.ctor(ID)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_Name()
get_Description()
get_OAuthConsumerKey()
get_OAuthSecretKey()
get_UserIDSourceFieldName()
get_ProviderType()
.ctor(SchoolID, Name, Description, OAuthConsumerKey, OAuthSecretKey, UserIDSourceFieldName, ProviderType)
Equals(value)
GetHashCode()
ToString()
get_providerID()
.ctor(providerID)
Equals(value)
GetHashCode()
ToString()
get_thisYear()
.ctor(thisYear)
Equals(value)
GetHashCode()
ToString()
get_thisYear()
get_daysOfHistoryToInclude()
.ctor(thisYear, daysOfHistoryToInclude)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_departmentID()
.ctor(schoolID, departmentID)
Equals(value)
GetHashCode()
ToString()
get_minuteRange()
.ctor(minuteRange)
Equals(value)
GetHashCode()
ToString()
get_groupID()
get_BulkType()
.ctor(groupID, BulkType)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_SessionID()
get_StartDate()
get_EndDate()
.ctor(UserID, SessionID, StartDate, EndDate)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_ActionID()
.ctor(UserID, ActionID)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_count()
.ctor(TaskID, count)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_UserID()
get_LaterThanServerDateTime()
.ctor(TaskID, UserID, LaterThanServerDateTime)
Equals(value)
GetHashCode()
ToString()
get_taskID()
.ctor(taskID)
Equals(value)
GetHashCode()
ToString()
get_taskId()
get_status()
get_location()
.ctor(taskId, status, location)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_taskID()
.ctor(ID, taskID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_classID()
get_baseLanguage()
get_targetSubject()
get_moduleID()
get_listID()
get_taskID()
get_OldestRecordID()
.ctor(userID, classID, baseLanguage, targetSubject, moduleID, listID, taskID, OldestRecordID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_classID()
.ctor(userID, classID)
Equals(value)
GetHashCode()
ToString()
get_ClassIDs()
get_NumberOfRows()
.ctor(ClassIDs, NumberOfRows)
Equals(value)
GetHashCode()
ToString()
get_dbUsername()
get_slackUserID()
.ctor(dbUsername, slackUserID)
Equals(value)
GetHashCode()
ToString()
get_analysisGroup()
.ctor(analysisGroup)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_ListID()
.ctor(UserID, ListID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_ListID()
get_PercentageComplete()
get_TotalTimeTaken()
.ctor(UserID, ListID, PercentageComplete, TotalTimeTaken)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_AnalysisGroup()
get_Score()
get_TotalQuestions()
.ctor(UserID, AnalysisGroup, Score, TotalQuestions)
Equals(value)
GetHashCode()
ToString()
get_eMCATAttributeCode()
get_ProductID()
get_ExamLicenceType()
.ctor(eMCATAttributeCode, ProductID, ExamLicenceType)
Equals(value)
GetHashCode()
ToString()
get_testID()
get_assessmentContextID()
get_userID()
get_STATUS_INITIALISING_SERVER_SIDE()
get_STATUS_INITIALISING_CLIENT_SIDE()
get_STATUS_UNDERWAY()
.ctor(testID, assessmentContextID, userID, STATUS_INITIALISING_SERVER_SIDE, STATUS_INITIALISING_CLIENT_SIDE, STATUS_UNDERWAY)
Equals(value)
GetHashCode()
ToString()
get_SessionID()
get_UserID()
get_TestID()
get_AssessmentContext()
get_TotalAllowedAttemptTime()
get_STATUS_UNDERWAY()
get_STATUS_INITIALISING_SERVER_SIDE()
get_STATUS_INITIALISING_CLIENT_SIDE()
.ctor(SessionID, UserID, TestID, AssessmentContext, TotalAllowedAttemptTime, STATUS_UNDERWAY, STATUS_INITIALISING_SERVER_SIDE, STATUS_INITIALISING_CLIENT_SIDE)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_TestID()
.ctor(AttemptID, TestID)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
.ctor(AttemptID)
Equals(value)
GetHashCode()
ToString()
get_testID()
get_assessmentContextID()
get_STATUS_COMPLETED()
.ctor(testID, assessmentContextID, STATUS_COMPLETED)
Equals(value)
GetHashCode()
ToString()
get_testID()
.ctor(testID)
Equals(value)
GetHashCode()
ToString()
get_testID()
get_USER_ID_FOR_ASSESSMENT_EXPORT()
.ctor(testID, USER_ID_FOR_ASSESSMENT_EXPORT)
Equals(value)
GetHashCode()
ToString()
get_minutesOffset()
.ctor(minutesOffset)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_SchoolID()
get_CreatorID()
.ctor(TestID, SchoolID, CreatorID)
Equals(value)
GetHashCode()
ToString()
get_startDate()
.ctor(startDate)
Equals(value)
GetHashCode()
ToString()
get_testID()
get_oldAssessmentContextID()
get_newAssessmentContextID()
.ctor(testID, oldAssessmentContextID, newAssessmentContextID)
Equals(value)
GetHashCode()
ToString()
get_testID()
get_assessmentContextID()
.ctor(testID, assessmentContextID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_testID()
get_assessmentContextID()
.ctor(userID, testID, assessmentContextID)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_SessionID()
.ctor(AttemptID, SessionID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_TestID()
get_AssessmentContextID()
.ctor(UserID, TestID, AssessmentContextID)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_OldStatus()
get_OldStepStarted()
get_newStatus()
get_newStepStarted()
.ctor(AttemptID, OldStatus, OldStepStarted, newStatus, newStepStarted)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_Status()
get_DateStarted()
get_DateCompleted()
get_DateExpires()
get_CurrentStepStarted()
get_TimeAllowed()
get_TimeUsed()
.ctor(AttemptID, Status, DateStarted, DateCompleted, DateExpires, CurrentStepStarted, TimeAllowed, TimeUsed)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_AssessmentContextID()
get_TestID()
get_Grade()
get_Score()
get_Percentage()
get_Status()
get_AttemptID()
.ctor(userID, AssessmentContextID, TestID, Grade, Score, Percentage, Status, AttemptID)
Equals(value)
GetHashCode()
ToString()
get_GradingStep()
get_Attempt()
get_Version()
.ctor(GradingStep, Attempt, Version)
Equals(value)
GetHashCode()
ToString()
get_Attempt()
get_sectionID()
.ctor(Attempt, sectionID)
Equals(value)
GetHashCode()
ToString()
get_Attempt()
get_Step()
get_StepStatus()
get_GradeStatus()
get_gradingUserID()
.ctor(Attempt, Step, StepStatus, GradeStatus, gradingUserID)
Equals(value)
GetHashCode()
ToString()
get_Attempt()
get_Step()
get_StepStatus()
.ctor(Attempt, Step, StepStatus)
Equals(value)
GetHashCode()
ToString()
get_Attempt()
get_Step()
get_Version()
.ctor(Attempt, Step, Version)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_Grade()
get_Score()
get_Percentage()
get_Status()
.ctor(AttemptID, Grade, Score, Percentage, Status)
Equals(value)
GetHashCode()
ToString()
get_attempt()
get_oldStep()
get_oldVersion()
get_newStep()
get_newVersion()
get_calculatedUpdate()
get_updatedBy()
.ctor(attempt, oldStep, oldVersion, newStep, newVersion, calculatedUpdate, updatedBy)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_attemptID()
.ctor(userID, attemptID)
Equals(value)
GetHashCode()
ToString()
get_Attempt()
get_step()
.ctor(Attempt, step)
Equals(value)
GetHashCode()
ToString()
get_lastAttemptID()
get_lastSequenceString()
get_STATUS_COMPLETED()
get_GRADE_STATUS_UNDERWAY()
get_GRADING_STAGE_QUESTION_GRADING_MANUAL()
get_GRADING_STEP_STATUS_COMPLETE()
get_sectionID()
get_variant()
get_userID()
.ctor(lastAttemptID, lastSequenceString, STATUS_COMPLETED, GRADE_STATUS_UNDERWAY, GRADING_STAGE_QUESTION_GRADING_MANUAL, GRADING_STEP_STATUS_COMPLETE, sectionID, variant, userID)
Equals(value)
GetHashCode()
ToString()
get_SessionID()
get_UserID()
get_attemptID()
get_sectionID()
.ctor(SessionID, UserID, attemptID, sectionID)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_sessionID()
.ctor(attemptID, sessionID)
Equals(value)
GetHashCode()
ToString()
get_attemptID()
get_GRADING_STEP_STATUS_COMPLETE()
.ctor(attemptID, GRADING_STEP_STATUS_COMPLETE)
Equals(value)
GetHashCode()
ToString()
get_markerID()
get_attemptID()
get_status()
get_sectionID()
.ctor(markerID, attemptID, status, sectionID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_SectionID()
get_Variant()
get_STATUS_COMPLETED()
get_GRADE_STATUS_UNDERWAY()
get_GRADING_STAGE_QUESTION_GRADING_MANUAL()
.ctor(UserID, SectionID, Variant, STATUS_COMPLETED, GRADE_STATUS_UNDERWAY, GRADING_STAGE_QUESTION_GRADING_MANUAL)
Equals(value)
GetHashCode()
ToString()
get_markingSetID()
.ctor(markingSetID)
Equals(value)
GetHashCode()
ToString()
get_markingSetID()
get_userID()
.ctor(markingSetID, userID)
Equals(value)
GetHashCode()
ToString()
get_sectionID()
get_variant()
get_STATUS_COMPLETED()
get_GRADE_STATUS_UNDERWAY()
get_GRADING_STAGE_QUESTION_GRADING_MANUAL()
.ctor(sectionID, variant, STATUS_COMPLETED, GRADE_STATUS_UNDERWAY, GRADING_STAGE_QUESTION_GRADING_MANUAL)
Equals(value)
GetHashCode()
ToString()
get_SectionID()
get_STATUS_COMPLETED()
get_GRADE_STATUS_NOT_STARTED()
get_GRADE_STATUS_UNDERWAY()
get_GRADING_STAGE_QUESTION_GRADING_MANUAL()
get_GRADING_STEP_STATUS_NOT_STARTED()
get_GRADING_STEP_STATUS_UNDERWAY()
get_GRADING_STEP_STATUS_AWAITING_USER_INPUT()
get_GRADING_STEP_STATUS_COMPLETE()
.ctor(SectionID, STATUS_COMPLETED, GRADE_STATUS_NOT_STARTED, GRADE_STATUS_UNDERWAY, GRADING_STAGE_QUESTION_GRADING_MANUAL, GRADING_STEP_STATUS_NOT_STARTED, GRADING_STEP_STATUS_UNDERWAY, GRADING_STEP_STATUS_AWAITING_USER_INPUT, GRADING_STEP_STATUS_COMPLETE)
Equals(value)
GetHashCode()
ToString()
get_STATUS_COMPLETED()
.ctor(STATUS_COMPLETED)
Equals(value)
GetHashCode()
ToString()
get_sessionID()
get_attemptID()
.ctor(sessionID, attemptID)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_assessmentContext()
.ctor(TestID, assessmentContext)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_AnalysisGroupID()
get_RecommendationID()
get_RecommendationType()
get_UserID()
get_SortScore()
get_ActivityID()
get_TranslationDirection()
get_ActivityProgress()
get_ActivityLastAttempted()
.ctor(AttemptID, AnalysisGroupID, RecommendationID, RecommendationType, UserID, SortScore, ActivityID, TranslationDirection, ActivityProgress, ActivityLastAttempted)
Equals(value)
GetHashCode()
ToString()
get_NewStatus()
get_AssessmentContextID()
get_TestID()
get_INTERNAL()
get_PROVISIONAL()
get_FINAL()
.ctor(NewStatus, AssessmentContextID, TestID, INTERNAL, PROVISIONAL, FINAL)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_QuestionIndex()
get_QuestionGroup()
get_ContentID()
get_ContentVersion()
get_Grade()
get_QuestionState()
get_UsersAnswer()
get_TimeTaken()
get_TranslationDirection()
get_DisplayName()
get_Seen()
get_Attempted()
.ctor(AttemptID, QuestionIndex, QuestionGroup, ContentID, ContentVersion, Grade, QuestionState, UsersAnswer, TimeTaken, TranslationDirection, DisplayName, Seen, Attempted)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_area()
get_details()
get_logDateTime()
.ctor(userID, area, details, logDateTime)
Equals(value)
GetHashCode()
ToString()
get_identifier()
get_schoolID()
.ctor(identifier, schoolID)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_Name()
get_ProviderID()
get_Description()
get_Protocol()
.ctor(SchoolID, Name, ProviderID, Description, Protocol)
Equals(value)
GetHashCode()
ToString()
get_batchSize()
get_cutoffDate()
.ctor(batchSize, cutoffDate)
Equals(value)
GetHashCode()
ToString()
get_firstRecordID()
get_lastRecordID()
.ctor(firstRecordID, lastRecordID)
Equals(value)
GetHashCode()
ToString()
get_USER_TYPE_ADMINISTATOR()
.ctor(USER_TYPE_ADMINISTATOR)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_scoreDataset()
get_knowledgeSet()
get_daysOfHistory()
.ctor(userID, scoreDataset, knowledgeSet, daysOfHistory)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_PeriodID()
get_Event()
get_daysToExclude()
.ctor(userID, PeriodID, Event, daysToExclude)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_dataset()
get_BaseLanguage()
get_TargetLanguage()
get_NumberRightToRemove()
get_NumberWrongToRemove()
get_PointsToRemove()
.ctor(userID, dataset, BaseLanguage, TargetLanguage, NumberRightToRemove, NumberWrongToRemove, PointsToRemove)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_dataset()
get_numberRightToRemove()
get_numberWrongToRemove()
get_pointsToRemove()
.ctor(userID, dataset, numberRightToRemove, numberWrongToRemove, pointsToRemove)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_Data()
.ctor(ID, Data)
Equals(value)
GetHashCode()
ToString()
get_ActivityID()
.ctor(ActivityID)
Equals(value)
GetHashCode()
ToString()
get_activityID()
get_deletedSectionIDs()
.ctor(activityID, deletedSectionIDs)
Equals(value)
GetHashCode()
ToString()
get_TestID()
.ctor(TestID)
Equals(value)
GetHashCode()
ToString()
get_activityID()
.ctor(activityID)
Equals(value)
GetHashCode()
ToString()
get_ActivityID()
get_CreatorID()
.ctor(ActivityID, CreatorID)
Equals(value)
GetHashCode()
ToString()
get_DraftSerializedData()
get_ActivityID()
get_CreatorID()
.ctor(DraftSerializedData, ActivityID, CreatorID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_userType()
get_activityID()
get_attemptID()
get_completedActivity()
get_starRating()
get_studentConfidence()
get_message()
.ctor(userID, userType, activityID, attemptID, completedActivity, starRating, studentConfidence, message)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
.ctor(moduleID)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_TimeAllowedTotal()
get_TimeAllowedForDisconnections()
get_TotalNumberOfQuestions()
get_AnswerDisplayType()
get_HasStructuredContent()
get_GradingMethod()
get_MinScore()
get_MaxScore()
get_QuestionScoringMethod()
get_SuggestQuestionGrades()
get_ManualMarkingRequired()
get_DisplayQuestionTitles()
get_SerializedData()
get_TestType()
.ctor(TestID, TimeAllowedTotal, TimeAllowedForDisconnections, TotalNumberOfQuestions, AnswerDisplayType, HasStructuredContent, GradingMethod, MinScore, MaxScore, QuestionScoringMethod, SuggestQuestionGrades, ManualMarkingRequired, DisplayQuestionTitles, SerializedData, TestType)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_TestType()
get_TimeAllowedTotal()
get_AnswerDisplayType()
get_TotalNumberOfQuestions()
get_TimeAllowedForDisconnections()
get_SerializedData()
get_GradingMethod()
get_MaxScore()
get_MinScore()
get_QuestionScoringMethod()
get_SuggestQuestionGrades()
get_ManualMarkingRequired()
get_DisplayQuestionTitles()
.ctor(TestID, TestType, TimeAllowedTotal, AnswerDisplayType, TotalNumberOfQuestions, TimeAllowedForDisconnections, SerializedData, GradingMethod, MaxScore, MinScore, QuestionScoringMethod, SuggestQuestionGrades, ManualMarkingRequired, DisplayQuestionTitles)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_TotalNumberOfQuestions()
.ctor(TestID, TotalNumberOfQuestions)
Equals(value)
GetHashCode()
ToString()
get_ModuleID()
.ctor(ModuleID)
Equals(value)
GetHashCode()
ToString()
get_ActivityID()
get_CreatorID()
get_DraftSerializedData()
.ctor(ActivityID, CreatorID, DraftSerializedData)
Equals(value)
GetHashCode()
ToString()
get_name()
get_description()
get_sortOrder()
get_serialisedData()
.ctor(name, description, sortOrder, serialisedData)
Equals(value)
GetHashCode()
ToString()
get_assessmentTaskID()
get_USER_TYPE_STUDENT()
.ctor(assessmentTaskID, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_USER_TYPE_TEACHER()
.ctor(USER_TYPE_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_AssessmentContextID()
get_MaxQuestionGradingStage()
.ctor(TestID, AssessmentContextID, MaxQuestionGradingStage)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_AssessmentContextID()
get_MaxQuestionGradingStage()
get_QuestionScoringMethod()
.ctor(TestID, AssessmentContextID, MaxQuestionGradingStage, QuestionScoringMethod)
Equals(value)
GetHashCode()
ToString()
get_assessmentContextID()
get_TestID()
get_userID()
.ctor(assessmentContextID, TestID, userID)
Equals(value)
GetHashCode()
ToString()
get_AssessmentContextID()
get_TestID()
.ctor(AssessmentContextID, TestID)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_TestType()
get_TimeAllowedTotal()
get_AnswerDisplayType()
get_TotalNumberOfQuestions()
get_TimeAllowedForDisconnections()
get_SerializedData()
get_GradingMethod()
get_MaxScore()
get_MinScore()
get_QuestionScoringMethod()
get_SuggestQuestionGrades()
get_ManualMarkingRequired()
.ctor(TestID, TestType, TimeAllowedTotal, AnswerDisplayType, TotalNumberOfQuestions, TimeAllowedForDisconnections, SerializedData, GradingMethod, MaxScore, MinScore, QuestionScoringMethod, SuggestQuestionGrades, ManualMarkingRequired)
Equals(value)
GetHashCode()
ToString()
get_startingID()
.ctor(startingID)
Equals(value)
GetHashCode()
ToString()
get_CurriculumID()
.ctor(CurriculumID)
Equals(value)
GetHashCode()
ToString()
get_ListID()
.ctor(ListID)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_CurriculumStandardIDs()
.ctor(listID, CurriculumStandardIDs)
Equals(value)
GetHashCode()
ToString()
get_AncestorModule()
.ctor(AncestorModule)
Equals(value)
GetHashCode()
ToString()
get_OldListID()
get_NewListID()
.ctor(OldListID, NewListID)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_CurriculumStandardIDs()
.ctor(moduleID, CurriculumStandardIDs)
Equals(value)
GetHashCode()
ToString()
get_Name()
get_ShortName()
.ctor(Name, ShortName)
Equals(value)
GetHashCode()
ToString()
get_curriculum()
get_name()
.ctor(curriculum, name)
Equals(value)
GetHashCode()
ToString()
get_curriculumLevel()
get_curriculumSubject()
get_name()
get_curriculumIdentifier()
get_isAdmin()
get_UserID()
.ctor(curriculumLevel, curriculumSubject, name, curriculumIdentifier, isAdmin, UserID)
Equals(value)
GetHashCode()
ToString()
get_Standard()
.ctor(Standard)
Equals(value)
GetHashCode()
ToString()
get_curriculumStandard()
get_curriculumSubject()
get_curriculumIdentifier()
get_name()
get_Validated()
get_UserID()
.ctor(curriculumStandard, curriculumSubject, curriculumIdentifier, name, Validated, UserID)
Equals(value)
GetHashCode()
ToString()
get_subject()
.ctor(subject)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_deviceSessionID()
.ctor(userID, deviceSessionID)
Equals(value)
GetHashCode()
ToString()
get_sessionID()
get_userID()
get_applicationID()
get_role()
get_privilegesLevel()
get_schoolID()
get_classID()
get_moduleID()
get_baseLanguage()
get_targetSubject()
get_activityDescription()
get_flashVersion()
get_impersonatorID()
get_deviceSessionID()
.ctor(sessionID, userID, applicationID, role, privilegesLevel, schoolID, classID, moduleID, baseLanguage, targetSubject, activityDescription, flashVersion, impersonatorID, deviceSessionID)
Equals(value)
GetHashCode()
ToString()
get_sessionID()
get_ModuleID()
get_ClassID()
get_SchoolID()
get_role()
get_privilegesLevel()
get_baseLanguage()
get_targetSubject()
get_activityDescription()
.ctor(sessionID, ModuleID, ClassID, SchoolID, role, privilegesLevel, baseLanguage, targetSubject, activityDescription)
Equals(value)
GetHashCode()
ToString()
get_sessionID()
get_dateLastUsed()
.ctor(sessionID, dateLastUsed)
Equals(value)
GetHashCode()
ToString()
get_NewDeviceSessionID()
get_OldDeviceSessionID()
get_SessionID()
.ctor(NewDeviceSessionID, OldDeviceSessionID, SessionID)
Equals(value)
GetHashCode()
ToString()
get_LPPro()
get_EPPro()
get_Mobile()
.ctor(LPPro, EPPro, Mobile)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_LPPro()
get_EPPro()
get_Mobile()
.ctor(schoolID, LPPro, EPPro, Mobile)
Equals(value)
GetHashCode()
ToString()
get_sessionID()
get_userID()
get_applicationID()
get_role()
get_privilegesLevel()
get_schoolID()
get_classID()
get_moduleID()
get_baseLanguage()
get_targetSubject()
get_activityDescription()
get_flashVersion()
get_impersonatorID()
get_deviceSessionID()
get_dateLoggedIn()
get_dateLastUsed()
.ctor(sessionID, userID, applicationID, role, privilegesLevel, schoolID, classID, moduleID, baseLanguage, targetSubject, activityDescription, flashVersion, impersonatorID, deviceSessionID, dateLoggedIn, dateLastUsed)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_BaseLanguageWordLikelihood()
get_BaseLanguageWordLengthLikelihood()
get_BaseLanguageDifferenceBetweenWords()
get_TargetLanguageWordLikelihood()
get_TargetLanguageWordLengthLikelihood()
get_TargetLanguageDifferenceBetweenWords()
get_DifferenceBetweenRows()
.ctor(ListID, BaseLanguageWordLikelihood, BaseLanguageWordLengthLikelihood, BaseLanguageDifferenceBetweenWords, TargetLanguageWordLikelihood, TargetLanguageWordLengthLikelihood, TargetLanguageDifferenceBetweenWords, DifferenceBetweenRows)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_LikelihoodScore()
.ctor(ListID, LikelihoodScore)
Equals(value)
GetHashCode()
ToString()
get_USER_TYPE_TEACHER()
get_USER_TYPE_ADMINISTRATOR()
.ctor(USER_TYPE_TEACHER, USER_TYPE_ADMINISTRATOR)
Equals(value)
GetHashCode()
ToString()
get_numberOfLists()
get_USER_TYPE_STUDENT()
.ctor(numberOfLists, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_numberOfLists()
get_offset()
.ctor(numberOfLists, offset)
Equals(value)
GetHashCode()
ToString()
get_language()
get_USER_TYPE_TEACHER()
get_USER_TYPE_ADMINISTATOR()
.ctor(language, USER_TYPE_TEACHER, USER_TYPE_ADMINISTATOR)
Equals(value)
GetHashCode()
ToString()
get_NumberOfItems()
get_CooldownMinutes()
.ctor(NumberOfItems, CooldownMinutes)
Equals(value)
GetHashCode()
ToString()
get_ContentListType()
get_SchoolOwnerType()
get_UserOwnerType()
.ctor(ContentListType, SchoolOwnerType, UserOwnerType)
Equals(value)
GetHashCode()
ToString()
get_offset()
get_size()
.ctor(offset, size)
Equals(value)
GetHashCode()
ToString()
get_activityType()
.ctor(activityType)
Equals(value)
GetHashCode()
ToString()
get_CoolDownMinutes()
get_NumberOfItems()
.ctor(CoolDownMinutes, NumberOfItems)
Equals(value)
GetHashCode()
ToString()
get_CoolDownMinutes()
.ctor(CoolDownMinutes)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_MinPrivileges()
get_UserID()
get_UnlicencedUsersString()
.ctor(SchoolID, MinPrivileges, UserID, UnlicencedUsersString)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_UnlicencedUsers()
.ctor(schoolID, UnlicencedUsers)
Equals(value)
GetHashCode()
ToString()
get_HasTargetList()
get_HasTargetModule()
get_HasTargetSubject()
get_SchoolID()
get_TargetListIDs()
get_TargetModuleIDs()
get_TargetSubjects()
get_ClassesToCheck()
.ctor(HasTargetList, HasTargetModule, HasTargetSubject, SchoolID, TargetListIDs, TargetModuleIDs, TargetSubjects, ClassesToCheck)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_UnlicencedUsersString()
.ctor(schoolID, UnlicencedUsersString)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_StaffClassString()
.ctor(schoolID, StaffClassString)
Equals(value)
GetHashCode()
ToString()
get_UNLICENCED_USERS_NAME()
get_TargetSchool()
.ctor(UNLICENCED_USERS_NAME, TargetSchool)
Equals(value)
GetHashCode()
ToString()
get_minPrivileges()
get_maxPrivileges()
get_schoolID()
.ctor(minPrivileges, maxPrivileges, schoolID)
Equals(value)
GetHashCode()
ToString()
get_ClassID()
get_ClassName()
.ctor(ClassID, ClassName)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_MinPrivileges()
.ctor(userID, MinPrivileges)
Equals(value)
GetHashCode()
ToString()
get_unlicencedUsersClassID()
get_schoolID()
get_USER_TYPE_STUDENT()
.ctor(unlicencedUsersClassID, schoolID, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_classID()
.ctor(classID)
Equals(value)
GetHashCode()
ToString()
get_classIDs()
.ctor(classIDs)
Equals(value)
GetHashCode()
ToString()
get_classNames()
get_schoolID()
.ctor(classNames, schoolID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_startDate()
get_endDate()
.ctor(userID, startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_ClassID()
.ctor(ClassID)
Equals(value)
GetHashCode()
ToString()
get_minPrivileges()
get_maxPrivileges()
.ctor(minPrivileges, maxPrivileges)
Equals(value)
GetHashCode()
ToString()
get_UNLICENCED_USERS_NAME()
.ctor(UNLICENCED_USERS_NAME)
Equals(value)
GetHashCode()
ToString()
get_compCode()
.ctor(compCode)
Equals(value)
GetHashCode()
ToString()
get_includesFinished()
.ctor(includesFinished)
Equals(value)
GetHashCode()
ToString()
get_compName()
get_compCode()
get_description()
get_startDate()
get_endDate()
get_referenceKSID()
get_referenceScoresDSID()
get_isKSOwner()
get_scopeType()
get_interschoolPrivacyType()
get_hostSchoolID()
get_regionType()
get_isOfficial()
get_UserID()
.ctor(compName, compCode, description, startDate, endDate, referenceKSID, referenceScoresDSID, isKSOwner, scopeType, interschoolPrivacyType, hostSchoolID, regionType, isOfficial, UserID)
Equals(value)
GetHashCode()
ToString()
get_ImpersonatorID()
.ctor(ImpersonatorID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_compName()
get_compCode()
get_startDate()
get_endDate()
get_description()
get_scopeType()
get_interschoolPrivacyType()
get_knowledgeSetName()
get_scoreDatasetName()
get_interSchoolScoreboard()
get_interClassScoreboard()
get_interStudentScoreboard()
.ctor(UserID, compName, compCode, startDate, endDate, description, scopeType, interschoolPrivacyType, knowledgeSetName, scoreDatasetName, interSchoolScoreboard, interClassScoreboard, interStudentScoreboard)
Equals(value)
GetHashCode()
ToString()
get_compCode()
get_USER_TYPE_STUDENT()
.ctor(compCode, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_Code()
get_registrationSource()
.ctor(userID, Code, registrationSource)
Equals(value)
GetHashCode()
ToString()
get_Code()
get_schoolsToRemove()
.ctor(Code, schoolsToRemove)
Equals(value)
GetHashCode()
ToString()
get_compCode()
get_UserID()
.ctor(compCode, UserID)
Equals(value)
GetHashCode()
ToString()
get_adminMode()
get_schoolID()
.ctor(adminMode, schoolID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_schoolID()
get_compCode()
.ctor(UserID, schoolID, compCode)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
get_compCode()
.ctor(userID, schoolID, compCode)
Equals(value)
GetHashCode()
ToString()
get_compCode()
get_recipientSchoolIDs()
get_invitedBySchoolID()
get_invitedByUserID()
.ctor(compCode, recipientSchoolIDs, invitedBySchoolID, invitedByUserID)
Equals(value)
GetHashCode()
ToString()
get_invitedByUserID()
get_invitedBySchoolID()
get_compCode()
.ctor(invitedByUserID, invitedBySchoolID, compCode)
Equals(value)
GetHashCode()
ToString()
get_invitedByUserName()
get_invitorSchoolName()
get_competitionName()
get_recipientSchoolIDs()
.ctor(invitedByUserName, invitorSchoolName, competitionName, recipientSchoolIDs)
Equals(value)
GetHashCode()
ToString()
get_CreatedAlertID()
get_relevantInvitationID()
get_sendEmailsSuccessful()
.ctor(CreatedAlertID, relevantInvitationID, sendEmailsSuccessful)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_compCode()
.ctor(userID, compCode)
Equals(value)
GetHashCode()
ToString()
get_recipientIDs()
get_recipientSchoolID()
get_checkUnsubscribed()
get_hasActiveLicence()
.ctor(recipientIDs, recipientSchoolID, checkUnsubscribed, hasActiveLicence)
Equals(value)
GetHashCode()
ToString()
get_invitedByUserID()
get_invitedBySchoolID()
get_competitionCode()
.ctor(invitedByUserID, invitedBySchoolID, competitionCode)
Equals(value)
GetHashCode()
ToString()
get_invitationIDs()
.ctor(invitationIDs)
Equals(value)
GetHashCode()
ToString()
get_UpdaterUserID()
get_Code()
.ctor(UpdaterUserID, Code)
Equals(value)
GetHashCode()
ToString()
get_CompCode()
.ctor(CompCode)
Equals(value)
GetHashCode()
ToString()
get_CompCode()
get_Student()
.ctor(CompCode, Student)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_CompCode()
.ctor(UserID, CompCode)
Equals(value)
GetHashCode()
ToString()
get_Event()
get_StartDate()
get_EndDate()
get_Name()
get_QuotaSeconds()
.ctor(Event, StartDate, EndDate, Name, QuotaSeconds)
Equals(value)
GetHashCode()
ToString()
get_templateID()
.ctor(templateID)
Equals(value)
GetHashCode()
ToString()
get_templateIDs()
.ctor(templateIDs)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_templateIDs()
.ctor(moduleID, templateIDs)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_templates()
.ctor(schoolID, templates)
Equals(value)
GetHashCode()
ToString()
get_templateID()
get_moduleID()
get_featured()
.ctor(templateID, moduleID, featured)
Equals(value)
GetHashCode()
ToString()
get_templateID()
get_moduleID()
.ctor(templateID, moduleID)
Equals(value)
GetHashCode()
ToString()
get_baseLanguage()
get_targetSubject()
get_templateID()
.ctor(baseLanguage, targetSubject, templateID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_schoolOwner()
get_subjectID()
get_mediaType()
get_sharing()
get_url()
get_thumbnailURL()
get_title()
get_tags()
get_attribution()
.ctor(UserID, schoolOwner, subjectID, mediaType, sharing, url, thumbnailURL, title, tags, attribution)
Equals(value)
GetHashCode()
ToString()
get_SubjectID()
get_URL()
get_Title()
get_Tags()
get_Attribution()
get_Sharing()
.ctor(SubjectID, URL, Title, Tags, Attribution, Sharing)
Equals(value)
GetHashCode()
ToString()
get_searchTerm()
get_subjectID()
get_mediaType()
get_school()
.ctor(searchTerm, subjectID, mediaType, school)
Equals(value)
GetHashCode()
ToString()
get_QuestionID()
get_videoSource()
get_VideoID()
get_DateVideoAdded()
.ctor(QuestionID, videoSource, VideoID, DateVideoAdded)
Equals(value)
GetHashCode()
ToString()
get_previousMaxID()
get_lastSuccessful()
.ctor(previousMaxID, lastSuccessful)
Equals(value)
GetHashCode()
ToString()
get_questionID()
get_videoID()
get_videoSource()
.ctor(questionID, videoID, videoSource)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_ClassIDs()
get_LicenceID()
.ctor(UserID, ClassIDs, LicenceID)
Equals(value)
GetHashCode()
ToString()
get_LicenceIDToCheck()
.ctor(LicenceIDToCheck)
Equals(value)
GetHashCode()
ToString()
get_CreatorID()
get_OldLicenceID()
get_NewLicenceID()
get_UserIDs()
get_TransactionType()
get_SchoolID()
.ctor(CreatorID, OldLicenceID, NewLicenceID, UserIDs, TransactionType, SchoolID)
Equals(value)
GetHashCode()
ToString()
get_TransactionID()
.ctor(TransactionID)
Equals(value)
GetHashCode()
ToString()
get_ClassID()
get_USER_TYPE_STUDENT()
.ctor(ClassID, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_RelevantTransactionID()
get_CreatorID()
get_OldLicenceID()
get_NewLicenceID()
get_TransactionType()
get_SchoolID()
.ctor(RelevantTransactionID, CreatorID, OldLicenceID, NewLicenceID, TransactionType, SchoolID)
Equals(value)
GetHashCode()
ToString()
get_LicenceChanged()
.ctor(LicenceChanged)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_Count()
.ctor(SchoolID, Count)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_StartDate()
get_EndDate()
get_TransactionIDs()
get_SpecificTransactions()
.ctor(SchoolID, StartDate, EndDate, TransactionIDs, SpecificTransactions)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_isReply()
get_TargetUserID()
get_NumberOfNewCheers()
.ctor(UserID, isReply, TargetUserID, NumberOfNewCheers)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_isReply()
get_NumberOfNewCheers()
.ctor(UserID, isReply, NumberOfNewCheers)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_INITIAL_CHEERS()
.ctor(userID, INITIAL_CHEERS)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_cheersEarned()
get_INITIAL_CHEERS()
.ctor(userID, cheersEarned, INITIAL_CHEERS)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_competitionCode()
.ctor(userID, competitionCode)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
get_competitionCode()
get_message()
get_rating()
get_spam()
get_cheersToDecrement()
.ctor(userID, schoolID, competitionCode, message, rating, spam, cheersToDecrement)
Equals(value)
GetHashCode()
ToString()
get_competitionCode()
get_numberOfItems()
.ctor(competitionCode, numberOfItems)
Equals(value)
GetHashCode()
ToString()
get_shoutoutID()
.ctor(shoutoutID)
Equals(value)
GetHashCode()
ToString()
get_ItemID()
get_Rating()
get_Spam()
.ctor(ItemID, Rating, Spam)
Equals(value)
GetHashCode()
ToString()
get_conversationID()
.ctor(conversationID)
Equals(value)
GetHashCode()
ToString()
get_messageID()
.ctor(messageID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_lastKnownMessageID()
.ctor(schoolID, lastKnownMessageID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_lastKnownMessageID()
.ctor(userID, lastKnownMessageID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_department()
get_participants()
.ctor(schoolID, department, participants)
Equals(value)
GetHashCode()
ToString()
get_conversationID()
get_messageID()
.ctor(conversationID, messageID)
Equals(value)
GetHashCode()
ToString()
get_conversation()
get_creator()
get_author()
get_text()
.ctor(conversation, creator, author, text)
Equals(value)
GetHashCode()
ToString()
get_conversationID()
get_Author()
get_LPStaffClass()
.ctor(conversationID, Author, LPStaffClass)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_newText()
get_messageID()
.ctor(UserID, newText, messageID)
Equals(value)
GetHashCode()
ToString()
get_conversationID()
get_department()
.ctor(conversationID, department)
Equals(value)
GetHashCode()
ToString()
get_conversationID()
get_participants()
.ctor(conversationID, participants)
Equals(value)
GetHashCode()
ToString()
get_conversationID()
get_starred()
.ctor(conversationID, starred)
Equals(value)
GetHashCode()
ToString()
get_messageID()
get_starred()
.ctor(messageID, starred)
Equals(value)
GetHashCode()
ToString()
get_messageID()
get_UserID()
.ctor(messageID, UserID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
.ctor(UserID)
Equals(value)
GetHashCode()
ToString()
get_conversationID()
get_UserID()
get_TeacherPrivileges()
.ctor(conversationID, UserID, TeacherPrivileges)
Equals(value)
GetHashCode()
ToString()
get_id()
get_schoolID()
get_concurrencyTimestampString()
.ctor(id, schoolID, concurrencyTimestampString)
Equals(value)
GetHashCode()
ToString()
get_DATASET_PURPOSE_TASK()
.ctor(DATASET_PURPOSE_TASK)
Equals(value)
GetHashCode()
ToString()
get_periodStartDate()
get_periodEndDate()
get_USER_TYPE_STUDENT()
.ctor(periodStartDate, periodEndDate, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_USER_TYPE_STUDENT()
.ctor(USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_DatasetID()
get_includePerSubjectAchievements()
.ctor(DatasetID, includePerSubjectAchievements)
Equals(value)
GetHashCode()
ToString()
get_explicitCompletionDatetime()
get_attemptUniqueKey()
.ctor(explicitCompletionDatetime, attemptUniqueKey)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_TaskID()
get_SubjectID()
get_ModuleID()
.ctor(ListID, TaskID, SubjectID, ModuleID)
Equals(value)
GetHashCode()
ToString()
get_NumberOfStudents()
get_baseLanguage()
get_SubjectIDs()
.ctor(NumberOfStudents, baseLanguage, SubjectIDs)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_CacheFilterID()
get_UserID()
get_NumberOfStudents()
get_baseLanguage()
get_subjectIDs()
get_startDate()
get_endDate()
.ctor(schoolID, CacheFilterID, UserID, NumberOfStudents, baseLanguage, subjectIDs, startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_cacheFilterID()
get_userID()
get_NumberOfStudents()
get_baseLanguage()
get_subjectIDs()
get_startDate()
get_endDate()
.ctor(cacheFilterID, userID, NumberOfStudents, baseLanguage, subjectIDs, startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_items()
get_minStudents()
get_minMinutesSpent()
get_cacheFilterID()
get_userID()
get_NumberOfStudents()
get_baseLanguage()
get_SubjectIDs()
get_startDate()
get_endDate()
.ctor(items, minStudents, minMinutesSpent, cacheFilterID, userID, NumberOfStudents, baseLanguage, SubjectIDs, startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_items()
get_minStudents()
get_minMinutesSpent()
get_cacheFilterID()
get_NumberOfStudents()
get_baseLanguage()
get_SubjectIDs()
get_startDate()
get_endDate()
.ctor(items, minStudents, minMinutesSpent, cacheFilterID, NumberOfStudents, baseLanguage, SubjectIDs, startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_cacheFilterID()
get_baseLanguage()
get_startDate()
get_endDate()
get_NumberOfStudents()
.ctor(cacheFilterID, baseLanguage, startDate, endDate, NumberOfStudents)
Equals(value)
GetHashCode()
ToString()
get_cacheFilterID()
get_baseLanguage()
get_startDate()
get_endDate()
get_subjectIDs()
get_NumberOfStudents()
.ctor(cacheFilterID, baseLanguage, startDate, endDate, subjectIDs, NumberOfStudents)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_baseLanguage()
get_startDate()
get_endDate()
get_subjectIDs()
.ctor(userID, baseLanguage, startDate, endDate, subjectIDs)
Equals(value)
GetHashCode()
ToString()
get_cacheFilterID()
get_UserID()
get_baseLanguage()
get_startDate()
get_endDate()
get_NumberOfStudents()
.ctor(cacheFilterID, UserID, baseLanguage, startDate, endDate, NumberOfStudents)
Equals(value)
GetHashCode()
ToString()
get_cacheFilterID()
get_baseLanguage()
get_targetSubject()
get_startDate()
get_endDate()
.ctor(cacheFilterID, baseLanguage, targetSubject, startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_eventCode()
.ctor(eventCode)
Equals(value)
GetHashCode()
ToString()
get_timePeriodID()
get_userID()
get_usedSeconds()
get_quotaSeconds()
.ctor(timePeriodID, userID, usedSeconds, quotaSeconds)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_periodID()
.ctor(userID, periodID)
Equals(value)
GetHashCode()
ToString()
get_StructuredActivity()
get_ContentList()
get_OwnsContentList()
get_DisplayIndex()
get_Type()
get_TranslationDirection()
get_Metadata()
get_baseLanguage()
get_targetSubject()
get_creator()
.ctor(StructuredActivity, ContentList, OwnsContentList, DisplayIndex, Type, TranslationDirection, Metadata, baseLanguage, targetSubject, creator)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_ContentList()
get_OwnsContentList()
get_StructuredActivity()
get_DisplayIndex()
get_Type()
get_TranslationDirection()
get_Metadata()
.ctor(ID, ContentList, OwnsContentList, StructuredActivity, DisplayIndex, Type, TranslationDirection, Metadata)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_DisplayIndex()
get_TranslationDirection()
get_Metadata()
get_StructuredActivity()
.ctor(ID, DisplayIndex, TranslationDirection, Metadata, StructuredActivity)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_moduleID()
.ctor(userID, moduleID)
Equals(value)
GetHashCode()
ToString()
get_timestamp()
.ctor(timestamp)
Equals(value)
GetHashCode()
ToString()
get_ItemType()
get_ItemID()
.ctor(ItemType, ItemID)
Equals(value)
GetHashCode()
ToString()
get_ItemType()
get_ItemID()
get_SearchID()
.ctor(ItemType, ItemID, SearchID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_Teacher()
.ctor(UserID, Teacher)
Equals(value)
GetHashCode()
ToString()
get_Teacher()
.ctor(Teacher)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_USER_TYPE_TEACHER()
.ctor(userID, USER_TYPE_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_chosenClass()
get_sessionID()
get_PRIVILEGES_TEACHER()
.ctor(UserID, chosenClass, sessionID, PRIVILEGES_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_providerCode()
get_user()
.ctor(providerCode, user)
Equals(value)
GetHashCode()
ToString()
get_providerCode()
get_user()
get_registeredUserID()
get_serviceTicket()
get_classID()
.ctor(providerCode, user, registeredUserID, serviceTicket, classID)
Equals(value)
GetHashCode()
ToString()
get_providerCode()
.ctor(providerCode)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_OldClassID()
get_NewClassID()
get_USER_TYPE_STUDENT()
.ctor(UserID, OldClassID, NewClassID, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_classExceptions()
.ctor(schoolID, classExceptions)
Equals(value)
GetHashCode()
ToString()
get_providerCode()
get_user()
get_registeredUserID()
get_serviceTicket()
get_classID()
get_USER_TYPE_STUDENT()
.ctor(providerCode, user, registeredUserID, serviceTicket, classID, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_senderID()
get_targetUserIDs()
get_expiryDate()
get_alertType()
get_message()
get_alertDataJson()
.ctor(senderID, targetUserIDs, expiryDate, alertType, message, alertDataJson)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_unseenOnly()
.ctor(userID, unseenOnly)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_alertID()
.ctor(userID, alertID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_alertIDs()
.ctor(userID, alertIDs)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_baseLanguageID()
get_targetSubjectID()
get_Description()
get_CreatedBy()
get_CreatedDate()
.ctor(ID, baseLanguageID, targetSubjectID, Description, CreatedBy, CreatedDate)
Equals(value)
GetHashCode()
ToString()
get_baseLanguageID()
get_targetSubjectID()
get_searchTerms()
.ctor(baseLanguageID, targetSubjectID, searchTerms)
Equals(value)
GetHashCode()
ToString()
get_listID()
.ctor(listID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_USER_TYPE_TEACHER()
.ctor(UserID, USER_TYPE_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_id()
get_ConceptID()
get_baseLanguageID()
get_targetSubjectID()
get_QuestionDefinition()
get_DisplayText()
get_TypeCode()
get_CreatedBy()
get_CreatedDate()
get_Status()
get_Notes()
get_TimeAllocated()
get_milestoneRuleID()
.ctor(id, ConceptID, baseLanguageID, targetSubjectID, QuestionDefinition, DisplayText, TypeCode, CreatedBy, CreatedDate, Status, Notes, TimeAllocated, milestoneRuleID)
Equals(value)
GetHashCode()
ToString()
get_baseLanguageID()
get_targetSubjectID()
get_searchTerms()
get_listID()
.ctor(baseLanguageID, targetSubjectID, searchTerms, listID)
Equals(value)
GetHashCode()
ToString()
get_sourceQuestionID()
get_newQuestionID()
.ctor(sourceQuestionID, newQuestionID)
Equals(value)
GetHashCode()
ToString()
get_questionID()
.ctor(questionID)
Equals(value)
GetHashCode()
ToString()
get_listIDs()
.ctor(listIDs)
Equals(value)
GetHashCode()
ToString()
get_questionID()
get_revisionID()
get_userID()
get_rating()
.ctor(questionID, revisionID, userID, rating)
Equals(value)
GetHashCode()
ToString()
get_questionID()
get_revisionID()
get_userID()
get_variablesState()
get_rating()
get_notes()
.ctor(questionID, revisionID, userID, variablesState, rating, notes)
Equals(value)
GetHashCode()
ToString()
get_questionID()
get_revisionID()
get_userID()
get_variablesState()
get_userAnswers()
get_problem()
get_expectation()
get_activityID()
get_sectionID()
get_schoolID()
get_moduleID()
get_problemAreas()
.ctor(questionID, revisionID, userID, variablesState, userAnswers, problem, expectation, activityID, sectionID, schoolID, moduleID, problemAreas)
Equals(value)
GetHashCode()
ToString()
get_status()
get_numberOfResults()
get_problemAreaCode()
.ctor(status, numberOfResults, problemAreaCode)
Equals(value)
GetHashCode()
ToString()
get_feedbackIDs()
.ctor(feedbackIDs)
Equals(value)
GetHashCode()
ToString()
get_feedbackIDs()
get_status()
.ctor(feedbackIDs, status)
Equals(value)
GetHashCode()
ToString()
get_questionIDs()
.ctor(questionIDs)
Equals(value)
GetHashCode()
ToString()
get_questionIDs()
get_status()
.ctor(questionIDs, status)
Equals(value)
GetHashCode()
ToString()
get_ContentResultID()
.ctor(ContentResultID)
Equals(value)
GetHashCode()
ToString()
get_templateListID()
.ctor(templateListID)
Equals(value)
GetHashCode()
ToString()
get_commentID()
.ctor(commentID)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_CreatedBy()
get_LogDate()
get_ActivityItemType()
get_CommentAreaID()
get_AuthorUserID()
get_Text()
get_OtherContactName()
get_Starred()
get_DepartmentRoleID()
get_TeacherVisible()
get_callOutcome()
.ctor(SchoolID, CreatedBy, LogDate, ActivityItemType, CommentAreaID, AuthorUserID, Text, OtherContactName, Starred, DepartmentRoleID, TeacherVisible, callOutcome)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_LogDate()
get_AuthorUserID()
get_CommentAreaID()
get_Text()
get_OtherContactName()
get_Starred()
get_ModifiedBy()
get_DepartmentRoleID()
get_TeacherVisible()
get_CallOutcome()
.ctor(ID, LogDate, AuthorUserID, CommentAreaID, Text, OtherContactName, Starred, ModifiedBy, DepartmentRoleID, TeacherVisible, CallOutcome)
Equals(value)
GetHashCode()
ToString()
get_commentID()
get_NewData()
.ctor(commentID, NewData)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_lastKnownCommentID()
.ctor(schoolID, lastKnownCommentID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_commentFromMatilda()
get_department()
get_starred()
.ctor(schoolID, commentFromMatilda, department, starred)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_commentFromMatilda()
get_department()
get_starred()
get_daysAgo()
.ctor(schoolID, commentFromMatilda, department, starred, daysAgo)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_FULL_ACCESS()
.ctor(userID, FULL_ACCESS)
Equals(value)
GetHashCode()
ToString()
get_lookup()
get_u()
.ctor(lookup, u)
Equals(value)
GetHashCode()
ToString()
get_leaderOwnerID()
.ctor(leaderOwnerID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_departmentIDs()
.ctor(schoolID, departmentIDs)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_languageID()
get_reportedByFilter()
get_problemTypeCode()
get_flagTypes()
get_TargetUserTypes()
.ctor(schoolID, languageID, reportedByFilter, problemTypeCode, flagTypes, TargetUserTypes)
Equals(value)
GetHashCode()
ToString()
get_flagTypes()
.ctor(flagTypes)
Equals(value)
GetHashCode()
ToString()
get_problemIDs()
.ctor(problemIDs)
Equals(value)
GetHashCode()
ToString()
get_problemIDs()
get_SEEN()
.ctor(problemIDs, SEEN)
Equals(value)
GetHashCode()
ToString()
get_translationID()
get_EDITED()
.ctor(translationID, EDITED)
Equals(value)
GetHashCode()
ToString()
get_item()
get_prices()
.ctor(item, prices)
Equals(value)
GetHashCode()
ToString()
get_periodID()
.ctor(periodID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_SchoolID()
get_CONFIRMATION_OUTCOME_CONFIRMED()
.ctor(UserID, SchoolID, CONFIRMATION_OUTCOME_CONFIRMED)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
get_periodID()
get_CONFIRMATION_OUTCOME_DISMISSED()
.ctor(userID, schoolID, periodID, CONFIRMATION_OUTCOME_DISMISSED)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_SchoolID()
get_Teacher()
get_RevenueTypeCode()
get_Confirmed()
get_NextYearPeriodID()
.ctor(UserID, SchoolID, Teacher, RevenueTypeCode, Confirmed, NextYearPeriodID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_CONFIRMATION_OUTCOME_CONFIRMED()
.ctor(schoolID, CONFIRMATION_OUTCOME_CONFIRMED)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_DepartmentID()
get_PeriodID()
get_ConfirmationStartDate()
get_ConfirmationEndDate()
.ctor(SchoolID, DepartmentID, PeriodID, ConfirmationStartDate, ConfirmationEndDate)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_DepartmentID()
get_PeriodID()
.ctor(SchoolID, DepartmentID, PeriodID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
get_departmentID()
get_periodID()
get_outcomeID()
.ctor(userID, schoolID, departmentID, periodID, outcomeID)
Equals(value)
GetHashCode()
ToString()
get_RevenueTypeCode()
.ctor(RevenueTypeCode)
Equals(value)
GetHashCode()
ToString()
get_periodID()
get_campaignCode()
.ctor(periodID, campaignCode)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_departmentID()
get_periodID()
get_newStartDate()
.ctor(schoolID, departmentID, periodID, newStartDate)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_userWhoChangedID()
get_UNLICENCED_USERS_NAME()
.ctor(schoolID, userWhoChangedID, UNLICENCED_USERS_NAME)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_AuthenticationProvider()
get_ExpiryDate()
.ctor(UserID, AuthenticationProvider, ExpiryDate)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_authenticationProvider()
.ctor(userID, authenticationProvider)
Equals(value)
GetHashCode()
ToString()
get_templateID()
get_userID()
.ctor(templateID, userID)
Equals(value)
GetHashCode()
ToString()
get_DataType()
get_Status()
get_Dataset()
.ctor(DataType, Status, Dataset)
Equals(value)
GetHashCode()
ToString()
get_Status()
get_SnapshotID()
.ctor(Status, SnapshotID)
Equals(value)
GetHashCode()
ToString()
get_ClassIDs()
get_UNLICENCED_USERS_NAME()
get_USER_TYPE_STUDENT()
.ctor(ClassIDs, UNLICENCED_USERS_NAME, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_SchoolIDs()
get_UNLICENCED_USERS_NAME()
get_USER_TYPE_STUDENT()
.ctor(SchoolIDs, UNLICENCED_USERS_NAME, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_ListIDs()
.ctor(ListIDs)
Equals(value)
GetHashCode()
ToString()
get_ModuleIDs()
.ctor(ModuleIDs)
Equals(value)
GetHashCode()
ToString()
get_TestIDs()
.ctor(TestIDs)
Equals(value)
GetHashCode()
ToString()
get_typeCode()
get_uniqueKey()
get_numberOfItems()
.ctor(typeCode, uniqueKey, numberOfItems)
Equals(value)
GetHashCode()
ToString()
get_typeCode()
get_uniqueKey()
get_MAX_CACHE_AGE_MINUTES()
.ctor(typeCode, uniqueKey, MAX_CACHE_AGE_MINUTES)
Equals(value)
GetHashCode()
ToString()
get_filterID()
.ctor(filterID)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_ActivitySubTypeID()
get_RangeStartDate()
get_RangeEndDate()
get_BaseLanguageID()
get_TargetSubjectID()
.ctor(UsersResultID, ActivitySubTypeID, RangeStartDate, RangeEndDate, BaseLanguageID, TargetSubjectID)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_ActivitiesResultID()
get_ActivitySubTypeID()
get_RangeStartDate()
get_RangeEndDate()
.ctor(UsersResultID, ActivitiesResultID, ActivitySubTypeID, RangeStartDate, RangeEndDate)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_ActivitiesResultID()
get_ActivitySubTypeID()
get_DataSetID()
get_MilestoneLevelID()
.ctor(UsersResultID, ActivitiesResultID, ActivitySubTypeID, DataSetID, MilestoneLevelID)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_DataSetID()
get_MilestoneLevelID()
.ctor(UsersResultID, DataSetID, MilestoneLevelID)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_DataSetID()
get_MilestoneLevelID()
get_BaseLanguageID()
get_TargetSubjectID()
.ctor(UsersResultID, DataSetID, MilestoneLevelID, BaseLanguageID, TargetSubjectID)
Equals(value)
GetHashCode()
ToString()
get_numLanguageDirections()
get_ListID()
.ctor(numLanguageDirections, ListID)
Equals(value)
GetHashCode()
ToString()
get_numLanguageDirections()
get_ModuleID()
.ctor(numLanguageDirections, ModuleID)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_ActivitiesResultID()
get_DataSetID()
get_MilestoneLevelID()
get_ActivitySubTypeID()
.ctor(UsersResultID, ActivitiesResultID, DataSetID, MilestoneLevelID, ActivitySubTypeID)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_TimeAllowedTotal()
get_TimeAllowedForDisconnections()
get_TotalNumberOfQuestions()
get_AnswerDisplayType()
get_HasStructuredContent()
get_GradingMethod()
get_MinScore()
get_MaxScore()
.ctor(TestID, TimeAllowedTotal, TimeAllowedForDisconnections, TotalNumberOfQuestions, AnswerDisplayType, HasStructuredContent, GradingMethod, MinScore, MaxScore)
Equals(value)
GetHashCode()
ToString()
get_TestID()
get_TimeAllowedTotal()
get_AnswerDisplayType()
get_TotalNumberOfQuestions()
get_TimeAllowedForDisconnections()
.ctor(TestID, TimeAllowedTotal, AnswerDisplayType, TotalNumberOfQuestions, TimeAllowedForDisconnections)
Equals(value)
GetHashCode()
ToString()
get_SessionID()
get_UserID()
get_TestID()
get_AssessmentContext()
get_warnAboutIncompletePreviousAttempts()
get_TotalAllowedAttemptTime()
.ctor(SessionID, UserID, TestID, AssessmentContext, warnAboutIncompletePreviousAttempts, TotalAllowedAttemptTime)
Equals(value)
GetHashCode()
ToString()
get_SessionID()
get_UserID()
get_attemptID()
.ctor(SessionID, UserID, attemptID)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_OldStatus()
get_NewStatus()
.ctor(AttemptID, OldStatus, NewStatus)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_TestID()
get_AssessmentContextID()
get_AttemptID()
get_AttemptNumber()
get_Grade()
get_Score()
get_Percentage()
get_Status()
get_UnusualActivityDetected()
.ctor(UserID, TestID, AssessmentContextID, AttemptID, AttemptNumber, Grade, Score, Percentage, Status, UnusualActivityDetected)
Equals(value)
GetHashCode()
ToString()
get_AttemptID()
get_QuestionIndex()
get_QuestionGroup()
get_ContentID()
get_ContentVersion()
get_Grade()
get_QuestionState()
get_UsersAnswer()
get_TimeTaken()
.ctor(AttemptID, QuestionIndex, QuestionGroup, ContentID, ContentVersion, Grade, QuestionState, UsersAnswer, TimeTaken)
Equals(value)
GetHashCode()
ToString()
get_certificationLevel()
get_userID()
.ctor(certificationLevel, userID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_USER_TYPE_TEACHER()
.ctor(schoolID, USER_TYPE_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_Email()
.ctor(Email)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
.ctor(TaskID)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_UsersResultID()
.ctor(TaskID, UsersResultID)
Equals(value)
GetHashCode()
ToString()
get_Status()
get_NotificationID()
.ctor(Status, NotificationID)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_UpdateType()
.ctor(TaskID, UpdateType)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_ActivitiesResultID()
get_DataSetID()
get_MilestoneLevelID()
get_TargetActivityTypeIDs()
get_TargetActivitySubtypeIDs()
.ctor(UsersResultID, ActivitiesResultID, DataSetID, MilestoneLevelID, TargetActivityTypeIDs, TargetActivitySubtypeIDs)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_ActivitiesResultID()
get_DataSetID()
get_MilestoneLevelID()
get_TargetActivityTypeIDs()
get_TargetActivitySubtypeIDs()
.ctor(userID, ActivitiesResultID, DataSetID, MilestoneLevelID, TargetActivityTypeIDs, TargetActivitySubtypeIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_UpdateType()
.ctor(UserID, UpdateType)
Equals(value)
GetHashCode()
ToString()
get_CachedUserResultID()
get_SnapshotID()
get_TaskID()
get_DataSetID()
.ctor(CachedUserResultID, SnapshotID, TaskID, DataSetID)
Equals(value)
GetHashCode()
ToString()
get_SnapshotID()
get_numberOfStudents()
get_numberStarted()
get_numberCompleted()
get_percentComplete()
.ctor(SnapshotID, numberOfStudents, numberStarted, numberCompleted, percentComplete)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TaskEvent()
get_DataType()
get_Status()
get_DataSetID()
.ctor(TaskID, TaskEvent, DataType, Status, DataSetID)
Equals(value)
GetHashCode()
ToString()
get_TargetTasks()
get_STATUS_COMPLETED()
.ctor(TargetTasks, STATUS_COMPLETED)
Equals(value)
GetHashCode()
ToString()
get_TaskIDs()
get_TaskEvent()
.ctor(TaskIDs, TaskEvent)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_NumberOfQuestions()
get_NumberOfStudents()
get_TestID()
get_AssessmentContextID()
.ctor(UsersResultID, NumberOfQuestions, NumberOfStudents, TestID, AssessmentContextID)
Equals(value)
GetHashCode()
ToString()
get_ScoreDataSetID()
get_KnowledgeSetID()
get_UsersResultID()
get_NumberOfStudents()
get_NumberOfQuestions()
.ctor(ScoreDataSetID, KnowledgeSetID, UsersResultID, NumberOfStudents, NumberOfQuestions)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_UsersResultID()
get_ScoreDatasetID()
get_TaskEvent()
.ctor(TaskID, UsersResultID, ScoreDatasetID, TaskEvent)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_TestID()
get_AssessmentContextID()
get_STATUS_COMPLETED()
.ctor(UsersResultID, TestID, AssessmentContextID, STATUS_COMPLETED)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
.ctor(UsersResultID)
Equals(value)
GetHashCode()
ToString()
get_taskID()
get_taskEvent()
.ctor(taskID, taskEvent)
Equals(value)
GetHashCode()
ToString()
get_UsersResultID()
get_snapshotID()
.ctor(UsersResultID, snapshotID)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TaskEvent()
.ctor(TaskID, TaskEvent)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_SchoolIDs()
.ctor(TaskID, SchoolIDs)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_ClassIDs()
.ctor(TaskID, ClassIDs)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_UsersToAdd()
.ctor(TaskID, UsersToAdd)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_UserIDs()
.ctor(TaskID, UserIDs)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_UsersToRemove()
.ctor(TaskID, UsersToRemove)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_ModuleIDs()
.ctor(TaskID, ModuleIDs)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TestIDs()
.ctor(TaskID, TestIDs)
Equals(value)
GetHashCode()
ToString()
get_BaseLanguage()
get_TargetSubject()
.ctor(BaseLanguage, TargetSubject)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_ActivityTypeIDs()
.ctor(TaskID, ActivityTypeIDs)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_ActivitySubtypeIDs()
.ctor(TaskID, ActivitySubtypeIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_classIDs()
.ctor(UserID, classIDs)
Equals(value)
GetHashCode()
ToString()
get_TaskInstanceIDs()
.ctor(TaskInstanceIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_oldestExpiryDate()
.ctor(UserID, oldestExpiryDate)
Equals(value)
GetHashCode()
ToString()
get_expiryDateMoreRecentThan()
get_startDateOlderThan()
.ctor(expiryDateMoreRecentThan, startDateOlderThan)
Equals(value)
GetHashCode()
ToString()
get_BaseLanguageID()
.ctor(BaseLanguageID)
Equals(value)
GetHashCode()
ToString()
get_TargetSubjectID()
.ctor(TargetSubjectID)
Equals(value)
GetHashCode()
ToString()
get_TargetSubjectIDs()
.ctor(TargetSubjectIDs)
Equals(value)
GetHashCode()
ToString()
get_expiryDateMoreRecentThan()
.ctor(expiryDateMoreRecentThan)
Equals(value)
GetHashCode()
ToString()
get_startDateOlderThan()
.ctor(startDateOlderThan)
Equals(value)
GetHashCode()
ToString()
get_Type()
get_Creator()
get_SchoolOwner()
get_Name()
get_Description()
get_StartDate()
get_DueDate()
get_FinalSubmissionDate()
get_AllowLateSubmissions()
get_TargetUsers()
get_TargetContent()
get_TargetActivities()
get_TimezoneOffset()
get_EstimatedTime()
get_Brand()
get_EmailTeachers()
get_EmailStudents()
get_EmailParents()
get_NotifyTeacher()
get_BaseLanguage()
get_TargetSubject()
get_EnableLiveActivityFeed()
get_trackStudentFocus()
get_requireFullScreenMode()
get_focusLossWarningStyle()
get_monitoringEventsStorageLocation()
get_disableCheers()
get_parentTask()
.ctor(Type, Creator, SchoolOwner, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, TargetUsers, TargetContent, TargetActivities, TimezoneOffset, EstimatedTime, Brand, EmailTeachers, EmailStudents, EmailParents, NotifyTeacher, BaseLanguage, TargetSubject, EnableLiveActivityFeed, trackStudentFocus, requireFullScreenMode, focusLossWarningStyle, monitoringEventsStorageLocation, disableCheers, parentTask)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_KnowledgesetID()
get_ScoreDatasetID()
get_ownsKnowledgeDataSet()
get_ownsScoreDataset()
.ctor(TaskID, KnowledgesetID, ScoreDatasetID, ownsKnowledgeDataSet, ownsScoreDataset)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_TaskID()
.ctor(UserID, TaskID)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_TestID()
get_OwnsTest()
get_NumberOfAttemptsAllowed()
get_GradeAggregationStyle()
get_AssessorType()
get_RequiresAccessCode()
get_AccessCode()
get_StudentResultDisplayPermissions()
get_SecurityLevel()
get_OverrideTimeAllowed()
get_OverrideTimeAllowedForDisconnections()
get_TeacherResultDisplayPermissions()
get_ResultPublicationStatus()
get_AllowTeacherAttempts()
.ctor(ID, TestID, OwnsTest, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, RequiresAccessCode, AccessCode, StudentResultDisplayPermissions, SecurityLevel, OverrideTimeAllowed, OverrideTimeAllowedForDisconnections, TeacherResultDisplayPermissions, ResultPublicationStatus, AllowTeacherAttempts)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_TargetStarLevel()
get_RequireLearningInAllSelectedActivitySubtypes()
get_TimerStyle()
get_ReviewQuizUnlockStyle()
get_DisableSoundInReadingMode()
.ctor(ID, TargetStarLevel, RequireLearningInAllSelectedActivitySubtypes, TimerStyle, ReviewQuizUnlockStyle, DisableSoundInReadingMode)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_TargetPoints()
get_TimerStyle()
get_ReviewQuizUnlockStyle()
get_DisableSoundInReadingMode()
.ctor(ID, TargetPoints, TimerStyle, ReviewQuizUnlockStyle, DisableSoundInReadingMode)
Equals(value)
GetHashCode()
ToString()
get_IncludePreviousAttempts()
get_PreviousAttemptsCutoff()
get_numberOfActivities()
get_TimerStyle()
get_ReviewQuizUnlockStyle()
get_HasFilteredSections()
get_HasUserSpecificActivities()
.ctor(IncludePreviousAttempts, PreviousAttemptsCutoff, numberOfActivities, TimerStyle, ReviewQuizUnlockStyle, HasFilteredSections, HasUserSpecificActivities)
Equals(value)
GetHashCode()
ToString()
get_FilteredSectionData()
.ctor(FilteredSectionData)
Equals(value)
GetHashCode()
ToString()
get_UserSpecificActivitiesData()
.ctor(UserSpecificActivitiesData)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_NewTargetUsers()
.ctor(TaskID, NewTargetUsers)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_NewTargetContent()
.ctor(TaskID, NewTargetContent)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_ContentResultID()
.ctor(TaskID, ContentResultID)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_NewTargetActivities()
.ctor(TaskID, NewTargetActivities)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_NumberOfActivitySubtypes()
.ctor(TaskID, NumberOfActivitySubtypes)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TaskEvent()
get_Type()
get_ScheduledDate()
get_Status()
get_SendEmails()
get_CreateAppNotifications()
get_NotifyTeacher()
.ctor(TaskID, TaskEvent, Type, ScheduledDate, Status, SendEmails, CreateAppNotifications, NotifyTeacher)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_TaskEvent()
get_Type()
get_ScheduledDate()
get_Status()
get_SendEmails()
get_CreateAppNotifications()
get_NotifyTeacher()
.ctor(ID, TaskEvent, Type, ScheduledDate, Status, SendEmails, CreateAppNotifications, NotifyTeacher)
Equals(value)
GetHashCode()
ToString()
get_IDsToDelete()
.ctor(IDsToDelete)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_Name()
get_Description()
get_Brand()
get_EnableLiveActivityFeed()
get_TrackStudentFocus()
get_RequireFullScreenMode()
get_FocusLossWarningStyle()
get_DisableCheers()
get_MonitoringEventsStorageLocation()
.ctor(TaskID, Name, Description, Brand, EnableLiveActivityFeed, TrackStudentFocus, RequireFullScreenMode, FocusLossWarningStyle, DisableCheers, MonitoringEventsStorageLocation)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_StartDate()
get_DueDate()
get_FinalSubmissionDate()
get_AllowLateSubmissions()
get_TimezoneOffset()
.ctor(TaskID, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, TimezoneOffset)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_StartDate()
get_DueDate()
get_TimezoneOffset()
.ctor(TaskID, StartDate, DueDate, TimezoneOffset)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TestID()
get_NumberOfAttemptsAllowed()
get_GradeAggregationStyle()
get_AssessorType()
get_studentResultDisplayPermissions()
get_teacherResultDisplayPermissions()
get_OwnsTest()
get_AssessmentContext()
get_requiresAccessCode()
get_accessCode()
get_securityLevel()
get_overrideTimeAllowed()
get_overrideTimeAllowedForDisconnections()
get_resultPublicationStatus()
get_allowTeacherAttempts()
.ctor(TaskID, TestID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, studentResultDisplayPermissions, teacherResultDisplayPermissions, OwnsTest, AssessmentContext, requiresAccessCode, accessCode, securityLevel, overrideTimeAllowed, overrideTimeAllowedForDisconnections, resultPublicationStatus, allowTeacherAttempts)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TargetPoints()
get_TimerStyle()
get_ReviewQuizUnlockStyle()
get_DisableSoundInReadingMode()
.ctor(TaskID, TargetPoints, TimerStyle, ReviewQuizUnlockStyle, DisableSoundInReadingMode)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TargetStarLevel()
get_RequireLearningInAllSelectedActivitySubtypes()
get_TimerStyle()
get_ReviewQuizUnlockStyle()
get_DisableSoundInReadingMode()
.ctor(TaskID, TargetStarLevel, RequireLearningInAllSelectedActivitySubtypes, TimerStyle, ReviewQuizUnlockStyle, DisableSoundInReadingMode)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_IncludePreviousAttempts()
get_PreviousAttemptsCutoff()
get_NumberOfActivities()
get_TimerStyle()
get_ReviewQuizUnlockStyle()
get_HasFilteredSections()
get_HasUserSpecificActivities()
.ctor(TaskID, IncludePreviousAttempts, PreviousAttemptsCutoff, NumberOfActivities, TimerStyle, ReviewQuizUnlockStyle, HasFilteredSections, HasUserSpecificActivities)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_AssessmentContext()
.ctor(TaskID, AssessmentContext)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_IsDeleted()
.ctor(TaskID, IsDeleted)
Equals(value)
GetHashCode()
ToString()
get_TaskIDs()
.ctor(TaskIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_DataSetID()
.ctor(UserID, DataSetID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_TaskID()
.ctor(userID, TaskID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_DataSetIDs()
.ctor(UserID, DataSetIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_TaskIDs()
.ctor(UserID, TaskIDs)
Equals(value)
GetHashCode()
ToString()
get_NewStatus()
get_AssessmentContext()
.ctor(NewStatus, AssessmentContext)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_EstimatedTime()
.ctor(TaskID, EstimatedTime)
Equals(value)
GetHashCode()
ToString()
get_TargetStarLevel()
get_NumberOfActivitySubtypes()
get_ContentResultID()
get_TargetActivitySubtypeIDs()
.ctor(TargetStarLevel, NumberOfActivitySubtypes, ContentResultID, TargetActivitySubtypeIDs)
Equals(value)
GetHashCode()
ToString()
get_TargetScore()
get_ContentResultID()
.ctor(TargetScore, ContentResultID)
Equals(value)
GetHashCode()
ToString()
get_TaskID()
get_TargetStars()
.ctor(TaskID, TargetStars)
Equals(value)
GetHashCode()
ToString()
get_assessmentContext()
.ctor(assessmentContext)
Equals(value)
GetHashCode()
ToString()
get_TargetListIDs()
.ctor(TargetListIDs)
Equals(value)
GetHashCode()
ToString()
get_UserResultID()
.ctor(UserResultID)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_Type()
get_estimatedTime()
.ctor(ID, Type, estimatedTime)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_includePreviousAttempts()
get_previousAttemptsCutoff()
.ctor(ID, includePreviousAttempts, previousAttemptsCutoff)
Equals(value)
GetHashCode()
ToString()
get_GRADE_STATUS_UNDERWAY()
get_TEST_TYPE_COMPLEX()
get_TEST_TYPE_QUICK_TEST()
get_STATUS_AWAITING_USER_INPUT()
.ctor(GRADE_STATUS_UNDERWAY, TEST_TYPE_COMPLEX, TEST_TYPE_QUICK_TEST, STATUS_AWAITING_USER_INPUT)
Equals(value)
GetHashCode()
ToString()
get_activityID()
get_LastUpdated()
.ctor(activityID, LastUpdated)
Equals(value)
GetHashCode()
ToString()
get_AttemptIDs()
.ctor(AttemptIDs)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_UserID()
get_baseLanguage()
get_targetLanguage()
.ctor(DataSetID, UserID, baseLanguage, targetLanguage)
Equals(value)
GetHashCode()
ToString()
get_dataset()
get_USER_TYPE_STUDENT()
get_userID()
.ctor(dataset, USER_TYPE_STUDENT, userID)
Equals(value)
GetHashCode()
ToString()
get_transTag()
get_tag()
.ctor(transTag, tag)
Equals(value)
GetHashCode()
ToString()
get_ActivityType()
.ctor(ActivityType)
Equals(value)
GetHashCode()
ToString()
get_smod()
get_mod()
.ctor(smod, mod)
Equals(value)
GetHashCode()
ToString()
get_smod()
get_creator()
.ctor(smod, creator)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_school()
.ctor(<>h__TransparentIdentifier0, school)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier1()
get_createdBy()
.ctor(<>h__TransparentIdentifier1, createdBy)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_creator()
.ctor(<>h__TransparentIdentifier0, creator)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier1()
get_school()
.ctor(<>h__TransparentIdentifier1, school)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier2()
get_createdBy()
.ctor(<>h__TransparentIdentifier2, createdBy)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier3()
get_numberOfMatchingLists()
.ctor(<>h__TransparentIdentifier3, numberOfMatchingLists)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier4()
get_publisher()
.ctor(<>h__TransparentIdentifier4, publisher)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier3()
get_publisher()
.ctor(<>h__TransparentIdentifier3, publisher)
Equals(value)
GetHashCode()
ToString()
get_sentence()
get_contents()
.ctor(sentence, contents)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_TranslationID()
.ctor(ListID, TranslationID)
Equals(value)
GetHashCode()
ToString()
get_sentence()
get_structure()
.ctor(sentence, structure)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_content()
.ctor(<>h__TransparentIdentifier0, content)
Equals(value)
GetHashCode()
ToString()
get_SentenceID()
get_BaseLanguage()
get_TargetLanguage()
get_BaseDescription()
get_TargetDescription()
get_StructureID()
get_StructureLanguage()
get_StructureTemplateString()
get_StructureDisplayIndex()
get_ContentPosition()
get_CompositeListID()
.ctor(SentenceID, BaseLanguage, TargetLanguage, BaseDescription, TargetDescription, StructureID, StructureLanguage, StructureTemplateString, StructureDisplayIndex, ContentPosition, CompositeListID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_UserID()
get_baseLanguageID()
get_targetSubjectIDs()
.ctor(schoolID, UserID, baseLanguageID, targetSubjectIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_schoolID()
get_moduleID()
.ctor(UserID, schoolID, moduleID)
Equals(value)
GetHashCode()
ToString()
get_trans()
get_lookup()
.ctor(trans, lookup)
Equals(value)
GetHashCode()
ToString()
get_lookup()
get_def()
.ctor(lookup, def)
Equals(value)
GetHashCode()
ToString()
get_sound_file()
get_sound_file_lookup()
.ctor(sound_file, sound_file_lookup)
Equals(value)
GetHashCode()
ToString()
get_t()
get_matched_rpts()
.ctor(t, matched_rpts)
Equals(value)
GetHashCode()
ToString()
get_TranslationID()
get_ReporterUserID()
get_Resolved()
.ctor(TranslationID, ReporterUserID, Resolved)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_not_null_matched_reports()
.ctor(<>h__TransparentIdentifier0, not_null_matched_reports)
Equals(value)
GetHashCode()
ToString()
get_Translation()
get_HasContentReport()
.ctor(Translation, HasContentReport)
Equals(value)
GetHashCode()
ToString()
get_tlc()
get_matched_rpts()
.ctor(tlc, matched_rpts)
Equals(value)
GetHashCode()
ToString()
get_TranslationListContents()
get_HasContentReport()
.ctor(TranslationListContents, HasContentReport)
Equals(value)
GetHashCode()
ToString()
get_cachedResultID()
.ctor(cachedResultID)
Equals(value)
GetHashCode()
ToString()
get_contentListID()
.ctor(contentListID)
Equals(value)
GetHashCode()
ToString()
get_contentListID()
get_Bidirectional()
get_TargetColumnLabel()
get_TargetDirectionLabel()
get_TargetPrompt()
get_targetInputLanguage()
get_BaseColumnLabel()
get_BaseDirectionLabel()
get_BasePrompt()
get_baseInputLanguage()
.ctor(contentListID, Bidirectional, TargetColumnLabel, TargetDirectionLabel, TargetPrompt, targetInputLanguage, BaseColumnLabel, BaseDirectionLabel, BasePrompt, baseInputLanguage)
Equals(value)
GetHashCode()
ToString()
get_subject()
get_searchUserType()
get_aboveUserType()
.ctor(subject, searchUserType, aboveUserType)
Equals(value)
GetHashCode()
ToString()
get_contentID()
get_milestoneRuleID()
.ctor(contentID, milestoneRuleID)
Equals(value)
GetHashCode()
ToString()
get_baseLanguage()
get_targetSubject()
.ctor(baseLanguage, targetSubject)
Equals(value)
GetHashCode()
ToString()
get_environmentIDs()
get_enabled()
.ctor(environmentIDs, enabled)
Equals(value)
GetHashCode()
ToString()
get_environmentIDs()
.ctor(environmentIDs)
Equals(value)
GetHashCode()
ToString()
get_count()
get_includeArchived()
get_schoolID()
.ctor(count, includeArchived, schoolID)
Equals(value)
GetHashCode()
ToString()
get_numberOfItems()
get_schoolID()
get_userID()
get_singleDepartmentOnly()
.ctor(numberOfItems, schoolID, userID, singleDepartmentOnly)
Equals(value)
GetHashCode()
ToString()
get_cacheFilterID()
get_userID()
get_SubjectIDs()
get_startDate()
get_endDate()
.ctor(cacheFilterID, userID, SubjectIDs, startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_feedbackID()
get_archived()
get_rating()
get_suggestion()
.ctor(feedbackID, archived, rating, suggestion)
Equals(value)
GetHashCode()
ToString()
get_studentID()
get_selectedSubjects()
get_message()
.ctor(studentID, selectedSubjects, message)
Equals(value)
GetHashCode()
ToString()
get_context()
.ctor(context)
Equals(value)
GetHashCode()
ToString()
get_searchTerm()
get_subjectID()
.ctor(searchTerm, subjectID)
Equals(value)
GetHashCode()
ToString()
get_numberOfResults()
.ctor(numberOfResults)
Equals(value)
GetHashCode()
ToString()
get_schoolName()
.ctor(schoolName)
Equals(value)
GetHashCode()
ToString()
get_code()
.ctor(code)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_MinimumPrivileges()
.ctor(userID, MinimumPrivileges)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
.ctor(SchoolID)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_TeacherID()
get_MinimumPrivileges()
.ctor(SchoolID, TeacherID, MinimumPrivileges)
Equals(value)
GetHashCode()
ToString()
get_Name()
get_Code()
get_Country()
get_StateID()
get_DataSetGroupID()
.ctor(Name, Code, Country, StateID, DataSetGroupID)
Equals(value)
GetHashCode()
ToString()
get_school()
get_classes()
.ctor(school, classes)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_lookups()
.ctor(<>h__TransparentIdentifier0, lookups)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier1()
get_user()
.ctor(<>h__TransparentIdentifier1, user)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
get_classIDs()
.ctor(userID, schoolID, classIDs)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
get_classIDs()
get_activityTypes()
.ctor(userID, schoolID, classIDs, activityTypes)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_schoolID()
.ctor(moduleID, schoolID)
Equals(value)
GetHashCode()
ToString()
get_appID()
get_schoolID()
get_title()
get_description()
get_baseLanguage()
get_targetLanguage()
get_creator()
get_parentModule()
get_subscribeToUpdatesFromParentModule()
get_highlighted()
get_visibleToStudents()
get_ModuleType()
.ctor(appID, schoolID, title, description, baseLanguage, targetLanguage, creator, parentModule, subscribeToUpdatesFromParentModule, highlighted, visibleToStudents, ModuleType)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_moduleID()
.ctor(schoolID, moduleID)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_AncestorID()
get_deletedBy()
.ctor(moduleID, AncestorID, deletedBy)
Equals(value)
GetHashCode()
ToString()
get_DataSet()
.ctor(DataSet)
Equals(value)
GetHashCode()
ToString()
get_OldModuleID()
get_newModuleID()
get_schoolID()
.ctor(OldModuleID, newModuleID, schoolID)
Equals(value)
GetHashCode()
ToString()
get_OldModuleID()
get_newModuleID()
get_userID()
.ctor(OldModuleID, newModuleID, userID)
Equals(value)
GetHashCode()
ToString()
get_OldModuleID()
get_newModuleID()
.ctor(OldModuleID, newModuleID)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_newTitle()
get_newDescription()
.ctor(moduleID, newTitle, newDescription)
Equals(value)
GetHashCode()
ToString()
get_targetSubjectID()
get_schoolID()
.ctor(targetSubjectID, schoolID)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_schoolID()
get_highlighted()
.ctor(moduleID, schoolID, highlighted)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_schoolID()
get_visibleToStudents()
.ctor(moduleID, schoolID, visibleToStudents)
Equals(value)
GetHashCode()
ToString()
get_newsItemIDs()
.ctor(newsItemIDs)
Equals(value)
GetHashCode()
ToString()
get_itemsToPrefetch()
get_channelID()
.ctor(itemsToPrefetch, channelID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_applicationID()
get_flashVersion()
get_PRIVILEGES_ADMIN()
get_PRIVILEGES_TEACHER()
get_impersonatorID()
get_deviceSessionID()
.ctor(userID, applicationID, flashVersion, PRIVILEGES_ADMIN, PRIVILEGES_TEACHER, impersonatorID, deviceSessionID)
Equals(value)
GetHashCode()
ToString()
get_username()
.ctor(username)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_LPAppID()
get_FlashVersion()
get_ImpersonatorID()
get_DeviceSessionID()
get_SupportEP()
.ctor(UserID, LPAppID, FlashVersion, ImpersonatorID, DeviceSessionID, SupportEP)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_baseLanguage()
.ctor(userID, baseLanguage)
Equals(value)
GetHashCode()
ToString()
get_u()
get_l()
.ctor(u, l)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_c()
.ctor(<>h__TransparentIdentifier0, c)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier1()
get_s()
.ctor(<>h__TransparentIdentifier1, s)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_UserID()
get_ApplicationID()
get_UserType()
get_Privileges()
get_SchoolID()
get_ClassID()
get_ModuleID()
get_BaseLanguage()
get_TargetSubject()
get_DateLoggedIn()
get_ImpersonatorID()
get_FlashVersion()
get_AuthenticationProvider()
get_Reason()
.ctor(ID, UserID, ApplicationID, UserType, Privileges, SchoolID, ClassID, ModuleID, BaseLanguage, TargetSubject, DateLoggedIn, ImpersonatorID, FlashVersion, AuthenticationProvider, Reason)
Equals(value)
GetHashCode()
ToString()
get_SessionID()
.ctor(SessionID)
Equals(value)
GetHashCode()
ToString()
get_folderPath()
get_file()
.ctor(folderPath, file)
Equals(value)
GetHashCode()
ToString()
get_newSound()
get_definitionID()
.ctor(newSound, definitionID)
Equals(value)
GetHashCode()
ToString()
get_soundID()
get_definitionID()
.ctor(soundID, definitionID)
Equals(value)
GetHashCode()
ToString()
get_RowData()
.ctor(RowData)
Equals(value)
GetHashCode()
ToString()
get_DefinitionID()
.ctor(DefinitionID)
Equals(value)
GetHashCode()
ToString()
get_definitionID()
get_FolderPath()
get_FileName()
get_Extension()
.ctor(definitionID, FolderPath, FileName, Extension)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
.ctor(DataSetID)
Equals(value)
GetHashCode()
ToString()
get_cacheDurationMinutes()
.ctor(cacheDurationMinutes)
Equals(value)
GetHashCode()
ToString()
get_isCurrent()
.ctor(isCurrent)
Equals(value)
GetHashCode()
ToString()
get_datasetID()
get_inUseOnly()
.ctor(datasetID, inUseOnly)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_datasetID()
.ctor(UserID, datasetID)
Equals(value)
GetHashCode()
ToString()
get_KnowledgeSetID()
get_Name()
get_Description()
get_Purpose()
get_StartDate()
get_EndDate()
get_targetUsersType()
get_targetContentType()
get_targetActivitiesType()
get_SCORING_METHOD_SPACEREP()
get_InterStudentScoreboard()
get_InterClassScoreboard()
get_InterSchoolScoreboard()
.ctor(KnowledgeSetID, Name, Description, Purpose, StartDate, EndDate, targetUsersType, targetContentType, targetActivitiesType, SCORING_METHOD_SPACEREP, InterStudentScoreboard, InterClassScoreboard, InterSchoolScoreboard)
Equals(value)
GetHashCode()
ToString()
get_KnowledgeSetName()
get_KnowledgeSetDescription()
get_ScoreDatasetName()
get_ScoreDatasetDescription()
get_Purpose()
get_StartDate()
get_EndDate()
get_targetUsersType()
get_targetContentType()
get_targetActivitiesType()
get_SCORING_METHOD_SPACEREP()
get_InterStudentScoreboard()
get_InterClassScoreboard()
get_InterSchoolScoreboard()
.ctor(KnowledgeSetName, KnowledgeSetDescription, ScoreDatasetName, ScoreDatasetDescription, Purpose, StartDate, EndDate, targetUsersType, targetContentType, targetActivitiesType, SCORING_METHOD_SPACEREP, InterStudentScoreboard, InterClassScoreboard, InterSchoolScoreboard)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_StartDate()
get_EndDate()
.ctor(DataSetID, StartDate, EndDate)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ContentType()
.ctor(DataSetID, ContentType)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_UserType()
.ctor(DataSetID, UserType)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ActivityType()
.ctor(DataSetID, ActivityType)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ClassesToRemove()
.ctor(DataSetID, ClassesToRemove)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_UsersToRemove()
.ctor(DataSetID, UsersToRemove)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ModulesToAdd()
.ctor(DataSetID, ModulesToAdd)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ModuleIDs()
.ctor(DataSetID, ModuleIDs)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ModulesToRemove()
.ctor(DataSetID, ModulesToRemove)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ListsToAdd()
.ctor(DataSetID, ListsToAdd)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ListIDs()
.ctor(DataSetID, ListIDs)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ListsToRemove()
.ctor(DataSetID, ListsToRemove)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_TestsToAdd()
.ctor(DataSetID, TestsToAdd)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_TestIDs()
.ctor(DataSetID, TestIDs)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ActivityTypesToAdd()
.ctor(DataSetID, ActivityTypesToAdd)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ActivityTypeIDs()
.ctor(DataSetID, ActivityTypeIDs)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ActivityTypesToRemove()
.ctor(DataSetID, ActivityTypesToRemove)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ActivitySubtypesToAdd()
.ctor(DataSetID, ActivitySubtypesToAdd)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ActivitySubtypeIDs()
.ctor(DataSetID, ActivitySubtypeIDs)
Equals(value)
GetHashCode()
ToString()
get_DataSetID()
get_ActivitySubtypesToRemove()
.ctor(DataSetID, ActivitySubtypesToRemove)
Equals(value)
GetHashCode()
ToString()
get_moduleIDs()
.ctor(moduleIDs)
Equals(value)
GetHashCode()
ToString()
get_datasetID()
get_hostSchoolID()
.ctor(datasetID, hostSchoolID)
Equals(value)
GetHashCode()
ToString()
get_startDate()
get_endDate()
.ctor(startDate, endDate)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_comparisonDate()
.ctor(schoolID, comparisonDate)
Equals(value)
GetHashCode()
ToString()
get_statsDataSetID()
.ctor(statsDataSetID)
Equals(value)
GetHashCode()
ToString()
get_TARGET_USER_TYPE_ALL()
get_TARGET_CONTENT_TYPE_ALL()
get_DATASET_GROUP_NORTHERN_HEMISPHERE()
get_DATASET_GROUP_SOUTHERN_HEMISPHERE()
.ctor(TARGET_USER_TYPE_ALL, TARGET_CONTENT_TYPE_ALL, DATASET_GROUP_NORTHERN_HEMISPHERE, DATASET_GROUP_SOUTHERN_HEMISPHERE)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_UNLICENCED_USERS_NAME()
get_USER_TYPE_STUDENT()
.ctor(schoolID, UNLICENCED_USERS_NAME, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_StartDate()
get_EndDate()
get_CurrentSchoolID()
get_baseLanguage()
get_targetLanguage()
.ctor(StartDate, EndDate, CurrentSchoolID, baseLanguage, targetLanguage)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_BaseLanguage()
get_TargetSubject()
get_Date()
get_QuestionsAnswered()
.ctor(SchoolID, BaseLanguage, TargetSubject, Date, QuestionsAnswered)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_BaseLanguage()
get_TargetSubject()
get_Date()
.ctor(SchoolID, BaseLanguage, TargetSubject, Date)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_Date()
.ctor(SchoolID, Date)
Equals(value)
GetHashCode()
ToString()
get_NumberOfDays()
.ctor(NumberOfDays)
Equals(value)
GetHashCode()
ToString()
get_dataSet()
get_baseLanguage()
get_targetLanguage()
get_offset()
get_numberOfRows()
.ctor(dataSet, baseLanguage, targetLanguage, offset, numberOfRows)
Equals(value)
GetHashCode()
ToString()
get_dataSet()
get_userID()
get_baseLanguage()
get_targetLanguage()
.ctor(dataSet, userID, baseLanguage, targetLanguage)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_KnowledgeSetID()
.ctor(UserID, KnowledgeSetID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_UnlicencedUserClassName()
get_USER_TYPE_STUDENT()
.ctor(userID, UnlicencedUserClassName, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_StatsReferences()
get_saveDate()
get_DataSetIDs()
.ctor(StatsReferences, saveDate, DataSetIDs)
Equals(value)
GetHashCode()
ToString()
get_saveDate()
get_timezoneAdjustmentMinutes()
get_userID()
get_activityType()
get_BaseLanguageID()
get_TargetLanguageID()
get_DataItems()
get_LearnTaskDataSets()
.ctor(saveDate, timezoneAdjustmentMinutes, userID, activityType, BaseLanguageID, TargetLanguageID, DataItems, LearnTaskDataSets)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_activityType()
get_BaseLanguageID()
get_TargetLanguageID()
get_saveDate()
get_timezoneAdjustmentMinutes()
.ctor(userID, activityType, BaseLanguageID, TargetLanguageID, saveDate, timezoneAdjustmentMinutes)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_baseLanguage()
get_targetSubject()
get_OverallScores()
get_SubjectScores()
.ctor(userID, baseLanguage, targetSubject, OverallScores, SubjectScores)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_NewMilestones()
.ctor(userID, NewMilestones)
Equals(value)
GetHashCode()
ToString()
get_dataset()
.ctor(dataset)
Equals(value)
GetHashCode()
ToString()
get_creator()
get_baseLanguage()
get_targetSubject()
get_schoolID()
get_title()
get_description()
get_purpose()
get_structure()
get_ancestor()
get_activityType()
get_contentType()
.ctor(creator, baseLanguage, targetSubject, schoolID, title, description, purpose, structure, ancestor, activityType, contentType)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_Title()
get_Description()
get_Structure()
.ctor(ListID, Title, Description, Structure)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_contentType()
.ctor(ListID, contentType)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_listID()
get_title()
.ctor(moduleID, listID, title)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_schoolID()
get_listID()
.ctor(UserID, schoolID, listID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_SchoolID()
.ctor(UserID, SchoolID)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_InsertIndex()
get_NumberOfItemsBeingInserted()
.ctor(listID, InsertIndex, NumberOfItemsBeingInserted)
Equals(value)
GetHashCode()
ToString()
get_ListID()
get_OldContentID()
get_NewContentID()
.ctor(ListID, OldContentID, NewContentID)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_userID()
get_folderPath()
.ctor(moduleID, userID, folderPath)
Equals(value)
GetHashCode()
ToString()
get_sourceModuleID()
get_folderPath()
.ctor(sourceModuleID, folderPath)
Equals(value)
GetHashCode()
ToString()
get_deletedBy()
.ctor(deletedBy)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_userID()
.ctor(moduleID, userID)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_oldFolderPath()
get_newFolderPath()
get_oldFolderPathPattern()
.ctor(moduleID, oldFolderPath, newFolderPath, oldFolderPathPattern)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_moduleID()
get_oldFolderPath()
get_newFolderPath()
.ctor(userID, moduleID, oldFolderPath, newFolderPath)
Equals(value)
GetHashCode()
ToString()
get_moduleID()
get_UserID()
.ctor(moduleID, UserID)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_moduleID()
get_OldListID()
.ctor(schoolID, moduleID, OldListID)
Equals(value)
GetHashCode()
ToString()
get_testID()
get_newTestID()
.ctor(testID, newTestID)
Equals(value)
GetHashCode()
ToString()
get_structuredActivityID()
get_newStructuredActivityID()
.ctor(structuredActivityID, newStructuredActivityID)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_newListID()
.ctor(listID, newListID)
Equals(value)
GetHashCode()
ToString()
get_list()
get_lookup()
.ctor(list, lookup)
Equals(value)
GetHashCode()
ToString()
get_contentIDs()
.ctor(contentIDs)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_moduleID()
get_isVisible()
.ctor(listID, moduleID, isVisible)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_isVisible()
.ctor(listID, isVisible)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_activityType()
.ctor(listID, activityType)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_questionID()
.ctor(listID, questionID)
Equals(value)
GetHashCode()
ToString()
get_listID()
get_TypeID()
get_navigateUrl()
get_imageUrl()
get_textbookPublisherID()
get_sharedAsPartOfModule()
.ctor(listID, TypeID, navigateUrl, imageUrl, textbookPublisherID, sharedAsPartOfModule)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_UserID()
.ctor(SchoolID, UserID)
Equals(value)
GetHashCode()
ToString()
get_baseLanguageID()
.ctor(baseLanguageID)
Equals(value)
GetHashCode()
ToString()
get_RomanisationData()
.ctor(RomanisationData)
Equals(value)
GetHashCode()
ToString()
get_minVotes()
.ctor(minVotes)
Equals(value)
GetHashCode()
ToString()
get_xmlData()
get_BaseLanguage()
get_TargetLanguage()
get_hashKey()
get_creatorID()
get_ContentType()
.ctor(xmlData, BaseLanguage, TargetLanguage, hashKey, creatorID, ContentType)
Equals(value)
GetHashCode()
ToString()
get_translationIDs()
.ctor(translationIDs)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_Username()
.ctor(ID, Username)
Equals(value)
GetHashCode()
ToString()
get_ID()
get_Name()
.ctor(ID, Name)
Equals(value)
GetHashCode()
ToString()
get_usernames()
get_schoolID()
.ctor(usernames, schoolID)
Equals(value)
GetHashCode()
ToString()
get_MinLikelihoodToWarn()
.ctor(MinLikelihoodToWarn)
Equals(value)
GetHashCode()
ToString()
get_authenticationProvider()
.ctor(authenticationProvider)
Equals(value)
GetHashCode()
ToString()
get_ltiProvider()
.ctor(ltiProvider)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_UploadedBy()
get_NumberOfRowsPasted()
get_NumberOfClasses()
get_UniqueUsers()
get_TotalNewAccounts()
get_StudentIDsProvided()
get_PasswordsReset()
get_UserTypeUploaded()
get_TargetLicence()
get_EmailTemplateUsed()
get_DifficultyRanking()
.ctor(SchoolID, UploadedBy, NumberOfRowsPasted, NumberOfClasses, UniqueUsers, TotalNewAccounts, StudentIDsProvided, PasswordsReset, UserTypeUploaded, TargetLicence, EmailTemplateUsed, DifficultyRanking)
Equals(value)
GetHashCode()
ToString()
get_SchoolID()
get_userID()
get_TeacherComment()
.ctor(SchoolID, userID, TeacherComment)
Equals(value)
GetHashCode()
ToString()
get_uploadID()
get_UserType()
.ctor(uploadID, UserType)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_userType()
get_providerID()
.ctor(schoolID, userType, providerID)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_schoolID()
get_STUDENT()
.ctor(userID, schoolID, STUDENT)
Equals(value)
GetHashCode()
ToString()
get_teacherID()
get_studentID()
get_USER_TYPE_STUDENT()
get_USER_TYPE_TEACHER()
.ctor(teacherID, studentID, USER_TYPE_STUDENT, USER_TYPE_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_teacherID()
get_studentID()
get_USER_TYPE_TEACHER()
.ctor(teacherID, studentID, USER_TYPE_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_MyID()
get_StudentID()
get_MinPrivileges()
.ctor(MyID, StudentID, MinPrivileges)
Equals(value)
GetHashCode()
ToString()
get_teacherID()
get_schoolID()
get_MinPrivileges()
.ctor(teacherID, schoolID, MinPrivileges)
Equals(value)
GetHashCode()
ToString()
get_teacherID()
get_MinPrivileges()
.ctor(teacherID, MinPrivileges)
Equals(value)
GetHashCode()
ToString()
get_class1()
get_lookup()
.ctor(class1, lookup)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_class2()
.ctor(<>h__TransparentIdentifier0, class2)
Equals(value)
GetHashCode()
ToString()
get_lookup()
get_class1()
.ctor(lookup, class1)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_TeacherIDs()
.ctor(UserID, TeacherIDs)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_ClassIDs()
.ctor(UserID, ClassIDs)
Equals(value)
GetHashCode()
ToString()
get_MyID()
get_MyMinPrivileges()
get_TargetUserID()
get_TargetUserPrivileges()
.ctor(MyID, MyMinPrivileges, TargetUserID, TargetUserPrivileges)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_MinimumPrivileges()
.ctor(UserID, MinimumPrivileges)
Equals(value)
GetHashCode()
ToString()
get_targetClass()
get_otherClass()
.ctor(targetClass, otherClass)
Equals(value)
GetHashCode()
ToString()
get_<>h__TransparentIdentifier0()
get_classUsers()
.ctor(<>h__TransparentIdentifier0, classUsers)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_classID()
get_PRIVILEGES_TEACHER()
.ctor(UserID, classID, PRIVILEGES_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_NumberOfClasses()
get_MinimumPrivileges()
.ctor(UserID, NumberOfClasses, MinimumPrivileges)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_MinPrivilegesLevel()
.ctor(UserID, MinPrivilegesLevel)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_MinPrivilegesLevel()
.ctor(userID, MinPrivilegesLevel)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_KEY_CONTACT_ROLE()
get_Teacher()
.ctor(UserID, KEY_CONTACT_ROLE, Teacher)
Equals(value)
GetHashCode()
ToString()
get_userID()
get_baseLanguageID()
get_targetLanguageID()
.ctor(userID, baseLanguageID, targetLanguageID)
Equals(value)
GetHashCode()
ToString()
get_classIDs()
get_UNLICENCED_USERS_NAME()
.ctor(classIDs, UNLICENCED_USERS_NAME)
Equals(value)
GetHashCode()
ToString()
get_campaignEmailID()
.ctor(campaignEmailID)
Equals(value)
GetHashCode()
ToString()
get_campaignEmailID()
get_daysAgo()
.ctor(campaignEmailID, daysAgo)
Equals(value)
GetHashCode()
ToString()
get_campaignCode()
get_daysAgo()
.ctor(campaignCode, daysAgo)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_licenceIDs()
get_classIDs()
get_USER_TYPE_STUDENT()
.ctor(schoolID, licenceIDs, classIDs, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_productID()
.ctor(productID)
Equals(value)
GetHashCode()
ToString()
get_Title()
get_Type()
get_Status()
get_startDate()
get_endDate()
get_Notes()
get_numberOfUsers()
get_products()
get_PreventExpiry()
.ctor(Title, Type, Status, startDate, endDate, Notes, numberOfUsers, products, PreventExpiry)
Equals(value)
GetHashCode()
ToString()
get_licenceID()
get_licenceTitle()
.ctor(licenceID, licenceTitle)
Equals(value)
GetHashCode()
ToString()
get_licenceID()
get_licenceTitle()
get_licenceType()
get_licenceStatus()
get_startDate()
get_endDate()
get_notes()
get_numberOfUsers()
get_PreventExpiry()
get_products()
.ctor(licenceID, licenceTitle, licenceType, licenceStatus, startDate, endDate, notes, numberOfUsers, PreventExpiry, products)
Equals(value)
GetHashCode()
ToString()
get_LicenceID()
get_NumberOfDaysToExtend()
.ctor(LicenceID, NumberOfDaysToExtend)
Equals(value)
GetHashCode()
ToString()
get_enabled()
get_LicenceID()
.ctor(enabled, LicenceID)
Equals(value)
GetHashCode()
ToString()
get_LicenceID()
get_UserID()
get_SuppressUntilDate()
.ctor(LicenceID, UserID, SuppressUntilDate)
Equals(value)
GetHashCode()
ToString()
get_LicenceID()
.ctor(LicenceID)
Equals(value)
GetHashCode()
ToString()
get_licenceID()
get_classID()
.ctor(licenceID, classID)
Equals(value)
GetHashCode()
ToString()
get_OriginalLicence()
get_NewLicence()
get_Classes()
.ctor(OriginalLicence, NewLicence, Classes)
Equals(value)
GetHashCode()
ToString()
get_TYPE_BULK_LICENCE()
.ctor(TYPE_BULK_LICENCE)
Equals(value)
GetHashCode()
ToString()
get_Name()
get_Abbreviation()
get_DefaultDatasetGroupID()
get_PhonePrefix()
get_CurrencyID()
get_SmallFlagURL()
.ctor(Name, Abbreviation, DefaultDatasetGroupID, PhonePrefix, CurrencyID, SmallFlagURL)
Equals(value)
GetHashCode()
ToString()
get_countryID()
.ctor(countryID)
Equals(value)
GetHashCode()
ToString()
get_UserPrivileges()
get_ClassID()
.ctor(UserPrivileges, ClassID)
Equals(value)
GetHashCode()
ToString()
get_StudentType()
.ctor(StudentType)
Equals(value)
GetHashCode()
ToString()
get_taskId()
get_STAFF_CLASS_NAME()
.ctor(taskId, STAFF_CLASS_NAME)
Equals(value)
GetHashCode()
ToString()
get_UserIDs()
get_ClassID()
get_USER_TYPE_STUDENT()
.ctor(UserIDs, ClassID, USER_TYPE_STUDENT)
Equals(value)
GetHashCode()
ToString()
get_classID()
get_userID()
get_unlicencedUsersClassID()
get_USER_TYPE_STUDENT()
get_PRIVILEGES_TEACHER()
get_MOVED()
get_DELETED()
.ctor(classID, userID, unlicencedUsersClassID, USER_TYPE_STUDENT, PRIVILEGES_TEACHER, MOVED, DELETED)
Equals(value)
GetHashCode()
ToString()
get_option()
get_schoolID()
.ctor(option, schoolID)
Equals(value)
GetHashCode()
ToString()
get_UserID()
get_FirstName()
get_Surname()
get_Title()
get_StudentID()
get_ParentEmail()
.ctor(UserID, FirstName, Surname, Title, StudentID, ParentEmail)
Equals(value)
GetHashCode()
ToString()
get_Username()
.ctor(Username)
Equals(value)
GetHashCode()
ToString()
get_firstName()
get_surname()
get_username()
get_emailAddress()
get_school()
get_ResetAutomatically()
.ctor(firstName, surname, username, emailAddress, school, ResetAutomatically)
Equals(value)
GetHashCode()
ToString()
get_schoolIDs()
get_includeAdmin()
get_USER_TYPE_TEACHER()
get_USER_TYPE_ADMINISTRATOR()
.ctor(schoolIDs, includeAdmin, USER_TYPE_TEACHER, USER_TYPE_ADMINISTRATOR)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_hasValidEmailAddress()
.ctor(schoolID, hasValidEmailAddress)
Equals(value)
GetHashCode()
ToString()
get_SearchTerm()
get_UserID()
get_SchoolID()
get_USER_TYPE_STUDENT()
get_USER_TYPE_TEACHER()
.ctor(SearchTerm, UserID, SchoolID, USER_TYPE_STUDENT, USER_TYPE_TEACHER)
Equals(value)
GetHashCode()
ToString()
get_numberOfResults()
get_USER_TYPE_ADMINISTRATOR()
.ctor(numberOfResults, USER_TYPE_ADMINISTRATOR)
Equals(value)
GetHashCode()
ToString()
get_USER_TYPE_ADMINISTRATOR()
.ctor(USER_TYPE_ADMINISTRATOR)
Equals(value)
GetHashCode()
ToString()
get_ClassID()
get_userID()
.ctor(ClassID, userID)
Equals(value)
GetHashCode()
ToString()
get_listCode()
.ctor(listCode)
Equals(value)
GetHashCode()
ToString()
get_listCode()
get_languages()
get_maths()
get_science()
get_english()
get_socialSciences()
.ctor(listCode, languages, maths, science, english, socialSciences)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_datasetID()
get_Student()
get_Teacher()
.ctor(schoolID, datasetID, Student, Teacher)
Equals(value)
GetHashCode()
ToString()
get_schoolID()
get_datasetID()
get_ROLE_STUDENT()
.ctor(schoolID, datasetID, ROLE_STUDENT)
Equals(value)
GetHashCode()
ToString()
.cctor()
Convert(html)
ParseTag(selfClosing)
EatInnerContent(tag)
get_EndOfText()
Peek()
MoveAhead()
EatWhitespace()
EatWhitespaceToNextLine()
EatQuotedValue()
.ctor()
parseWords(text)
CreateDictionaryEntry(key, language)
CreateDictionary(corpus, language)
AddLowestDistance(item, suggestion, suggestionint, delete)
Edits(word, editDistance, deletes)
Lookup(input, language, editDistanceMax)
Correct(input, language)
ReadFromStdIn()
Main(args)
DamerauLevenshteinDistance(source, target)
.cctor()
get_Default()
get_DebugUserName()
get_DebugPassword()
get_DebugEmailRecipient()
get_DataWarehouseDatabaseName()
get_StaffMembersClassID()
get_LiveRankingStatsEnabled()
get_LiveRankingDataSets()
get_EmailDelivery_NumberOfClients()
get_EmailDelivery_DBRequestBatchSize()
get_ElasticacheEndpoint()
get_AWSAccessKey()
get_AWSSecretKey()
get_UseQueueForStats()
get_StatsQueueEndpoint()
get_ScoresQueueEndpoint()
get_EmailDelivery_SES_Max_NumberOfClients()
get_EmailDelivery_SES_DBRequestBatchSize()
get_EmailDelivery_SES_MaxThrottledEmailsPerSecond()
get_CompetitionPathTemplate()
get_EmailDelivery_SES_ThrottledEmailPoolUpdateMS()
get_ConnectionString()
get_DataWarehouseConnectionString()
get_CompetitionRegistrationPathTemplate()
get_DefaultContentLeadOwnerUserID()
get_SearchServerSystem()
get_SharedContentSearchServerEndpoint()
get_SearchServerAPIVersion()
get_SubscribedContentSearchServerEndpoint()
get_SQSEmailQueuePriorityLow()
get_SQSEmailQueuePriorityMedium()
get_SQSEmailQueuePriorityHigh()
get_SchoolScoreboardUpdateFrequencySeconds()
get_RedisScoreboardEndpoint()
get_DynamoTablesPrefix()
get_ArchivedStatsConnectionString()
get_SmartLessonSectionCompletionQueueEndpoint()
get_StatsDBConnectionString()
get_DownForMaintenance()
get_MaintenanceMessage()
get_JSServicesEndpoint()
get_AssessmentStartQueueEndpoint()
get_AssessmentFinalisationQueueEndpoint()
get_AutomatedEmailsUserDatabaseConnectionString()
get_MainDBStatsTransferQueueEndpoint()
get_SoundFileGenerationQueueEndpoint()
get_EmailQueueType()
get_QueueWorkerServiceURL()
get_SQSEmailProcessingFailedQueueUrl()
get_UserTaskMonitoringEventCleanupRequestsQueueEndpoint()
get_AWSCloudfrontKeyPairID()
get_MSDBDatabaseConnectionString()
get_SQSUserUpdateEmailGenerationQueueEndpoint()
get_RedisNotificationsEndpoint()
get_SendAdminSlackNotifications()
get_DownForMaintenance1()
get_SQSUserTaskMonitoringUnarchiveEventsQueueUrl()
.ctor()
.cctor()
CompareStrings(s1, s2)
CompareStrings2(s1, s2)
CompareSequences(s1, s2, compareFunction, defaultValue)
.ctor()
GetNewDefaultConnection()
Test()
BlockSync()
BlockAsync()
.ctor()
.ctor(config)
.ctor(tokenService)
Translate(options, cancellationToken)
DetermineLanguage(text, cancellationToken)
ExecuteWebRequest(uri, cancellationToken)
Dispose()
.ctor(config)
get_access_token()
set_access_token(value)
get_token_type()
set_token_type(value)
get_expires_in()
set_expires_in(value)
get_scope()
set_scope(value)
.ctor()
.ctor(config, serviceScope)
GetAccessToken()
RenewAccessToken()
GenerateUrlEncodedCredentials()
OnTokenExpiredCallback(stateInfo)
ExecuteTokenRenewalHttpRequest()
GetAccessToken()
Translate(options, cancellationToken)
.ctor()
.ctor(config)
Translate(options, cancellationToken)
Load()
.ctor()
.ctor()
AddDataToStartOfBitMask(existingData, newData, numberOfBitsToAdd)
GetNumberOfPositiveBits(Data, numberOfPositionsToCheck)
GetNumberOfConsecutivePositiveBits(Data, numberOfPositionsToCheck)
.ctor()
CompressToGZippedBase64String(input)
DecompressFromGZippedBase64String(base64)
CompressGZip(rawBytes)
DecompressGZip(gZippedBytes)
.ctor()
AddCookie(response, domain, name, value, secondsToPersist)
AddCookie(request, response, name, value, secondsToPersist)
.ctor()
Shuffle(source)
Shuffle(source, rng)
ShuffleIterator(source, rng)
CreateZipFromFolder(folderPath, targetFolderPath, targetFileName)
.ctor()
Start()
Stop()
Median(source, selector)
Median(source)
StandardDeviation(values)
.ctor()
ConsumeNonce(domain, nonce, storageDuration)
GenerateNonceKey(domain, nonce)
ValidateNonce(domain, nonce)
MarkNonceAsConsumed(domain, nonce, storageDuration)
MarkMultipleNoncesAsConsumed(domain, nonces, storageDuration)
RemoveNonceRecord(domain, nonce)
RemoveMultipleNonceRecords(domain, nonces)
.ctor()
.ctor(domain, storageDuration)
ConsumeNonce(nonce)
ValidateNonce(nonce)
MarkNonceAsConsumed(nonce)
MarkMultipleNoncesAsConsumed(nonces)
RemoveNonceRecord(nonce)
RemoveMultipleNonceRecords(nonces)
InChunk(ch, otherCh)
Compare(s1, s2)
.ctor()
.ctor()
Encode(bytes)
Decode(encoded)
EncodeValue(sb, value, paddingBytes)
DecodeValue(stream, value, paddingChars)
.cctor()
EncodeBase64(d, length)
Char64(c)
DecodeBase64(s, maximumLength)
Encipher(block, offset)
StreamToWord(data, offset)
InitKey()
Key(key)
EksKey(data, key)
CryptRaw(password, salt, logRounds)
HashPassword(password, salt)
GenerateSalt(logRounds)
GenerateSalt()
CheckPassword(plaintext, hashed)
.ctor()
.cctor()
ArraysAreEqual(a1, a2)
.ctor()
IsSimpleType(type)
ToXml(input, shallow)
ToXml(input, element, shallow)
AppendMember(target, memberType, name, value, shallow)
GetEnumerableElement(name, collection)
.cctor()
HasIntersect(first, second)
GetIntersect(first, second)
HashSetIntersect(first, second)
Intersect(firstHashset, second)
ShallowCompareUnorderedLists(item1, item2)
ShallowCompareOrderedLists(item1, item2)
ShuffleList(list)
Chunk(source, chunksize)
GetNRandomItems(source)
GetRandomIterator(source, rng)
TakeNRandomElementsFromList(list, numberToTake)
RemoveAndReturnRandomItemFromList(list)
GetMedian(source)
GetPercentile(source, percentile)
GetPercentile(source, percentile)
GetPercentileInternal(values, percentile)
RemoveDuplicates(items, keyFunction)
RemoveDuplicates(items)
Batch(source, size)
DetermineNumberOfBatches(source, size)
Batch(source, size, resultSelector)
BatchImpl(source, size, resultSelector)
.ctor()
.cctor()
ExecuteMethodSafely(sessionID, privilegesLevel, action, failureMessage, checkMaxPrivilege)
ExecuteMethodSafely(sessionID, privilegesLevel, action, failureMessage, checkMaxPrivilege)
ExecuteMethodSafelyAsync(sessionID, privilegesLevel, action, failureMessage, checkMaxPrivilege, maintainContext)
ExecuteMethodSafely(action, failureMessage)
ExecuteMethodSafely(action, failureMessage)
ExecuteMethodSafelyAsync(action, failureMessage)
ExecuteInTryCatch(action)
ExecuteInTryCatch(action)
ExecuteAsyncMethod(method, token)
ExecuteAsyncMethod(method)
ExecuteAsyncMethod(method, token)
ExecuteAsyncMethod(method)
.ctor()
Encode(integer)
Decode(encodedInteger)
.ctor()
ToHtml(s)
ToHtml(s, nofollow)
EncodeParagraph(s, sb, nofollow)
EncodeLinks(s, sb, nofollow)
.ctor()
.cctor()
CreateDateWithTimeSetToMidnight(d)
CompareJSONifiedDates(date1, date2)
get_HasItem()
.ctor()
Reset()
QueryPerformanceCounter(lpPerformanceCount)
.cctor()
GetStartTicks()
GetDuration(startTicks)
ProfileStatsSaved(duration, successful)
.ctor()
CreateSentenceStructureKey(languageID, displayIndex)
CreateSentenceStructureContentsKey(position)
.ctor()
Serialize(value)
Deserialize(buffer)
.ctor()
ConvertToDelimitedList(Items)
ConvertToDelimitedList(Items, Delimiter)
CountOccurrencesOf(pattern, withinText)
CountOccurrencesOf(pattern, withinText)
CleanXmlAttributeStringValue(value)
Distance(s, t)
IsBlank(s)
HasContent(s)
LimitTo(target, length)
.ctor()
.ctor(initialDelayPeriod, repeatPeriod, action)
Start()
Stop()
TimerUpdated(state)
Dispose()
.ctor(initialDelayPeriod, repeatPeriod, action)
Start()
Stop()
TimerUpdated(state)
Dispose()
PerformRateLimitedIteration(items, action, maxItemsPerSecond)
PerformRateLimitedIteration(items, action, maxItemsPerPeriod, periodLength)
PerformRateLimitedIteration(items, action, maxItemsPerSecond)
PerformRateLimitedIteration(items, action, maxItemsPerPeriod, periodLength)
PerformParallelRateLimitedAction(items, action, maxItemsPerPeriod)
PerformParallelRateLimitedAction(items, action, maxItemsPerPeriod, periodLength)
PerformParallelRateLimitedActionWithResult(items, action, maxItemsPerPeriod)
PerformParallelRateLimitedActionWithResult(items, action, maxItemsPerPeriod, periodLength)
.ctor()
StartSTATask(func)
.ctor()
GetQueryPortionOfURL(url)
GetHashPortionOfURL(url)
GetQueryPortionOfHashFromURL(url)
DoesURLHaveHashPortion(url)
DoesURLHaveHashQueryParameters(url)
AddParameterToHashQuery(url, key, value)
.ctor()
.ctor(serviceType)
HandlePostInvoke(method, obj, arguments, returnValue, isException)
HandlePreInvoke(method, obj, arguments)
ReadXml(reader, elementName)
QueryXml(conn, elementName, query, param)
ReadRowsXml(elementName, rows)
ToXml(source, name)
Encode(s)
.ctor(source, filterIllegalChars)
Peek()
Read()
PopulateBuffer()
.cctor()
ToXmlDocument(document)
StripNonValidXMLCharacters(textIn)
CheckWebORBHealth(commitSuicideIfUnlicenced)
CommitAppSuicide()
.ctor()
.cctor()
CreateHash(input)
.ctor()
.cctor()
CopyBytes(sourceBytes)
GetPublicKey()
GetPrivateKey()
CreateProvider(purpose)
.ctor(purpose)
Dispose()
EncryptString(text)
DecryptString(encryptedStringBase64)
EncryptBytes(data)
DecryptBytes(encryptedBytes)
SerializeToString(item)
DeserializeFromString(base64SerializedString)
.ctor()
MergeFacetResults(resultSets)
.ctor()
DamLev(s, t)
DamLev(s, t, maxDistance)
.ctor(indexLookaheads)
PrimeDictionary(words)
PrimeDictionary(wordFrequencies)
PrimeWordAssociations(wordAffinities)
CreateAffinityKey(word1, word2)
PrimeLookaheads()
SuggestCorrection(word, lookAhead, otherSearchTerms)
DetermineWordMatchValue(word, wordFrequency, otherWords)
Edits(word)
.cctor()
Process(templateModel)
.ctor()
PopulateBrandingFromBrandManager(brandable, brandId)
GenerateTemplateBrand(brandId)
.ctor()
get_CanRead()
get_CanWrite()
CanConvert(objectType)
WriteJson(writer, value, serializer)
ReadJson(reader, objectType, existingValue, serializer)
CreateItem(objectType, jObject)
.ctor()
NormaliseJsonString(jsonString)
SortPropertiesAlphabetically(original)
CreateDefaultDatabaseJSONSerializationSettings()
.ctor()
.ctor(queueURL)
CreateSerializationSettings()
SendMessageAsync(message)
SendMessageAsync(queueURL, message)
.ctor(QueueURL, Client, MaxItemsPerBatch)
AddMessage(item)
AddMessages(items)
ConvertToBatchItem(item)
TransferAllMessages(donorQueueEndpoint, targetQueueEndpoint, messagesPerRequest)
FetchMessagesAsync(queueEndpoint, numberOfMessages)
AddMessagesToQueueAsync(queueEndpoint, messages)
DeleteMessagesAsync(queueEndpoint, receiptHandles)
.ctor()
FormatDateForDynamo(date)
ParseDynamoDateString(dateString)
FormatPreciseDateForDynamo(date)
ParsePreciseDynamoDateString(dateString)
.ctor()
.ctor(QueueURL, Client, MaxItemsPerBatch, MaxWaitPeriod)
TimerTick()
Dispose()
.ctor(QueueURL, Client, MaxItemsPerBatch)
AddMessage(message)
ExecuteQueuedRequests(continueAfterError, throwErrors)
ExecuteQueuedRequestsAsync(continueAfterError, throwErrors)
Dispose()
.ctor(QueueURL, Client, MaxItemsPerBatch, MaxWaitPeriod)
TimerTick()
Dispose()
.ctor(QueueURL, Client, MaxItemsPerBatch)
AddMessage(message)
AddMessages(messages)
ExecuteQueuedRequests(continueAfterError, throwErrors)
ExecuteQueuedRequestsAsync(continueAfterError, throwErrors)
Dispose()
<Dispose>b__13_0()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetCurrentNews(channelID)
GenerateCacheKey(channelID)
GetNewsItems(newsItemIDs)
GetCurrentNewsFromDatabase(channelID)
GetNewsChannels(SessionID)
AddNewsChannel(SessionID, ChannelName)
GetNewsItems(SessionID, ChannelID)
GetNewsItems(SessionID, ChannelID, RestrictToCurrentItems)
InvalidateCachedNewsChannel(channelID)
AddNewsItem(SessionID, ChannelID, StartDate, EndDate, Title, ArticleText)
EditNewsItem(SessionID, ID, ChannelID, StartDate, EndDate, Title, ArticleText)
DeleteNewsItem(SessionID, NewsItemID)
.ctor()
.cctor()
.ctor()
.ctor(_Date, _Title, _Content)
.ctor()
.ctor()
GetHistory(conx, sessionID, appID, roleID, startDate, endDate, countryID)
GetHistoryByDays(conx, sessionID, appID, roleID, startDate, endDate, countryID)
GetHistoryByHours(conx, sessionID, appID, roleID, startDate, endDate, countryID)
get_Success()
set_Success(value)
get_Results()
set_Results(value)
.ctor()
get_SessionID()
set_SessionID(value)
get_UserID()
set_UserID(value)
get_DateLoggedIn()
set_DateLoggedIn(value)
get_DateLastUsed()
set_DateLastUsed(value)
.ctor()
get_Success()
set_Success(value)
get_Results()
set_Results(value)
.ctor()
get_DateOfLogin()
set_DateOfLogin(value)
get_Count()
set_Count(value)
get_Minutes()
set_Minutes(value)
.ctor()
get_Success()
set_Success(value)
get_Results()
set_Results(value)
.ctor()
get_HourOfLogin()
set_HourOfLogin(value)
get_Count()
set_Count(value)
get_Minutes()
set_Minutes(value)
.ctor()
.ctor()
.ctor(taskExecutionInfo)
ExecuteSQLEmailTask()
InternalExecuteSQLEmailTask()
GetEmailConstructionData(SQLEmailTaskID)
GenerateGenericEmailData(ConstructionData)
TryCreateMailAddress(email, address)
.cctor()
.ctor()
.ctor(runInfo)
ExecuteTargetSQLQuery()
get_Instance()
.ctor()
Start()
Stop()
get_NumberOfRunningTasks()
CheckForNewTasks()
CreateTaskExecutor(taskParams)
FindNextTaskToRun()
CreateCheckSchedulesCommand(conn)
RunNewTask(task)
TaskExecutorFinished(sender, e)
ResetTaskCheckTimer()
UpdateTimerCallback(state)
System.IDisposable.Dispose()
.cctor()
add_TaskCompleted(value)
remove_TaskCompleted(value)
.ctor(taskExecutionInfo)
.ctor()
Initialise(taskExecutionInfo)
Execute()
BlankFunction()
TaskCompletionCallback(Result)
Cancel()
ForceExecutionEnd()
InsertIntoTaskHistory()
UpdateTaskHistoryTime()
UpdateTaskHistoryStatus(NewStatus)
RecordTaskHistoryCompletion(Status, Fault)
UpdateTimerCallback(state)
AbsoluteTimerCallback(state)
Dispose()
RecordSQLCommand(command)
ReleaseSQLCommand(command)
.ctor()
CleanClientData()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetTaskTypes(SessionID)
get_DelimitedFinishedTaskStatuses()
GetHistoryOfSpecificTaskSchedule(scheduleID)
.ctor(sessionID)
CreateDatabaseContext()
get_DB()
StoreTaskSchedule(schedule)
StoreSQLEmailTask(task)
ValidateSQLEmailTask(task)
GetAllSQLEmailTasks(formatForClient)
ValidateXsl(Xsl)
ValidateXslOrThrow(Xsl)
ValidateXmlOrThrow(xmlData)
EnableOrDisableTaskSchedule(taskScheduleID, enable)
RenderXSLTemplate(xslTemplate, xmlData)
GetValidSenders()
ValidateTaskSchedule(schedule)
FindTaskSchedule(id)
DeleteTaskSchedule(taskScheduleID)
GetSampleXml(taskID)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
SearchForSharedModules(sessionID, baseLanguage, targetLanguage, searchTerms, firstResultIndex, numberOfResults)
GetTextbookPublishers(sessionID)
.ctor()
RegisterForOlympics2010(Name, SchoolName, Position, Email, PhoneNumber, Address)
AddOlympicContactUsMessage(Name, Email, School, TheirMessage)
RegisterForWorldCup2010(Name, SchoolName, Position, Email, PhoneNumber, Address)
AddWorldCupContactUsMessage(Name, Email, School, TheirMessage)
AddLPContactUsMessage(Name, Email, School, TheirMessage)
RegisterForWorldChampionships2011(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
AddWorldChampionshipsContactUsMessage(Name, Email, School, TheirMessage)
RequestLPFreeTrial(Firstname, Surname, SchoolName, Position, PhoneNumber, Cellphone, Email, Address, City, State, Country, Languages, Comments, NumberOfLanguageStudents)
RequestEPTestDrive(Firstname, Surname, SchoolName, Position, Email, Subjects, Comments, signUpStep)
AddLanguagesLeagueContactUsMessage(Name, Email, School, TheirMessage)
RegisterForLanguagesLeague(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents)
RegisterForCompetitionGeneric(CompetitionName, CompetitionUrl, Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode, subjects, comments, brand)
AddCompetitionContactUsMessageGeneric(Name, Email, School, TheirMessage, CompetitionName)
RegisterForWorldChampionships2012(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2013(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2014(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2015(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForEducationPerfectWorldSeries2014(Name, SchoolName, Position, Email, PhoneNumber, Subjects, Comments, PromoCode)
RegisterForEducationPerfectWorldSeries2015(Name, SchoolName, Position, Email, PhoneNumber, Subjects, Comments, PromoCode)
CreateReplyToEmailAddress(emailAddress, firstName, surname)
RequestCompetitionRegistration(Firstname, Surname, SchoolName, Position, PhoneNumber, Cellphone, Email, Comments, NumberOfLanguageStudents, competitionCode, competitionName)
.ctor()
.ctor()
.ctor()
.ctor()
HasTeacherRequestedFollowup(sessionID, schoolID)
TeacherDeclinedFollowup(sessionID, schoolID, reason, datasetID)
TeacherRequestedFollowup(sessionID, schoolID, datasetID)
SendFollowupResponseEmail(sessionID, db, schoolID, datasetID, userID, details, isDecline)
TeacherSubmitContactDetails(sessionID, schoolID, datasetID, date1, time1, phone1, date2, time2, phone2, date3, time3, phone3)
CountNumberOfNonCompetitionLicencesForSchool(db, schoolID)
CountNumberOfRegisteredStudentsForSchool(db, schoolID)
TeacherSubmitDepartmentDetails(sessionID, schoolID, details, datasetID)
.ctor()
.ctor()
get_Ranking()
set_Ranking(value)
get_TotalScore()
set_TotalScore(value)
get_TotalQuestions()
set_TotalQuestions(value)
get_Participation()
set_Participation(value)
get_Bronze()
set_Bronze(value)
get_Silver()
set_Silver(value)
get_Gold()
set_Gold(value)
get_Elite()
set_Elite(value)
get_HoursLoggedIn()
set_HoursLoggedIn(value)
get_WeightedRanking()
set_WeightedRanking(value)
get_MinimumStudents()
set_MinimumStudents(value)
get_MaximumStudents()
set_MaximumStudents(value)
get_Achievements()
set_Achievements(value)
get_AchievementsDate()
set_AchievementsDate(value)
.ctor()
get_Result()
set_Result(value)
.ctor()
GetSchoolStats(sessionID, schoolID, datasetID)
GetUsersWithinScoreRange(sessionID, schoolID, datasetID, scoreLower, scoreUpper, classID)
GetSchoolAllStats(sessionID, schoolID, datasetID)
GetOverallAwards(datasetID)
BuildOverallAwardsResult(datasetID)
.ctor()
GetWorldChampsPartners()
GetAssociationPartners()
GetFilteredAssociationPartners(languages, maths, science, english, socialSciences)
GeneratePartnerKey(languages, maths, science, english, socialSciences)
GetSetOfPartnersFromDatabase(listCode)
GetFilteredSetOfPartnersFromDatabase(listCode, languages, maths, science, english, socialSciences)
UpdatePartnersForSchool(sessionID, schoolID, partnerAttributeIDs)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(sessionID)
get_DB()
CreateDatabaseContext()
ClearCache()
.ctor(sessionID)
GetGroupedReportSummaries()
GetReportData(generatedReportID, startRow, endRow)
GetReportDefinitionsForUser(userID)
GetReportDefinitions()
GetReportDefinition(reportDefinitionID)
RegenerateReportData(reportDefinitionID)
GroupReportDefinitionsWithRecordCounts(reportDefinitions)
LoadReportDefinitionsFromDatabase()
<GetReportDefinitions>b__10_0()
.ctor()
.ctor()
.ctor()
.ctor(reader)
get_Records()
get_Fields()
BuildFromReader(reader)
ParseColumn(columnName)
ParseColumnStyle(columnName)
ParseFieldDefinitionFromColumnName(columnName)
.cctor()
.ctor()
.ctor()
get_DisplayName()
get_ValueIndex()
get_DataFieldName()
get_DynamicStyles()
.ctor(displayName, valueIndex, dataFieldName)
Clone(valueIndex)
GenerateDataFieldName(displayName)
AddDynamicStyle(style, valueIndex, dataFieldName)
ParseFlags(flags)
.ctor()
.ctor(numberOfColumns)
ToString()
.ctor()
.ctor()
.ctor(title)
ToString()
.ctor()
ToString()
.ctor()
.ctor()
.ctor()
GetCategorisedProblemTypes()
ReportProblemsWithContent(session, contentID, problems)
AttachProblemToReportedContent(contentReport, problem)
GetReportedFlags(session, amount, schoolIDFilter, targetLanguage, reportedByFilter, problemTypeCode, flagTypes, excludeStudentFeedback)
LoadContentTranslationsAsReportedTranslations(session, contentIDs)
FlattenDefinitions(defs)
MarkResolved(session, problemIDs)
MarkSeen(session, problemIDs)
FixTranslation(session, translationID, replacementEnglish, replacementForeign, editedSounds, deletedSounds)
ConvertDefsToTranslationString(defs)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetAllEnvironmentsForLanguage(sessionID, languageID)
StoreEnvironment(sessionID, languageID, environment)
StoreApplicationThumbnail(sessionID, languageID, imageUrl)
GetCurrentModuleEnvironmentWithReturnObject(moduleID)
GetCurrentModuleEnvironment(moduleID)
GetCurrentSubjectEnvironment(baseLanguage, targetSubject)
GetAllEnvironmentsAssociatedWithModule(moduleID)
DeleteEnvironment(sessionID, environmentID)
AssociateEnvironmentWithModule(sessionID, moduleID, environmentID)
CopyModuleEnvironmentAssociationsToNewModule(sessionID, donorModuleID, recipientModuleID)
DissociateEnvironmentWithModule(sessionID, moduleID, environmentID)
SetEnvironmentsWhetherModuleOnly(sessionID, environments)
UpdateEnvironmentEnabled(environmentIDs, enabled, connection, transaction)
GetEnvironmentsWhetherModuleOnly(sessionID, environmentIDs)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_FolderPath()
set_FolderPath(value)
get_Filename()
set_Filename(value)
.ctor(imageUrl)
EnsureImageUrlIsValid()
get_IndexOfLastForwardSlash()
ParseImageUrl()
.ctor(message)
GetSerialisedQuestionGroupsForActivity(ActivityID)
GetQuestionGroupsForStructuredActivity(ActivityID)
GetQuestionGroupsForTest(TestID)
CreateDefaultSerialisationSettings()
UpdateQuestionGroupsForActivity(Activity, OldGroups, NewGroups)
InsertQuestionGroupIntoDB(group, baseLanguage, targetSubject, creator, conn)
UpdateQuestionGroupTargetInDB(group, conn)
UpdateQuestionGroupPropertiesInDB(group, conn)
DeleteQuestionGroupFromDB(GroupID, conn)
.ctor()
.ctor()
FromBaseQuestionGroup(source)
.ctor()
FromSerialisedQuestionGroup(baseGroup, settings)
ApplyMetadata(metadata)
OutputMetadata()
Serialise(settings)
.ctor()
.ctor()
FromSerialisedQuestionGroup(baseGroup, settings)
ApplyMetadata(metadata)
OutputMetadata()
CopyAllValues(donor)
Serialise(settings)
.ctor()
.ctor()
CompareEditableProperties(comparison)
CopyAllValues(donor)
Serialise(settings)
.ctor()
GetAllSentencesInContentList(sessionID, contentListID)
GetSentenceData(session, sentenceID, schoolID, moduleID)
CleanContentSetOfHiddenDefinitions(contentSet)
ExtractCompositeListsFromThisContentSet(contentSet, sentence)
LoadSourceListsForModule(session, schoolID, moduleID, db)
LoadContentSetForSentence(sentence, listsInModule, db)
LoadSentenceStructures(sentenceID, baseLanguage, targetLanguage, db)
StoreSentence(sessionID, sentenceContentListID, theSentence, compositeLists)
GetContentSetForTranslationList(sessionID, translationListID)
OutputSentencesForModule(moduleID)
OutputSentencesBundleForModuleFromDatabase(moduleID)
GetSentenceListIDsForModule(moduleID)
GenerateCacheKeyForCompiledSentenceList(ID)
GetSpecificSentenceLists(listIDs)
CompileSpecificSentenceLists(listIDs)
LoadCompiledCompositeLists(db, compositeListIds)
LoadSpecificSentencesFromDatabase(db, sentenceIDs)
.ctor()
.ctor(db, sentence, compositeLists)
LookupLanguageName(language)
get_ContributingContentListsDictionary()
get_CompositeListsDictionary()
Validate()
ValidateSentenceUsesValidLanguages(result)
ValidateStructuresReferenceTheSameCompositeLists(result)
ValidateStructureTemplatesMatchContents(result)
ValidateSentenceStructuresAreUnique(result)
ValidateAllCompositeListsReferenceValidTranslationListsOrTranslations(result)
ValidateAllPositionsAreUtilisedByAllStructures(result)
ValidateSentenceContainsStructuresForBaseAndTargetLanguages(result)
ValidateSentenceStructuresExcludeOtherLanguages(result)
ValidateSentenceUsesProvidedCompositeListsOnly(result)
get_SentenceStructureContentsFlattened()
get_CachedStructures()
get_UniqueCompositeListIDs()
get_RealCompositeListIDs()
get_NewCompositeListIDs()
Store(creatorID, sentenceContentListID, sessionID)
InsertOrUpdateSentenceRecord(creatorID)
InsertOrUpdateSentenceStructures(targetSentenceRecord, sourceSentence, creatorID)
InsertOrUpdateSentenceStructureContents(targetStructure, sourceStructure, creatorID)
DeleteCompositeListIfUnreferenced(compositeListID)
BuildSentenceStructureRecordHierarchy(newStructure, creatorID)
UpdateRealCompositeLists(realCompositeListIDs, creatorID)
SubstituteStrucuturePlaceholdersWithRealCompositeListIDs(placeholderIDsMap)
MarkCompositeListAsDeleted(compositeListID)
HasCompositeListBeenMarkedForDeletion(compositeListID)
CreateNewCompositeListsAndAmendDictionaryEntries(compositeListPlaceHolderIDs, creatorID)
IDsToCommaSeparatedString(ids)
get_duplicateStructures()
set_duplicateStructures(value)
<ValidateSentenceContainsStructuresForBaseAndTargetLanguages>b__25_0(s)
<ValidateSentenceContainsStructuresForBaseAndTargetLanguages>b__25_1(s)
<ValidateSentenceStructuresExcludeOtherLanguages>b__26_0(s)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
LoadSentenceStructures(structureSet)
CombinedBaseAndTargetStructures()
GetAllCompositeListIDs()
.ctor()
get_UniqueKey()
.ctor()
.ctor(baseStructures, targetStructures)
.ctor()
ToString()
get_UniqueKey()
get_CompositeListsKey()
GetAllSubjectsWithReturnObject()
GetAllSubjects()
GetAllLanguages()
GetAllLanguagesWithReturnObject()
GetLanguagesForScoreboard()
GetSubjectsForSchool(session, schoolID)
GetLanguagesDictionary()
GetLanguagesDictionaryAsync()
GetLanguageName(languageID)
GetAllLanguagesFromDatabase()
ResetCachedValidBaseLanguages()
GetValidBaseLanguages()
GetValidBaseLanguagesAsync()
GetValidBaseLanguagesFromDB()
GetValidBaseLanguagesFromDBAsync()
IsValidBaseLanguage(baseLanguage)
GetBaseLanguageOptions(selectedBaseLanguageID)
GetValidTargetLanguagesForBaseLanguage(baseLanguageID)
GetLanguagePair(sessionID, baseLanguage, targetLanguage)
GetDatasetTargetSubjects(datasetID)
GetSubjectMatchKeyWords()
GetSubjectMatchKeywordsFromDatabase()
ClearSubjectKeywordCache()
.ctor()
GetCollationForScript(scriptID, db)
GetScriptCollationsDictionary(db)
GetScriptCollationsDictionaryFromServer(db)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_SubjectID()
set_SubjectID(value)
get_BaselanguageID()
set_BaselanguageID(value)
.ctor()
GetHashCode(item)
Equals(item1, item2)
.ctor()
.ctor()
.ctor()
.ctor()
GetBrand(brand)
GetBrandName(brand)
GetDomainName(brand)
GetBrandHomePage(brand)
GetBrandBaseUrl(brand)
GetLogoImageURL(brand)
GetBrandHomePageLinkTag(brand, pageTarget)
GenerateBrandFromEmailTemplate(template)
GetBrandIDFromSubject(subjectID)
GetBrandIDFromDepartment(departmentID)
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
Increment()
CheckHealthOfCacheConnections()
CommitAppSuicide()
.ctor()
.cctor()
.ctor()
get_ScoreboardInstance()
get_CacheInstance()
get_NotificationInstance()
.ctor()
.cctor()
.ctor(sessionID)
CreateDatabaseContext()
DeleteItemByCacheKey(cacheKey)
GetItemsOfType(typeNameFilter)
GetSummary()
CleanTypeName(typeName)
CreateArgumentCollection(argumentNames, argumentValues)
.ctor()
.ctor()
.ctor()
.ctor()
GetTestSummaryForAssessmentTask(session, assessmentTaskID)
StartNewTestAttemptForAssessmentTask(session, assessmentTaskID, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForRevisionTest(session, testID, warnAboutIncompletePreviousAttempts)
ResumeIncompleteTestAttempt(session, attemptID)
CreateSanitizedCompiledTestFromNewSchemaTestInfo(test)
SpoofCompiledTestFromNewSchemaTestInfo(test, translationDirection, numberOfQuestions)
SpoofCompiledTestFromNewSchemaTestInfo(test, selectedQuestions)
UpdateTestAnswers(session, attemptID, answersToUpdate)
CompleteTestAttempt(session, attemptID, clientTimezoneOffsetMinutes)
.ctor()
.cctor()
CreateTest(session, NewTest, SchoolToShareWith)
CreateTest(NewTest, SchoolToShareWith)
UpdateQuestionGroupsForTest(test, oldQuestionGroups, newQuestionGroups)
ModifyTest(session, test)
DetermineNumberOfQuestionsFromQuestionGroups(groups)
ChangeTestVisibilityToStudentsForRevision(session, TestID, ContainingModuleID, NewVisibility)
DeleteTest(session, testID)
GetTest(session, TestID)
GetTest(TestID)
GetTestFromDatabase(TestID)
AddTestToCache(test)
AddTestSummaryToCache(test)
AddCompiledTestToCache(test)
RemoveTestFromCache(TestID)
RemoveCompiledTestFromCache(TestID)
GenerateCacheKeyForTest(TestID)
GenerateCacheKeyForTestSummary(TestID)
GenerateCacheKeyForCompiledTest(TestID)
GetRelevantTestsInModuleForUser(UserID, ModuleID)
GetRelevantCompiledTestsInModuleForUser(UserID, ModuleID)
GetRelevantTestIDsInModuleForUser(UserID, ModuleID)
OutputRelevantListsForTests(tests)
GetCompiledTest(TestID)
GetMultipleCompiledTests(TestIDs)
CompileTest(TestID)
GetTestSummary(TestID)
GetTestSummaryForAssessmentTask(session, assessmentTaskID)
StartNewTestAttemptForRevisionTest(session, testID, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForAssessmentTask(session, assessmentTaskID, warnAboutIncompletePreviousAttempts)
StartNewTestAttempt(session, testID, assessmentContextID, warnAboutIncompletePreviousAttempts)
ResumeIncompleteTestAttempt(session, attemptID)
UpdateTestAttemptStatus(attempt, newStatus, checkBeforeSet)
CompleteTestAttempt(session, attemptID, clientTimezoneOffsetMinutes)
CompleteTestAttempt(attempt, clientTimezoneOffsetMinutes)
GetAssessmentContext(ID)
ValidateAnswersForTestAttempt(test, answers)
GenerateStatsUpdates(test, answers)
ProcessAndSaveTestAttemptResult(attempt, context, test, answers, unusualActivityDetected)
DetermineActivityTypeFromActivitySubtype(activitySubtype)
ValidateAndReturnAttemptDetails(attemptID, sessionID)
GetTestAttempt(attemptID)
UpdateTestAnswers(session, attemptID, answersToUpdate)
StoreMultipleTestAnswersInDatabase(answers)
UpdateTestAttemptLastUpdated(attemptID)
GetAllInTestUserAnswersForAttempt(attemptID)
DeleteInTestAnswersForAttempt(attemptID)
EstimateTimeForTest(test)
.ctor()
.ctor()
CompareAllEditableProperties(test1, test2)
CompareBaseListEditableProperties(test1, test2)
CompareTestSpecificEditableProperties(test1, test2)
CopyAllProperties(donor, recipient)
CopyAllPropertiesFromNewSchemaBaseTest(donor, recipient)
.ctor()
CopyAllProperties(donor, recipient)
CopyQuestionGroups(donor, recipient)
.ctor()
.ctor()
FromTest(donor)
Sanitize()
.ctor()
FromTest(test)
.ctor()
get_HashKey()
CleanUpClientData()
ToQuestionState()
FromQuestionState(state)
.ctor()
.ctor()
GetCurrentModuleEnvironment(moduleID)
GetCurrentModuleEnvironmentFromDatabase(moduleID)
GenerateModuleCurrentEnvironmentCacheKey(moduleID)
.ctor()
.ctor()
.ctor()
.ctor()
CreateSerializationSettings()
CreateAlertForUsers(session, targetUserIDs, alertType, message, data, expiryDate)
GetAlertsForUser(session, userID, unseenOnly)
DeleteSingleUserAlert(session, userID, alertID)
MarkAlertsAsSeenForUser(session, userID, alertIDs)
SendAlertToTeachersInSchools(session, targetSchoolID, message, alertType, alertData, excludedUsers, includeAdmin)
SendAdminNotification(title, message, priority)
SendAdminNotificationAsync(title, message, priority)
SendPushoverAdminNotification(title, message, priority)
SendPushoverAdminNotificationAsync(title, message, priority)
.ctor()
.ctor(AlertType)
.ctor()
.ctor()
.ctor()
.ctor()
CheckHealthOfNetworkConnections()
get_InternetConnectionIsHealthy()
EnsureThatBackgroundCheckerIsRunning()
PerformAllConnectivityPings()
DoConnectivityPing(url)
CommitAppSuicide()
.ctor()
.cctor()
.ctor()
.cctor()
.ctor()
.ctor(items)
get_Items()
set_Items(value)
.ctor()
.ctor(items)
get_Items()
set_Items(value)
.ctor()
get_TaskID()
set_TaskID(value)
get_UserID()
set_UserID(value)
get_LaterThanServerDateTime()
set_LaterThanServerDateTime(value)
get_LastN()
set_LastN(value)
get_FilteredUserIDs()
set_FilteredUserIDs(value)
.ctor()
get_TaskID()
set_TaskID(value)
get_UserIDs()
set_UserIDs(value)
.ctor()
get_UpdateDateTime()
set_UpdateDateTime(value)
.ctor()
get_TaskID()
set_TaskID(value)
get_StatusUpdate()
set_StatusUpdate(value)
get_Events()
set_Events(value)
.ctor()
get_TimeService()
set_TimeService(value)
get_DynamoDb()
set_DynamoDb(value)
get_SqlDb()
set_SqlDb(value)
get_UserTaskService()
set_UserTaskService(value)
GetStatuses(session, request)
GetEvents(session, request)
SubmitStatusUpdate(session, request)
RemoveDuplicateEvents(events)
GetTask(taskId)
GetMonitoringRepoForTask(task)
CleanUpTaskMonitoringForExpiredTasks()
ArchiveEventsForCompletedTasks(tasks)
ArchiveEventsForCompletedTask(task)
RequestUnarchiveEventsForTask(taskID)
UnarchiveEventsForTask(taskID)
UnarchiveEventsForTask(task)
CanSubmitStatusUpdateForTask(task)
IdentifyAndApplyMissingEvents(request)
.ctor()
.cctor()
RemoveDuplicateEventEntities(events)
ToEventEntity(doc)
ConvertToEventEntity(doc)
ToDynamoDbDocument(e)
GenerateClosingEvent(e, utcNow)
ToEventEntity(model, userId, taskId, sessionId, receiptDateTime, receiptSequenceID)
ToDynamoDBKeys(ev)
ToDataTable(events)
ToStatusEntity(doc)
ConvertToStatusEntity(doc)
ToDynamoDbDocument(status)
ToStatusSummary(entity, utcNow)
ToDynamoDBKeys(status)
ToQueryArgs(model)
ToQueryArgs(request, laterThanServerDateTime)
GetEvents(args)
GetStatus(taskId, userId)
GetStatuses(taskId, userIds)
SubmitStatus(status, events)
SubmitEvents(events)
DeleteEvents(events)
DeleteStatuses(taskIDs)
ExecuteQuery(tableName, query, toEntity)
.ctor()
.cctor()
GetEvents(args)
.ctor(taskID)
.ctor(taskID, userID, laterThanServerDateTime, sessionID)
.ctor(taskID, userID, laterThanServerDateTime, lastN, filteredUserIDs)
get_TaskID()
get_UserID()
get_TargetSessionID()
get_LaterThanServerDateTime()
get_LastN()
get_FilteredUserIDs()
GetEvents(args)
DeleteExistingAndAddEventsForTask(events)
GetExpiredTasksWithMonitoringEventsInDynamoDB()
UpdateEventArchivalStatus(taskId, status, location)
.ctor()
get_TaskID()
set_TaskID(value)
get_UserID()
set_UserID(value)
get_SessionID()
set_SessionID(value)
get_ServerReceiptDateTime()
set_ServerReceiptDateTime(value)
get_EventKey()
get_UserEventKey()
GenerateEventKey(datetime)
GenerateEventKey(datetime, userId, eventID)
GenerateUserEventKey(userId)
GenerateUserEventKey(userId, datetime)
GenerateUserEventKeyUpperBound(userId)
FormatDateAsTimestamp(datetime)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(taskId, userId, createdUtc)
get_TaskID()
set_TaskID(value)
get_UserID()
set_UserID(value)
get_LastUpdatedDateTime()
set_LastUpdatedDateTime(value)
get_FullScreenLastBecameOkay()
set_FullScreenLastBecameOkay(value)
get_FullScreenLastBecameProblem()
set_FullScreenLastBecameProblem(value)
get_FocusLastBecameOkay()
set_FocusLastBecameOkay(value)
get_FocusLastBecameProblem()
set_FocusLastBecameProblem(value)
get_ActiveLastBecameOkay()
set_ActiveLastBecameOkay(value)
get_ActiveLastBecameProblem()
set_ActiveLastBecameProblem(value)
CalculateFullScreenProblemLevel(utcNow)
CalculateFocusProblemLevel(utcNow)
CalculateActiveProblemLevel(utcNow)
ApplyUpdate(request)
GetProblemLevel(utcNow, currentStatus, lastBecameDesiredState, lastBecameUndesiredState)
IsRecent(utcNow, lastBecameDesiredState)
WouldBecomeOkay(currentValue, newValue, lastBecameOkay)
WouldBecomeProblem(currentValue, newValue, lastBecameProblem)
WouldBecomeOkay(current, replacement)
WouldBecomeProblem(current, replacement)
.cctor()
get_TaskID()
set_TaskID(value)
get_UserID()
set_UserID(value)
get_FullScreenProblemLevel()
set_FullScreenProblemLevel(value)
get_FocusProblemLevel()
set_FocusProblemLevel(value)
get_ActiveProblemLevel()
set_ActiveProblemLevel(value)
get_ActivityID()
set_ActivityID(value)
get_SectionID()
set_SectionID(value)
get_ModuleID()
set_ModuleID(value)
get_PercentComplete()
set_PercentComplete(value)
get_TranslationDirection()
set_TranslationDirection(value)
get_FullScreenLastBecomeOkay()
set_FullScreenLastBecomeOkay(value)
get_FullScreenLastBecomeProblem()
set_FullScreenLastBecomeProblem(value)
get_ActiveLastBecameOkay()
set_ActiveLastBecameOkay(value)
get_ActiveLastBecameProblem()
set_ActiveLastBecameProblem(value)
get_FocusLastBecameOkay()
set_FocusLastBecameOkay(value)
get_FocusLastBecameProblem()
set_FocusLastBecameProblem(value)
.ctor()
get_EventID()
set_EventID(value)
get_InitatingEventID()
set_InitatingEventID(value)
get_EventType()
set_EventType(value)
get_EventTrigger()
set_EventTrigger(value)
get_QuestionID()
set_QuestionID(value)
get_ActivityID()
set_ActivityID(value)
get_SectionID()
set_SectionID(value)
get_TranslationDirection()
set_TranslationDirection(value)
get_EventDateTime()
set_EventDateTime(value)
.ctor()
get_FocusStatus()
set_FocusStatus(value)
get_FullScreenStatus()
set_FullScreenStatus(value)
get_ActiveStatus()
set_ActiveStatus(value)
get_ActivityStartDateTime()
set_ActivityStartDateTime(value)
get_IsInGame()
set_IsInGame(value)
get_ModuleID()
set_ModuleID(value)
get_ActivityID()
set_ActivityID(value)
get_QuestionID()
set_QuestionID(value)
get_SectionID()
set_SectionID(value)
get_PercentComplete()
set_PercentComplete(value)
get_TranslationDirection()
set_TranslationDirection(value)
.ctor()
.ctor()
.ctor()
GenerateCheatingMetricsForMultipleLists(listIDs)
GenerateCheatingMetricsForList(listID)
GenerateCheatingMetricsForList(list)
GenerateLanguageSpecificMetrics(language, translations)
CalculateAverageDifferenceBetweenListOfWords(words)
CalculateAverageDifferenceBetweenTranslationSides(translations)
StoreContentListCheatingMetrics(metrics)
GetCheatingMetricsFromDB(listIDs)
GenerateCheatingMetricsOnAllRemainingLists(offset)
UpdateContentListCheatingMetricsLikelihoodScores(metrics)
DetermineLikelihoodScoresForAllRemainingContentListCheatingMetrics(offset)
GetContentListMetricsDistributionModel()
GenerateContentListMetricsDistributionModel()
GenerateCheatingDistribution(metricResults)
GetListIDsForCreatingCheatingDistributionModel()
GetMostRecentlyCreatedContentLists(numberOfLists)
GetListIDsWithoutCheatingMetrics(numberOfLists, offset)
GetCheatingMetricsWithoutLikelihoodScores(numberOfLists, offset)
.ctor()
PopulateModuleContentContainer(userID, schoolID, userIsTeacherAtThisSchool, lists, contentListModuleInfo, otherActivities, otherActivitiesContent, contentListsToAlwaysIncludeContentFrom)
GetListIDsAndFoldersForUserLoginToModule(userID, moduleID, folderFilter)
GetSpecificCompiledContentLists(listIDs)
CompileSpecificContentLists(requestedLists, knownContent)
CompileSpecificTranslationLists(requestedLists, translationIDsToFetch, knownContent)
CompileSpecificFactLists(requestedLists, contentIDsToFetch, knownContent)
CompileSpecificQuestionLists(requestedLists, contentIDsToFetch, knownContent)
RetrieveContentListFromDatabase(listID, IncludeContentIDs, CreateCompiledListClasses)
RetrieveSpecificContentListsFromDatabase(ContentListIDs, IncludeContentIDs, CreateCompiledListClasses, translationDirectionContentIDFilter)
RetrieveContentIDsForSpecificContentLists(lists, translationDirectionContentIDFilter)
GetMixedActivityCompiledContent(activity)
CompileMixedContentActivity(activity)
GetMultipleMixedActivitiesCompiledContent(activities)
CompileMultipleMixedContentActivities(activities)
PickOutStructuredActivitiesAndTestsFromActivityIDs(activityIDs)
PickOutSmartLessonsFromActivityIDs(activityIDs)
.ctor()
CreateContentList(session, schoolID, title, description, ancestor, baseLanguage, targetSubject, contentIDs, purpose, activityType, contentType)
CreateContentList(session, schoolID, title, Description, ancestor, baseLanguage, targetSubject, purpose, structure, activityType, contentType, contentIDs)
CreateContentListAfterValidation(schoolID, creator, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, activityType, contentType, contentIDs)
CreateContentListAfterValidation(conn, schoolID, creator, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, activityType, contentType, contentIDs)
CreateContentListAndAddToModule(session, schoolID, moduleID, addAsPersonalList, folderPath, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, activityType, contentType, contentIDs)
UpdateContentList(session, listID, newTitle, newDescription, data)
UpdateContentList(session, listID, newTitle, newDescription, contentIDs, structure)
UpdateContentListProperties(sessionID, listID, title, description, structure)
UpdateContentListPropertiesAfterValidation(conn, listID, title, description, structure, clearFromCache)
UpdateContentListContentTypeAfterValidation(listID, contentType, clearFromCache)
RenameContentListInModule(session, listID, moduleID, schoolID, title)
UpdateContentListContents(sessionID, listID, contentIDs)
UpdateContentListContentsAfterValidation(conn, listID, contentIDs, clearFromCache, explicitListStructure)
RemoveAllContentListContentsAfterValidation(conn, listID, clearFromCache)
ValidateThatSessionCanModifyContentList(session, schoolID, listID, throwIfNot, conn, allowAdminOverride)
ValidateThatSessionCanModifyContentList(session, schoolID, listID, throwIfNot, allowAdminOverride)
ValidateThatSessionCanModifyContentList(session, listID, throwIfNot, conn)
ValidateThatSessionCanModifyContentList(session, listID, throwIfNot)
ValidateThatSessionCanModifyContentListAsync(session, schoolID, listID, throwIfNot, conn, allowAdminOverride)
ValidateThatSessionCanModifyContentListAsync(session, schoolID, listID, throwIfNot, allowAdminOverride)
ValidateThatSessionCanModifyContentListAsync(session, listID, throwIfNot, conn)
ValidateThatSessionCanModifyContentListAsync(session, listID, throwIfNot)
ValidateThatSessionCanModifySpecificContentLists(session, schoolID, listIDs, conn, allowAdminOverride)
ValidateThatSessionCanModifySpecificContentLists(session, schoolID, listIDs, allowAdminOverride)
ValidateThatSessionCanModifySpecificContentListsAsync(session, schoolID, listIDs, conn, allowAdminOverride)
ValidateThatSessionCanModifySpecificContentListsAsync(session, schoolID, listIDs, allowAdminOverride)
GetContentListStructure(listID, conn, tran)
AddContentToContentList(sessionID, listID, contentIDsToAdd, insertIndex)
AddContentToContentList(sessionID, listID, contentIDsToAdd, insertIndex, cacheHandler)
ReplaceItemInContentList(sessionID, ListID, OldContentID, NewContentID)
ReplaceItemInContentList(sessionID, ListID, OldContentID, NewContentID, cacheHandler)
RemoveContentFromContentList(sessionID, listID, contentIDsToRemove)
RemoveContentFromContentList(sessionID, listID, contentIDsToRemove, cacheHandler)
ModifyTranslationListContent(session, listID, orderedTranslations)
IdentifyDirtyTranslations(orderedTranslations, contentType)
DeleteContentList(session, listID)
DeleteContentListAfterValidation(listID)
AddContentListsToModule(session, schoolID, moduleID, folderPath, listIDs, isPersonalList, sourceModuleID)
AddPersonalContentListsToModuleAfterValidation(moduleID, userID, folderPath, listIDs)
AddContentListsToModuleAfterValidation(moduleID, folderPath, listIDs, sourceModuleID)
RemoveContentListFromModule(session, schoolID, moduleID, listID, isPersonalList)
RemoveContentListsFromModule(session, schoolID, moduleID, listIDs, isPersonalList)
RemoveContentListsFromModuleAfterValidation(deletedBy, moduleID, listIDs)
RemovePersonalContentListsFromModuleAfterValidation(moduleID, userID, listIDs)
RenameContentListFolderPathForModule(session, schoolID, moduleID, oldFolderPath, newFolderPath, targetPersonalLists)
RenameModuleContentListFolderPathAfterValidation(moduleID, oldFolderPath, newFolderPath)
RenameModulePersonalContentListFolderPathAfterValidation(userID, moduleID, oldFolderPath, newFolderPath)
GetContentListSummariesForModule(sessionID, moduleID)
CreateTranslationListsFromTranslationsForCreation(session, schoolID, baseLanguage, targetSubject, newTranslations)
CreateCopyOfContentListInModule(session, moduleID, schoolID, listID, title, folderPath, deepCopyQuestions, transferListReferences)
DetermineWhetherContentLisCopyRequiresDeepCopyingOfQuestions(list)
CopyTest(testID, newTestID)
CopyStructuredActivity(structuredActivityID, newStructuredActivityID)
CopyFactListDisplayOptions(listID, newListID)
FindTranslationListIDsWhichContain(translationIDs, db)
GetContentListIDsContainingContentIDs(contentIDs)
ChangeContentListVisibilityToStudents(session, listID, moduleID, isVisible)
CascadeContentListVisibilityToStudents(listID, moduleID, isVisible)
ChangeContentListActivityType(session, schoolID, listID, activityType)
UpdateContentListThumbnailBasedOnSourceQuestion(session, schoolID, listID, questionID)
UpdateContentListThumbnailBasedOnSourceQuestionAfterValidation(listID, questionID, removeFromCache)
ShareContentList(session, schoolID, listID, sharedContentType, publisherDetails, sharedAsPartOfModule)
ShareAllContentListsInModule(session, schoolID, moduleID, sharedContentType, publisherDetails)
CascadeModuleSharingToContentListsAfterValidation(moduleID, listIDs)
UnshareContentList(session, schoolID, listID)
UnshareContentListAsync(session, schoolID, listID)
UnshareAllContentListsInModule(session, schoolID, moduleID)
CascadeModuleUnsharingToContentListsAfterValidation(listIDs)
GetContentList(listID, includeContentIDs, bypassCache)
GetSpecificContentLists(listIDs, includeContentIDs, bypassCache)
GenerateCacheKeyForContentList(listID, includeContentIDs)
GenerateCacheKeyForCompiledContentList(listID)
GenerateAllCacheKeysForContentListRemoval(listID)
RemoveContentListFromCache(listID)
RemoveContentListFromCacheAsync(listID)
RemoveMultipleContentListsFromCache(listIDs)
RemoveMultipleContentListsFromCacheAsync(listIDs)
RemoveAllContentListsFromCacheAsync()
GetAllContentListIDs()
GetCoreContentListIDsInModule(moduleID)
GetCoreContentListIDsInModule(moduleID, conn)
GetCoreContentListIDsInMultipleModules(ModuleIDs)
GetSharingTypeForContentLists(listIDs)
DetermineContentTypeFromListPurpose(purpose, throwOnUnrecognisedPurpose)
DetermineCommonContentTypeOfMultipleLists(lists)
ONCE_OFF_TASK_CleanUpNonExistantTranslations()
IsListVisibleToStudentsInAnyModule(listID)
GetAppropriateModulesForListsInSchool(listIDs, schoolID)
GetAppropriateModulesForListsForUser(listIDs, userID)
GetEstimatedTimesForMultipleContentLists(listIDs, defaultValue)
GetAllListIDsWhichContainDefinition(DefinitionID)
.ctor()
.cctor()
OutputAllLists()
.ctor()
toDistribution()
FromDistribution(distribution)
.ctor()
toValueArray()
toString()
.ctor()
.ctor()
GetReferencedContentIDsByType()
GetAllReferencedContentIDs()
GetID()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
PopulateCollectionFields(collection)
GenerateFilter()
.ctor()
.ctor()
.ctor()
ToOutputCollectionData(editable, folder, overrideTitle)
.ctor()
.ctor()
CopyAllProperties(donor, recipient)
ToOutputCollectionData(editable, folder, overrideTitle)
PopulateCollectionFields(collection)
.ctor()
GetHashCode()
Equals(obj)
.ctor()
.ctor()
.ctor()
.ctor()
ToOutputCollectionData(editable)
PopulateCollectionFields(collection)
.ctor()
.ctor()
.ctor(_definitionID, _romanisation)
GetHashCode(item)
Equals(item1, item2)
.ctor()
.ctor()
IdentifyUserViaLTI(identityProvider, identifier)
GetUserIDAndAuthenticationProviderFromDatabase(identityProvider, userIdentifier)
GetLTIProviderIDForSchoolFromDatabase(schoolID)
DoesSchoolUseLTI(schoolID)
GetFriendlyNameOfLTIProviderForSchool(schoolID)
GetLTIProviderIDForSchool(schoolID)
GenerateCacheKeyForAuthenticationProviderID(schoolID)
RemoveSchoolLTIRecordFromCache(schoolID)
GetLTIProviderByConsumerKey(consumerKey)
GenerateCacheKeyForLTIProviderByConsumerKey(consumerKey)
RemoveLTIProviderRecordFromCache(consumerKey)
GetLTIProviderByConsumerKeyFromDatabase(consumerKey)
GetLTIProviderFromDatabase(ID)
GetLTIProviderType(ID)
CreateLTIProviderForSchool(schoolID, ltiProviderType, userIDLookupField)
GetSchoolIDAssociatedWithLTIProvider(providerID)
RemoveLTIProviderFromCache(providerID)
RemoveLTIProviderFromCache(providerID, consumerKey, affectedSchoolID)
DeleteLTIProvider(providerID)
GenerateLTILaunchURLForAppWithReturnObject(session, contentURL)
GenerateLTILaunchURLForApp(contentURL)
.ctor()
.cctor()
IdentifyUserViaSSO(identityProvider, identifier)
GetUserIDAndAuthenticationProviderFromDatabase(identityProvider, userIdentifier)
GetUserIDFromStudentID(identifier, schoolID)
GetUserIDFromEmailAddress(identifier, schoolID)
GetAllSchoolSSODetails()
GetAllSchoolSSODetailsInternal()
GetAllSchoolSSODetailsFromDatabase()
RemoveAllSchoolSSODetailsFromCache()
GetAuthenticationProviderIDFromDatabase(schoolID)
DoesSchoolUseSSO(schoolID)
GetAuthenticationProviderID(schoolID)
GenerateCacheKeyForAuthenticationProviderID(schoolID)
RemoveAuthenticationProviderFromCache(schoolID)
FindSSOSchoolDetailsFromSchoolName(schoolKeyword)
CreateSSOProviderForSchool(schoolID, providerID, protocol)
GetSearchableSchoolSSODetails()
GenerateSearchableSchoolDetails()
GenerateSchoolSearchTermsFromString(input)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.cctor()
CompileSoundFileDataForSpecificDefinitions(definitionIDs)
EditSoundAssociation(soundID, definitionID, soundFileURL)
ReverseString(input)
DisassociateSound(soundID, definitionID)
CheckExistanceOfAllSoundFiles(SessionID)
UploadSoundFiles(session, associations)
UploadSoundFiles(associations)
ConvertSoundFileUrlPairsToDataTable(associations)
GetSpeakersAndDialects(SessionID)
StoreSpeaker(sessionID, speaker)
DeleteSpeaker(sessionID, speakerID)
GetSoundFileGenerationDataForDefinition(definitionID)
hasKana(text)
InsertNewSoundFileRecordForDefinition(definitionID, soundFileFolderID, soundFileName, soundFileExtension, removeReferencedListsFromCache)
SendSoundFileGenerationRequestForDefinitionAsync(definitionID)
SendSoundFileGenerationRequestForDefinition(definitionID)
SendSoundFileGenerationRequestForMultipleDefinitions(definitionIDs)
SendSoundFileGenerationRequestForMultipleDefinitionsAsync(definitionIDs)
GenerateSoundFileGenerationRequestMessage(definitionID)
GenerateSoundFileGenerationRequestMessages(definitionIDs)
EnqueueAutomatedRecordingForAllAppropriateDefinitions()
GetIDsOfAllDefinitionsThatWeCouldRecordSoundFilesFor()
EnqueueAutomatedRecordingForAllAppropriateEnglishSpellingDefinitions()
GetIDsOfAllEnglishSpellingDefinitionsThatWeCouldRecordSoundFilesFor()
GetIDsOfRomajiDefinitionsWithElectronicSoundFiles()
RemoveSoundFilesFromRomajiDefinitions()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
FromReader(reader)
.ctor()
.ctor()
.ctor()
.ctor()
FromReader(reader)
.ctor()
.ctor()
Require(sessionID, requireClass, requiredPrivileges)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetDynamoSessionPromisesTable()
SaveNewPromise(promise)
ValidatePromise(ID)
ConsumePromise(ID)
DeletePromise(ID)
DeleteAllExpiredPromises()
GetAllExpiredPromiseIDs()
.ctor()
.cctor()
SaveNewPromise(promise)
ValidatePromise(ID)
ConsumePromise(ID)
DeleteAllExpiredPromises()
get_Provider()
GenerateSessionPromiseFromExistingSession(session)
GenerateSessionPromiseForImpersonation(session, targetUserID)
GenerateNewSessionPromiseAfterValidation(userID, authenticationProvider, deviceSession, impersonatorID)
ConsumeSessionPromise(ID)
DeleteExpiredSessionPromises()
.ctor()
.cctor()
GetDynamoLPSessionsTable()
DoesSessionExist(sessionID)
GetSessionData(sessionID)
GetSessionDataAsync(sessionID)
GetMultipleSessions(sessionIDs)
GetMultipleSessions(sessionIDs, allowDirtyReads)
SaveSession(session)
SaveMultipleSessions(sessions)
UpdateSessionInDynamo(session, attributesToUpdate)
UpdateSessionInDynamoAsync(session, attributesToUpdate)
UpdateSessionDocumentInDynamoAsync(sessionID, doc)
CreateNewSession(sessionID, userID, applicationID, role, privilegesLevel, schoolID, classID, moduleID, taskID, activityID, baseLanguage, targetSubject, activityDescription, impersonatorID, deviceSessionID, flashVersion, authenticationProvider, maxPrivileges)
UpdateSessionClassModuleRole(session)
UpdateSessionFocusedActivity(session)
ExtendSession(sessionID, now)
DeleteSession(sessionID)
DeleteSessions(sessionIDs)
AssociateSessionWithDeviceSession(session, DeviceSessionID)
GetAllCurrentSessions()
GetAllCurrentLPSessions()
GetAllCurrentLPSessionsForSchool(schoolID, userFilter)
GetAllCurrentLPSessionIDsForSchool(schoolID, userFilter)
GetApproximateListOfOnlineUsersAtSchool(schoolID, userFilter)
GetOtherActiveLPSessionsForUser(userID)
GetAllSessionIDsForUser(userID, deviceSessionID)
GetAllSessionsForUser(userID, deviceSessionID)
GetAllCurrentLPSessionIDsForUser(userID)
GetAllCurrentLPSessionsForUser(userID)
GetUserSessionCounts(userIDs)
GetExpiredSessionIDs()
Test()
MigrateAllRecordsFromOldTable(oldTableName, newTableName)
GetOtherActiveSessionsForUserTEST(userID, deviceSessionID)
.ctor()
.cctor()
DoesSessionExist(sessionID)
GetSessionData(sessionID)
GetSessionDataAsync(sessionID)
GetMultipleSessions(sessionIDs)
GetAllSessionsForUser(userID, deviceSessionID)
GetAllSessionIDsForUser(userID, deviceSessionID)
CreateNewSession(sessionID, userID, applicationID, role, privilegesLevel, schoolID, classID, moduleID, taskID, activityID, baseLanguage, targetSubject, activityDescription, impersonatorID, deviceSessionID, flashVersion, authenticationProvider, maxPrivileges)
UpdateSessionClassModuleRole(session)
UpdateSessionFocusedActivity(session)
ExtendSession(sessionID, now)
DeleteSessions(sessionIDs)
DeleteSession(sessionID)
AssociateSessionWithDeviceSession(session, DeviceSessionID)
GetAllCurrentSessions()
GetAllCurrentLPSessions()
GetAllCurrentLPSessionsForSchool(schoolID, userFilter)
GetAllCurrentLPSessionIDsForSchool(schoolID, userFilter)
GetAllCurrentLPSessionsForUser(userID)
GetAllCurrentLPSessionIDsForUser(userID)
GetOtherActiveLPSessionsForUser(userID)
GetUserSessionCounts(userIDs)
GetExpiredSessionIDs()
SaveSession(session)
SaveMultipleSessions(sessions)
GetApproximateListOfOnlineUsersAtSchool(schoolID, userFilter)
.ctor()
DoesSessionExist(sessionID)
GetSessionData(sessionID)
GetSessionDataAsync(sessionID)
GetMultipleSessions(sessionIDs)
GetAllCurrentSessions()
GetAllCurrentLPSessions()
GetAllCurrentLPSessionsForSchool(schoolID, userFilter)
GetAllCurrentLPSessionIDsForSchool(schoolID, userFilter)
GetAllCurrentLPSessionsForUser(userID)
GetAllCurrentLPSessionIDsForUser(userID)
GetApproximateListOfOnlineUsersAtSchool(schoolID, userFilter)
CreateNewSession(sessionID, userID, applicationID, role, privilegesLevel, schoolID, classID, moduleID, taskID, activityID, baseLanguage, targetSubject, activityDescription, impersonatorID, deviceSessionID, flashVersion, authenticationProvider, maxPrivileges)
UpdateSessionClassModuleRole(session)
UpdateSessionFocusedActivity(session)
ExtendSession(sessionID, now)
DeleteSession(sessionID)
DeleteSessions(sessionIDs)
AssociateSessionWithDeviceSession(session, DeviceSessionID)
GetOtherActiveLPSessionsForUser(userID)
GetUserSessionCounts(userIDs)
GetExpiredSessionIDs()
GetAllSessionIDsForUser(userID, deviceSessionID)
GetAllSessionsForUser(userID, deviceSessionID)
GenerateNewDeviceSession(UserID, AuthenticationProvider, ExpiryDate)
GetDeviceSession(ID)
GenerateDeviceSessionFromLPSessionID(session, ExpiryDate)
EndDeviceSession(ID)
EndAllDeviceSessionsForUser(userID, authenticationProvider)
.ctor()
get_UserID()
set_UserID(value)
get_UserName()
set_UserName(value)
get_Email()
set_Email(value)
get_UserDisplayName()
set_UserDisplayName(value)
get_SchoolID()
set_SchoolID(value)
get_SchoolName()
set_SchoolName(value)
get_Role()
set_Role(value)
get_IsKeyContact()
set_IsKeyContact(value)
.ctor()
get_Results()
set_Results(value)
get_TotalNumberOfResults()
set_TotalNumberOfResults(value)
.ctor()
StoreUserPermissions(sessionID, userID, permissionCodes, basedOnTemplateID)
GetPermissionsForUser(sessionID, userID)
GetPermissions(sessionID)
GetPermissionsFromDatabase()
.ctor()
GetPermissionTemplates(sessionID)
GetPermissionTemplatesFromDatabase()
GetUsersTemplateID(userID)
GetPermissionTemplateDescriptionForUser(sessionID, userID)
DescribeTemplate(baseDescription, numAdded, numRemoved)
.ctor()
LoginToControlPanel(Username, Password, applicationID, FlashVersion)
DirectLoginToControlPanel(sessionID, hashKey, applicationID, flashVersion)
GenericLogin(username, password, applicationID, flashVersion)
LoginWithDeviceSession(deviceSessionID, applicationID, flashVersion)
LoginWithSessionPromise(promiseID, applicationID, flashVersion)
AttemptLicencedLogin(userID, applicationID, flashVersion, impersonatorID, deviceSessionID, authenticationProvider)
SlackUserLoginNotificationToSLO(callInfo)
StoreLoginNotification(userID)
SendUserLoginNotificationEmailToSupport(info)
.ctor()
.cctor()
GetCurrentLPSessions(session)
GetAllCurrentLPSessionsAfterValidation()
GetCurrentLPSessionsForAdmins()
GetCurrentLPSessionSummariesForSchoolAfterValidation(schoolID)
GenerateCacheKeyForCurrentLPSessionsForSchool(schoolID)
GetCurrentLPSessionSummariesForSchoolFromDataSource(schoolID)
ConvertSessionsToSessionSummaries(sessions)
ConvertSessionsToSessionSummariesForSchool(sessions)
GetCurrentLPSessionCount(session)
GetCurrentLPSessionCountForAdmins()
GetCurrentLPSessionCountForSchool(schoolID)
GetCurrentLPSessionsForClassesAndSubjects(session, schoolID, classIDs, baseLanguage, subjectIDs)
GetCurrentLPSessionsForClassesAndSubjectsAfterValidation(schoolID, classIDs, baseLanguage, subjectIDs)
GetCurrentLPSessionsForSpecificUsersAndSubjectsAfterValidation(schoolID, userIDs, baseLanguage, subjectIDs)
.ctor()
GetSessionProvider()
GetSessionData(sessionID, bypassL1Cache)
GetSessionDataAsync(sessionID, bypassL1Cache)
GetMultipleSessions(allSessionIDs, bypassL1Cache)
CreateNewSessionAfterValidation(userID, applicationID, role, privilegesLevel, schoolID, classID, moduleID, taskID, activityID, baseLanguage, targetSubject, activityDescription, impersonatorID, deviceSessionID, flashVersion, authenticationProvider, maxPrivileges)
GenerateRandomSessionID(legacyApplication)
RandomLong(min, max, rand)
UpdateSessionClassModuleRole(session)
UpdateSessionFocusedActivity(session, classID, moduleID, activityID, taskID)
UpdateSessionFocusedActivity(session)
ChangeControlPanelSchoolSelection(session, schoolID)
GetMostPrivilegedRoleInSchoolForUser(userID, schoolID)
ExtendSessionAndCheckMessage(sessionID)
CheckForNewSessionNotifications(session)
ExtendSession(sessionID)
ExtendSessionAfterValidation(session)
EndSession(sessionID, reason)
EndSessions(sessionIDs, reason)
SendSessionEndCleanupRequest(session)
PutSessionDataInCache(session, invalidateL1)
RemoveSessionDataFromCache(sessionID)
GenerateSessionCacheKey(sessionID)
GenerateUserOnlineCacheKey(userID)
Impersonate(session, impersonateUserID, impersonateUserName)
SearchForUsersToImpersonate(sessionID, schoolKeyword, nameKeyword, includeStudents)
GetValidatedSessionOrThrow(sessionID, minimumPrivileges, conn, checkMaxPrivilege)
GetValidatedSessionOrThrowAsync(sessionID, minimumPrivileges, conn, checkMaxPrivilege)
GetValidatedAdminSessionOrThrow(sessionID)
AssociateSessionWithDeviceSession(session, DeviceSessionID)
GetSessionExpiryTimeForApplication(applicationID)
SynchronizeDatabaseSessionsToDynamo()
SynchronizeDynamoSessionsToDatabase()
EndOtherActiveSessionsForUser(userID, deviceSessionID, reason)
ClearExpiredSessions()
ClearExpiredDeviceSessions()
GenerateUserSessionCounterKey(userID)
IncrementUserSessionCounter(userID)
DecrementUserSessionCounter(userID)
GetUserSessionCounts(userIDs)
GetAllCurrentLPSessionsForSchool(schoolID, userIDFilter)
GetAllCurrentLPSessionsForUser(userID)
GetAllSessionsForUser(userID)
GetListOfOnlineUsersInMySchool(session, schoolID, userIDFilter)
GetRecentlyExpiredSessionFromDatabase(sessionID)
DoesSessionIDExistInRecentlyExpiredTable(sessionID)
AddExpiredSessionToDatabase(expiredSession, expiryReason)
GetReasonForSessionExpiry(sessionID)
GenerateControlPanelDirectLoginHash(FirstName, UserID, SessionID)
GenerateLPDirectLoginHash(isImpersonating, FirstName, Surname, UserID, SessionID)
EndAllSessionsForUser(userID)
EndAllCurrentSessions(expiryReason)
EndAllSessionsForDeviceSession(deviceSessionID)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor(sessionID, userID, taskID)
ToDynamoDocument(promise)
FromDynamoDocument(doc)
.ctor()
.ctor()
get_IsImpersonated()
FromDynamoDocument(doc)
IsSafeToForcefullyLogout()
.ctor()
.ctor()
.ctor()
get_Name()
.ctor()
.ctor()
.ctor()
.ctor()
get_UserID()
set_UserID(value)
get_PermissionCode()
set_PermissionCode(value)
get_CreatedDate()
set_CreatedDate(value)
get_CreatedBy()
set_CreatedBy(value)
.ctor()
.ctor()
.ctor()
.ctor()
FromDynamoDocument(doc)
toDynamoDocument()
get_Client()
SendMetricToCloudWatch(request)
GenerateSingleValueMetricRequest(metricName, value, unit)
PostCurrentUsersOnlineMetric()
.ctor()
.cctor()
GetAppData(session, classID, moduleID, dataSetSelectionOptions, taskID)
GetAppData(session, classID, activitySelection, dataSetSelectionOptions)
SetSmartLessonAttempts(returnObject, session, userTask, allActivities, structuredActivities, knowledgeSet)
SetCountries(returnObject)
GetSampleClassIDTheTeacherTeachesIn(userID)
SetListsAndContent(returnObject, session, schoolID, contentListLinks, listIDs, tests)
CompileListOfAllTargetContentListIDs(userID, activitySelection, userTask, targetContentListLinks, sentenceLists)
GetCoreContentListIDs(returnObject, session, activitySelection)
SetSentences(activitySelection, returnObject)
DetermineSessionPrivileges(session, chosenClass, returnObject)
UpdateSession(session, role, classID, schoolID, activitySelection, baseLanguage, targetSubject, activityDescription)
SetDataSetAndScoring(dataSetSelectionOptions, returnObject, schoolID, task)
SetLanguageSpecificInfo(session, activitySelection, userTask, returnObject)
SetUserSettings(session, baseLanguage, targetSubject, returnObject)
SetClassAndSchoolData(returnObject, classID, schoolID)
SetStatistics(returnObject, session, dataSet, contentIDs, role)
SetEnvironment(returnObject, session, activitySelection, baseLanguage, targetLanguage)
SetTaskAndTestInfo(returnObject, session, activitySelection, testsForOutput)
GetDataSetInfo(dataSetSelectionOptions, schoolID)
DetermineActivityDescription(session, activitySelection, userTask, contentLists, returnObject)
.ctor()
.cctor()
RegisterAndLoginUsingSSO(providerCode, serviceUrl, serviceTicket, flashVersion)
StoreDummySingleSignOnRegistrationForACG(providerUsername, userID, creatorID, classID)
GetSingleSignOnProvider(providerCode)
UpdateClassFromTutorGroup(provider, registration, tutorGroup)
FindOrCreateClassIDForTutorGroup(provider, tutorGroup)
RegisterNewUser(providerCode, provider, serviceTicket, userValidation)
CreateLicencedClassFromTutorGroup(provider, tutorGroup)
ImpersonateProviderTeacher(provider)
TestSAMLSignOn()
.ctor()
.ctor()
SetLanguages(languages)
SetClassDescriptions(classes)
SetClassSubjects(suggestions)
SetModuleApplicationLinks(moduleAppLinks)
SetAppPaths(appPaths)
SetModules(modules)
OutputData()
GetLanguageDescriptionFromID(languageID)
GetIndexOfClassFromID(classID)
GetApplicationIDAssociatedWithModule(moduleID)
GetIndexOfApplicationFromModuleID(ID)
Login(username, password, appID, flashVersion)
WebsiteLoginWithDeviceSession(deviceSessionID, appID, browserVersion)
WebsiteLogin(username, password, appID, browserVersion)
AttemptLicencedWebsiteLogin(userID, appID, browserVersion)
GenerateNewDeviceSessionForUserLogin(username, password, expiryDate)
LoginWithDeviceSession(SessionID, appID, flashVersion)
LoginWithSessionPromise(SessionPromise, appID, flashVersion)
AuthenticateUser(username, password)
PerformUserAuthenticationInternal(username, password)
GenerateThrottleLockoutCacheKey(username)
RecordFailedLogin(username)
GenerateThrottleCountCacheKey(username)
GetUserID(username)
GetUserCredentials(username)
GetPasswordAndKindForUser(userID)
AttemptLicencedLogin(userID, appID, flashVersion, impersonatorID, deviceSessionID, authenticationProvider)
AttemptValidatedLicencedLogin(userID, appID, flashVersion, impersonatorID, deviceSessionID, authenticationProvider)
TryAttachDefaultDatasetToLoginResult(loginResult, session)
AreEPModulesSupported(appID, flashVersion)
ChangeBaseLanguage(sessionID, baseLanguage)
UpdateUsersBaseLanguageAfterValidation(userID, baseLanguage)
DirectLoginAsUser(adminSessionID, userID, flashVersion)
DirectLoginToPro(sessionID, hashKey, isImpersonating, flashVersion, appID)
AcceptEULA(session)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
CleanData()
ToString()
.ctor()
.ctor()
.ctor(userID, success, hasDefaultPassword, wasDefaultPasswordCleaned)
SupplyLoginExtras(appID, flashVersion)
get_FaultMessage()
get_Platform()
set_Platform(value)
get_Major()
set_Major(value)
get_Minor()
set_Minor(value)
get_Revision()
set_Revision(value)
get_Valid()
set_Valid(value)
FromString(versionString)
.ctor(version)
Parse(version)
GreaterThanOrEqualTo(version)
GreaterThanOrEqualTo(major, minor, revision)
LessThan(version)
LessThan(major, minor, revision)
Equals(obj)
GetHashCode()
Equals(major, minor, revision)
Between(startVersion, endVersion)
.cctor()
.ctor()
.ctor()
.ctor()
get_URL()
CreateFailedAuthentication()
.ctor(userID, success)
SupplyLoginExtras(appID, flashVersion)
get_FaultMessage()
get_HasUserID()
.ctor()
.ctor()
.ctor()
get_IsTrialling()
.ctor()
get_IncludePersonalLists()
get_IncludeStats()
get_Empty()
.ctor()
.ctor()
.ctor()
get_UserID()
set_UserID(value)
get_Password()
set_Password(value)
get_PasswordKind()
set_PasswordKind(value)
get_FirstName()
set_FirstName(value)
Authenticate(password)
get_DefaultPassword()
get_HasDefaultPassword()
AuthenticatePlainText(password)
AuthenticateBCrypt(password)
CheckBCryptHash(password)
CheckPlaintextPassword(password)
.ctor()
.ctor()
.ctor(_ID, _Description)
SortWordListOptionsFully()
CompareTo(obj)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
AddClass(NewClass)
Compile()
.ctor()
AddLevel(NewLevel)
Compile()
.ctor()
AddList(NewList)
Compile()
.ctor()
.ctor()
.ctor(message, logThisException)
.ctor(message, logThisException, innerException)
RecordMessage(message, logLevel)
RecordException(ex, sessionID, arguments)
RecordException(exception, logLevel, sessionID, arguments)
LogItem(entry, level, ex)
.ctor()
.cctor()
.ctor()
GetConsumedReadUnitsPercent(tableName, lookbackWindow)
GetCloudwatchMetricsForDynamoDBTable(tableName, gsiName, metricName, startDate, endDate, period)
.ctor()
.cctor()
GetClient()
GetDBContext()
GetDBContext(config)
GetPrefixedTableName(name)
GetTable(tableName, alreadyPrefixed)
GetTableDescription(tableName, alreadyPrefixed)
GetTableDescriptionFromAWS(prefixedTableName)
GetTableDescriptionAsync(tableName, alreadyPrefixed)
GetTableDescriptionFromAWSAsync(prefixedTableName)
GetTableThroughputCapacityAsync(tableName, alreadyPrefixed)
GetGlobalSecondaryIndexThroughputCapacityAsync(tableName, indexName, alreadyPrefixed)
GetPutItemConfigForInsert(identityColumns)
BatchIDsByProximity(IDs, maxGapSize, maxBatchSize)
BatchIDsIntoSetSizeGroups(IDs, maxBatchSize)
BuildINClause(items, columnName, valuesRepository, variablePrefix)
BuildINClause(items, columnName, valuesRepository, variablePrefix)
CopyAttributesToNewDocument(source, attributes)
AddValueToSpecificFieldInTable(tableName, key, propertyName, incrementValue, alreadyPrefixed)
PerformRateLimitedTableScanAsync(tableName, config, toEntity, maxProportionOfReadsToConsume, maxItems, alreadyPrefixed)
PerformWorkForRateLimitedTableScan(table, config, toEntity, maxItems)
PerformRateLimitedTableScanAsync(tableName, config, maxProportionOfReadsToConsume, maxItems, alreadyPrefixed)
PerformRateLimitedMultigetAsync(tableName, keys, toEntity, consistentReads, maxProportionOfReadsToConsume, alreadyPrefixed)
PerformRateLimitedMultigetAsync(tableName, keys, consistentReads, maxProportionOfReadsToConsume, alreadyPrefixed)
PerformRateLimitedBatchDelete(tableName, keys, singleHashKey, maxProportionOfWritesToConsume, alreadyPrefixed)
PerformRateLimitedBatchDeleteAsync(tableName, keys, singleHashKey, maxProportionOfWritesToConsume, alreadyPrefixed)
PerformRateLimitedBatchWriteAsync(tableName, documents, maxProportionOfWritesToConsume, singleHashKey, ignoreGlobalSecondaryIndexes, ignoreLocalSecondaryIndexes, alreadyPrefixed)
DetermineWriteProvisioningOfTable(tableName, singleHashKey, ignoreGlobalSecondaryIndexes, ignoreLocalSecondaryIndexes, alreadyPrefixed)
DetermineWriteProvisioningOfTable(table, singleHashKey, ignoreGlobalSecondaryIndexes, ignoreLocalSecondaryIndexes)
DetermineNumberOfPartitionsForDataSize(tableSizeBytes)
DetermineMaxWritesPerSecondForTable(tableName, proportionOfThroughputToConsume, singleHashKey, ignoreGlobalSecondaryIndexes, ignoreLocalSecondaryIndexes, alreadyPrefixed)
DetermineMaxWritesPerSecond(table, proportionOfThroughputToConsume, singleHashKey, ignoreGlobalSecondaryIndexes, ignoreLocalSecondaryIndexes)
DetermineReadProvisioningOfTable(table, singleHashKey)
DetermineMaxReadsPerSecondForTableScan(tableName, proportionOfThroughputToConsume, consistentReads, alreadyPrefixed)
DetermineMaxReadsPerSecondForScan(table, proportionOfThroughputToConsume, consistentReads)
DetermineMaxReadsPerSecondForTableMultiGet(tableName, proportionOfThroughputToConsume, consistentReads, alreadyPrefixed)
DetermineMaxReadsPerSecondForMultiGet(table, proportionOfThroughputToConsume, consistentReads)
ExecuteQuery(tableName, query, toEntity, tableNameAlreadyPrefixed)
ExecuteQuery(tableName, query, toEntity, maxResultCount, sortDescending, tableNameAlreadyPrefixed)
ReturnYourself(input)
.ctor()
.cctor()
RecordTableThrottling(tableName, exception)
.ctor()
GetTableName()
GetDynamoClientConfig()
GetDynamoClient()
GetIdentityValue(TableName)
GetIdentityValueAsync(TableName)
GetNextIdentityInt(TableName)
GetNextIdentityIntAsync(TableName)
GetNextIdentityLong(TableName)
GetNextIdentityLongAsync(TableName)
.ctor()
.cctor()
GetNextIdentityInt(TableName)
GetNextIdentityIntAsync(TableName)
GetNextIdentityLong(TableName)
GetNextIdentityLongAsync(TableName)
GetNextIdentityInt(TableName)
GetNextIdentityIntAsync(TableName)
GetNextIdentityLong(TableName)
GetNextIdentityLongAsync(TableName)
.ctor()
.cctor()
DecreaseReads(currentProvisioning, percentage, minProvisionedReads, logTag)
DecreaseReads(currentProvisioning, units, minProvisionedReads, logTag)
DecreaseWrites(currentProvisioning, percentage, minProvisionedWrites, logTag)
DecreaseWrites(currentProvisioning, units, minProvisionedWrites, logTag)
GetMinReads(currentProvisioning, minProvisionedReads, logTag)
GetMinWrites(currentProvisioning, minProvisionedWrites, logTag)
.ctor()
CreateContentTemplate(sessionID, name, description)
EditContentTemplate(sessionID, templateID, newName, newDescription)
GetContentTemplates(sessionID)
GetContentTemplatesForSchool(session, schoolID)
GetModuleContentTemplates(sessionID, moduleID)
GetModuleIDsInTemplate(session, templateID)
GetModuleIDsInTemplateAfterValidation(templateID)
GetModuleIDsInMultipleTemplatesAfterValidation(templateIDs)
AddOrRemoveModuleToTemplates(session, moduleID, templateIDs)
SetSchoolContentTemplates(session, schoolID, templates)
SetSchoolContentTemplatesAfterValidation(schoolID, templates)
UpdateFeaturedForTemplateModule(moduleID, templateID, featured)
AddModuleToTemplate(session, moduleID, templateID)
AddModuleToTemplateAfterValidation(moduleID, templateID)
RemoveModuleFromTemplate(session, moduleID, templateID)
RemoveModuleFromTemplateAfterValidation(moduleID, templateID)
GetContentModulesForTemplate(session, templateID, baseLanguage, targetSubject)
GetContentModulesForTemplateAfterValidation(templateID, baseLanguage, targetSubject)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
Clone()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GroupThousands(input)
ApplyApproxProperCase(input)
TidyName(input, applyProperCase)
PrepareCertificatesForCompetition(competition, prizeStructures)
PrepareTeacherCertificationCertificates(lastGenerationDate)
WriteCompetitionCSVs(allSpreadsheets, competition)
WriteTeacherCertificationCSVs(formattedCertificates, schoolSummary, labels)
WriteToCSV(records, filePath)
GenerateCongratulationsLetters(rawData, filenames, competition)
GetBasicUserCertificateDataForCompetition(competition)
FormatStandardCertificates(certificateData, competition, filenames)
GetRawSchoolCertificateDataForCoverCertificates(competition)
FormatSchoolCoverCertificates(certificateData, competition, specialCertsPerSchool)
FormatTeacherCertificates(teacherData, filenames)
PrepareCertificationSummaryForExport(schoolSummary, teachers)
CalculateFileIndexForStudentCertificates(certificateData, filenamePrefix, comparer)
GenerateDictionaryKeyForFilename(userID, schoolID)
TidyRawUserDetails(certificateData)
GetAndFormatSpecialCertificateData(competitors, prizeStructures, competition)
GenerateSpecialCertFileName(competition, certificateNumber, laminate)
ChooseRandomPrizeDrawWinners(competitors, prizeStructures, competition)
ValidateUserIsEligibleForPrize(user, competition)
CheckIfUserHasAnyCustomContentListsInCompetitionSubjects(userID, competition)
GetSchoolDetailsForAddressLabels(competition, schools, specialAwards, boxIDPerSchool)
GenerateAddressLabels(competition, addresses)
CalculateLabelsAndPostageTypePerSchool(addresses)
GetCertificateLevelFromRanking(ranking)
GetDescriptionOfRank(ranking)
.ctor()
.cctor()
GenerateURLForCompetition(competitionCode)
GetCompetitionInfo(compCode, timezoneOffset)
GetCompetitionAndSchoolsInfo(compCode)
RemoveCompetitionAndSchoolsInfoFromCache(compCode)
GenerateCompetitionAndchoolsInfoCacheKey(compCode)
GetCompetitionAndSchoolsInfoFromDatabase(compCode)
GetCompetitionDetailsWithReturnObject(session, compCode)
GetCompetitionDetails(compCode)
GenerateCompetitionDetailsCacheKey(compCode)
RetrieveGetCompetitionDetailsFromDatabase(compCode)
RemoveCompetitionDetailsFromCache(compCode)
GetCompetitions(session, includeFinished)
GetStatsDataSetsFromAllActiveCompetitions()
CreateCompetition(session, hostSchoolID, compCode, compName, description, startDate, endDate, knowledgeDatasetID, scopeType, regionType, isOfficial, alwaysShowClassScoreboard, interschoolPrivacyType)
ModifyCompetition(session, compCode, compName, description, startDate, endDate, scopeType, interschoolPrivacyType, alwaysShowClassScoreboard)
CheckCompetitionCodeUniqueness(session, compCode)
GetSchoolsInCompetition(session, compCode)
AddSchoolsToCompetition(session, compCode, schoolsToAdd, sendAlert, sendEmail)
AddHostSchoolToCompetition(session, competition, hostSchoolID, conn, tran)
AddSchoolsToCompetition(userID, competition, schoolsToAdd, registrationSource, conn, tran)
RemoveSchoolsFromCompetition(session, compCode, schoolsToRemove)
RemoveSchoolsFromCompetition(competition, schoolsToRemove)
RemoveCompetition(sessionID, compCode)
GetRelevantCompetitionsForSchool(session, schoolID)
GetRelevantCompetitionsForUser(session)
GetCurrentCompetitionsForDashboard()
GetCurrentCompetitionsForDashboardFromDatabase()
RemoveCurrentComptitionsForDashboardFromCache()
GetSpecificCompetitionsUserInfo(compCodes, userID)
GetCompetitionPreviewsForFilter(session, schoolID, adminMode)
GetPendingCompetitionInvitationsForSchool(session, schoolID)
JoinCompetition(session, compCode, schoolID)
RegisterSchoolToCompetition(session, compCode, schoolID, acceptedByUserID, isImpersonate)
QuitCompetition(session, compCode, schoolID)
CanSchoolSendInvitations(session, compCode, schoolID)
SendCompetitionInvitations(session, compCode, recipientSchoolIDs, invitedBySchoolID, invitationEmailRecipientInfos, customInvitationMessage)
GetCompetitionTargetSubjects(compCode)
GetSchoolParticipationInfosForCompetition(session, compCode)
UserIsAcceptor(compCode, userID)
UserIsCreator(compCode, userID, creatorName)
SendInvitationEmailToTeachers(invitorName, invitorSchoolName, invitorEmailAddress, recipientInfos, competitionCode, customInvitationMessage, approved, impersonatedSession)
GenerateEmailConfirmationRequestForSupport(invitorName, invitorSchoolName, invitorEmailAddress, recipients, competitionCode, customInvitationMessage)
GenerateInvitationEmails(invitorName, invitorSchoolName, invitorEmailAddress, recipientInfos, competitionCode, customMessage, sendToSupportForCheck, customEmailTemplate, customSubject, customTemplateData, ccSupport, impersonatedSession)
CheckIfCompetitionIsReferrable(competitionCode)
GetInvitationRecipientInfos(session, recipientSchoolIDs, checkUnsubscribed, targetUsers, hasActiveLicence)
GetCompetitionInfoForEmail(competitionCode)
ValidateCompetitionCode(session, competitionCode)
GetInvitationPreviewDataURI(session, competitionCode, invitedBySchoolID, recipientSchoolIDs, customMessage)
GenerateCompetitionCodeFromName(session, competitionName)
EmailSupportForHelp(session, getHelpObject)
SendInvitationTemplate(recipientEmails, competitionName, competitionCode, invitorSchoolName, invitorName)
GetInvitationTemplate(session, competitionCode, invitorSchoolName)
GenerateInvitationTemplate(competitionCode, invitorSchoolName, isHtml)
GetDataSetTargetInfo(session, datasetID)
ResendInvitationEmailsForCompetition(competitionCode, customInvitationMessage, testMode, targetRecipients, customEmailTemplate, customSubject, activeOnly, hasActiveLicence, customTemplateData)
GetEmbeddedHtmlFile(htmlFileLocation)
GetTiedCompetitionInfo(session, compCode)
GetContentRestrictionsForCompetition(session, compCode)
SetContentRestrictionsForCompetition(session, compCode, newRestrictions)
GetUserRestrictionsForCompetition(session, compCode)
SetUserRestrictionsForCompetition(session, compCode, newRestrictions)
GetAllSchoolIDsInCompetition(competitionCode)
MarkCompetitionAsUpdated(comp, updaterUserId)
GetCompetitionMiletonesWithReturnObject(competitionCode)
GetCompetitionMiletones(competitionCode)
GenerateCacheKeyForCompetitionMilestones(competitionCode)
GetCompetitionMiletonesFromDatabase(competitionCode)
GetCompetitionMiletonesWithCountsWithReturnObject(competitionCode)
GetCompetitionMilestonesWithCounts(competitionCode)
GenerateCacheKeyForCompetitionMilestonesWithCounts(competitionCode)
GetCompetitionMilestonesWithCountsFromDatabase(competitionCode)
GetCompetitionExtraInfo(session, competitionCode, datasetID)
DoesUserHaveOtherValidLicenceAfterCompetition(userID, compCode)
GetEndOfCompetitionInfo(session, competitionCode)
GenerateTimeLimitsForCompetition(competitionCode, quotaSeconds)
SubmitEndOfCompetitionFeedback(session, feedback, compCode)
.ctor()
get_Date()
set_Date(value)
.ctor()
get_Score()
set_Score(value)
get_NeedsFrame()
set_NeedsFrame(value)
get_IncludesMedal()
set_IncludesMedal(value)
.ctor()
.ctor()
.ctor()
get_AttnName()
set_AttnName(value)
get_SchoolName()
set_SchoolName(value)
get_SchoolID()
set_SchoolID(value)
get_Address1()
set_Address1(value)
get_Address2()
set_Address2(value)
get_Suburb()
set_Suburb(value)
get_City()
set_City(value)
get_State()
set_State(value)
get_PostCode()
set_PostCode(value)
get_Country()
set_Country(value)
get_LabelText()
set_LabelText(value)
get_CompCode()
set_CompCode(value)
get_PostageType()
set_PostageType(value)
get_SheetID()
set_SheetID(value)
get_BoxID()
set_BoxID(value)
get_StickerID()
set_StickerID(value)
.ctor()
get_SchoolID()
set_SchoolID(value)
get_UserID()
set_UserID(value)
get_CompetitionName()
set_CompetitionName(value)
get_FullName()
set_FullName(value)
get_SchoolName()
set_SchoolName(value)
get_Achievement()
set_Achievement(value)
get_ItemType()
set_ItemType(value)
.ctor()
.ctor()
.ctor()
.ctor()
get_RoundNumberOfSchools()
get_DateRange()
get_LengthInDays()
.ctor()
get_ScoreFormatted()
set_ScoreFormatted(value)
get_QuestionsAnsweredFormatted()
set_QuestionsAnsweredFormatted(value)
get_GlobalRankingFormatted()
set_GlobalRankingFormatted(value)
get_CategoryRankingFormatted()
set_CategoryRankingFormatted(value)
get_TimeSpentFormatted()
set_TimeSpentFormatted(value)
get_Achievement1()
set_Achievement1(value)
get_Achievement2()
set_Achievement2(value)
get_Achievement3()
set_Achievement3(value)
get_Achievement4()
set_Achievement4(value)
get_Achievement5()
set_Achievement5(value)
get_Achievement6()
set_Achievement6(value)
get_Achievement7()
set_Achievement7(value)
get_Achievement8()
set_Achievement8(value)
get_Achievement9()
set_Achievement9(value)
get_Achievement10()
set_Achievement10(value)
get_CreditTotal()
set_CreditTotal(value)
get_BronzeTotal()
set_BronzeTotal(value)
get_SilverTotal()
set_SilverTotal(value)
get_GoldTotal()
set_GoldTotal(value)
get_EliteTotal()
set_EliteTotal(value)
get_TeacherTotal()
set_TeacherTotal(value)
get_SpecialTotal()
set_SpecialTotal(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_BoxID()
set_BoxID(value)
get_CertificateID()
set_CertificateID(value)
get_Filename()
set_Filename(value)
.ctor()
get_UserID()
set_UserID(value)
get_CertificateTitle()
set_CertificateTitle(value)
get_HeaderLine1()
set_HeaderLine1(value)
get_HeaderLine2()
set_HeaderLine2(value)
get_CongratulationText()
set_CongratulationText(value)
get_CertificateLevel()
set_CertificateLevel(value)
get_SchoolID()
set_SchoolID(value)
get_SchoolName()
set_SchoolName(value)
get_FilenameData()
set_FilenameData(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(allowed, reason)
.ctor()
get_RecipientFullname()
.ctor()
.ctor(AlertType, competitionCode, relevantSchool)
.ctor()
get_HasAcceptedInvitation()
get_IsInvited()
get_StateAndCountry()
get_InvitationResponse()
get_ParticipationStatus()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
SetReadableDates(timezoneOffset)
GetReadableDate(date)
.ctor()
SetScoreboardURLs(code)
.ctor()
.ctor()
get_LPScoreboardURL()
get_EPScoreboardURL()
get_IsPublic()
get_IsInterschool()
get_ReferralsAllowed()
IsHostSchool(schoolID)
get_SchoolID()
set_SchoolID(value)
get_SchoolName()
set_SchoolName(value)
get_OverallTotal()
set_OverallTotal(value)
get_FilenameData()
set_FilenameData(value)
.ctor()
get_CountryName()
set_CountryName(value)
get_L1LANG()
set_L1LANG(value)
get_L2LANG()
set_L2LANG(value)
get_L3LANG()
set_L3LANG(value)
get_L4LANG()
set_L4LANG(value)
get_L5LANG()
set_L5LANG(value)
get_L1ENG()
set_L1ENG(value)
get_L2ENG()
set_L2ENG(value)
get_L3ENG()
set_L3ENG(value)
get_L4ENG()
set_L4ENG(value)
get_L5ENG()
set_L5ENG(value)
get_L1MATH()
set_L1MATH(value)
get_L2MATH()
set_L2MATH(value)
get_L3MATH()
set_L3MATH(value)
get_L4MATH()
set_L4MATH(value)
get_L5MATH()
set_L5MATH(value)
get_L1SOC()
set_L1SOC(value)
get_L2SOC()
set_L2SOC(value)
get_L3SOC()
set_L3SOC(value)
get_L4SOC()
set_L4SOC(value)
get_L5SOC()
set_L5SOC(value)
get_L1SCI()
set_L1SCI(value)
get_L2SCI()
set_L2SCI(value)
get_L3SCI()
set_L3SCI(value)
get_L4SCI()
set_L4SCI(value)
get_L5SCI()
set_L5SCI(value)
get_L1OTHER()
set_L1OTHER(value)
get_L2OTHER()
set_L2OTHER(value)
get_L3OTHER()
set_L3OTHER(value)
get_L4OTHER()
set_L4OTHER(value)
get_L5OTHER()
set_L5OTHER(value)
.ctor()
GetFeedback(sessionID, numberToReturn, includeArchived, schoolID)
GetFeedbackForSchool(session, schoolID, numberToReturn, bypassCache, singleDepartmentOnly)
GetFeedbackForTeacherOrAdminAfterValidation(userID, privilegesLevel, schoolID, numberToReturn, bypassCache, singleDepartmentOnly)
GenerateCacheKeyForGetFeedbackForSchool(schoolID, numberToReturn)
GenerateCacheKeyForGetFeedbackForTeacher(schoolID, teacherID, numberToReturn, singleDepartmentOnly)
GenerateCacheKeyForUsersWhoWantToContinuingEP(schoolID)
GetFeedbackForTeacherFromDatabase(schoolID, teacherID, numberToReturn, singleDepartmentOnly)
GetFeedbackByUserFilterForSubjectsInTimePeriodAfterValidation(userFilter, subjectIDs, startDate, endDate)
GetNumberOfStudentsWhoWantToContinueUsingEP(schoolID)
UpdateRow(connection, feedbackID, archived, rating, suggestion)
UpdateFeedbackList(sessionID, feedbackList)
UpdateFeedback(sessionID, feedbackIDs, archive, rating, suggestion)
GetTotalNumberOfFeedback(session)
GetNumberStudentsWantingToContinue(sessionID, schoolID, dataSet)
ContainsSchool(schoolID, schools)
SubmitEPSubjectRequestFeedback(session, selectedSubjects, message)
AddInAppFeedback(SessionID, Feedback, Email)
AddInAppFeedback(SessionID, Feedback, Context, Email)
AddInAppFeedbackStronglyTyped(session, Feedback, Context, Email)
AddFeedback(userID, comment, baseLanguage, targetSubject, moduleID, email, context)
GetFeedbackFilters(context)
GetFeedbackFiltersAsync(context)
GenerateCacheKeyForFeedbackFilters(context)
GetFeedbackFiltersFromDatabase(context)
GetFeedbackFiltersFromDatabaseAsync(context)
ApplyFeedbackFilters(feedback, filters)
getNumberOfWordsInFeedbackComment(feedback)
processFeedbackCommentForFiltering(feedback)
processFeedbackFilter(filter)
getWordCounts(feedback)
getCharacterCounts(processedFeedback)
getNumericCharacterCount(processedFeedback)
IdentifyNonsensicalComment(message, minimumWordLength)
HandleAllOldFeedback()
.ctor()
.cctor()
.ctor()
.ctor()
get_NumberWhoWantMore()
set_NumberWhoWantMore(value)
get_Results()
set_Results(value)
.ctor()
.ctor()
.ctor()
Execute()
.ctor(message)
.ctor(message, innerException)
.ctor()
.ctor(message)
.ctor()
DBQueryAsListOf(sql, parameters, database)
DBQueryAsSingleOrDefault(sql, parameters, database)
DBQueryAsFirstOrDefault(sql, parameters, database)
DBExecute(sql, parameters, database)
.ctor()
.cctor()
.ctor()
get_DB()
.ctor()
CreateDatabaseContext()
.ctor(sessionID)
.ctor()
get_Session()
get_SessionID()
get_UserID()
get_SessionIsValid()
ValidateSessionOrThrow(minimumPrivileges)
ValidateAdminSessionOrThrow()
ValidateStudentSessionOrThrow()
ValidateTeacherSessionOrThrow()
GetSession(sessionID)
CreateDefaultAdminSession()
.ctor()
.ctor()
.ctor(baseData)
MarkFault(faultMessage)
MarkFault(faultMessage, e)
MarkSuccessful()
AsSuccessful()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_SessionID()
set_SessionID(value)
.ctor()
.ctor()
Seconds(delay)
Minutes(delay)
Hours(delay)
Register(task, delayStartBy, repeatEvery)
Start()
Stop()
TestTask()
CheckForNewlyStartedLearnContentTasks()
CheckForNewlyCompletedTasks()
CheckForNewMessagesToSend()
CheckForTasksNeedingMetricsUpdate()
CheckForExpiredIncompleteAssessmentAttempts()
CheckForAssessmentAttemptsNeverStarted()
CheckForAssessmentAttemptsWhichHaveLostConnection()
CheckForCompletedAssessmentAttemptsDueForDynamoDeletion()
CheckForPartiallyMarkedAssessmentAttempts()
CheckForAssessmentAttemptsStuckInFinalisationPhase()
UpdateChronologicalSchoolStats()
FindAndExpireCheckedOutAttemptsDueForAutoExpiry()
UpdateSmartLessonUsageMetrics()
UpdateSmartLessonAttemptsWithChangedStructure()
UpdateSmartLessonAttemptsRequiringStatsUpdates()
UpdateUserSubjectInterests()
CalculateUpcomingAndCurrentNewsFeedItemAssociations()
NotifySupportAboutNewAttemptsOnImportantAssessments(minutesBetweenUpdates)
IdentifyCommonTasks(minuteRange)
CacheAllLiveUserTasks()
PostApplicationUsageStatistics()
UpdateDBScoreboards()
RebuildUserScoreboards()
CleanUpExpiredUserScoreboards()
UpdateSchoolDepartmentAchievementMilestones()
RemoveExpiredSessions()
RemoveExpiredSessionPromises()
UpdateDisplayedSchoolAchievements()
UpdateDepartmentHealthMetrics()
CleanUpTaskMonitoringForExpiredTasks()
IdentifyFailedSQLAgentTasks(windowInMinutes)
CheckSQLServerDiskSpace()
IdentifyUpcomingExpiringDatasets()
IdentifyLicencesExpiringSoon()
SendStudentUsageUpdates()
CheckForNewSharedContentUpdates()
CheckForNewSharedContentDeletes()
CheckForNewSubscribedContentUpdates()
CheckForNewSubscribedContentDeletes()
RemoveExpiredMultiplayerDashUserPresenceItems()
UpdateExternalVideoWhitelist()
CheckExternalVideoValidity()
UpdateSchoolGeolocations()
SendCurrentTimeToPushNotificationChannels()
.cctor()
SecondDelay(value)
.ctor()
SendTeacherReportNotificationForTask(TaskID, TaskEvent)
GenerateTeacherRecipientsForTask(task, includeUsers)
GenerateHTMLTableForUserCompletionGroupings(groupings)
GetTeacherNotificationEmailTemplateModelForTask(task)
GenerateTeacherNotificationForTaskModelCommon(task, taskEvent)
GenerateEarnPointsTeacherNotificationModel(task, taskEvent)
SendTeacherReportNotificationForEarnPointsTask(task, taskEvent)
GenerateLearnContentTeacherNotificationModel(task, taskEvent)
SendTeacherReportNotificationForLearnContentTask(task, taskEvent)
GenerateAssessmentTeacherNotificationModel(task)
SendTeacherReportNotificationForAssessmentTask(task)
GenerateCompleteActivityTeacherNotificationModel(task, taskEvent)
SendTeacherReportNotificationForCompleteActivityTask(task, taskEvent)
CreateHTMLEmailSummaryTable(emailDeliveryInfos)
CreateHTMLDifficultQuestionsTable(difficultQuestions)
CreateHTMLCompleteActivityStatsTable(userStats)
CreateHTMLComparativeCompleteActivityStatsTable(userStatsAtDueDate, userStatsFinal)
CreateHTMLAssessmentStatsTable(userStats, gradingMethod)
CreateHTMLTaskUsersDescription(task, personalPronoun)
CreateHTMLTaskContentDescription(task)
CreateHTMLTopicDescriptionForAssessment(task, test)
CreateHTMLEarnPointsTaskDescription(task, contentDescription)
CreateHTMLLearnContentTaskDescription(task, contentDescription)
CreateHTMLCompleteActivityTaskDescription(task, contentDescription)
SendStudentNotificationEmailAboutTask(taskID, isReminder, taskEvent, notifyTeacher)
GenerateStudentTaskNotificationEmailModel(task, isReminder, taskEvent, taskUsers)
SendStudentNotificationEmailAboutTask(task, isReminder, taskEvent, notifyTeacher)
SendTeacherEmailAboutTaskNotificationToStudent(task, studentSampleSubject, sampleStudentModel, allStudents, emailRecipientUserIDs)
GenerateTeacherNotificationAboutEmailsToStudentEmailTemplateModel(task, emailRecipientUserIDs, allStudents, studentSampleSubject, studentSampleModel)
GenerateStudentAssessmentTaskNotificationEmailModel(task, test, context, isReminder, taskEvent)
SendStudentNotificationEmailAboutAssessmentTask(task, isReminder, taskEvent, notifyTeacher)
CreateAssessmentTaskMarkingRepetitionDescription(task)
CreateAssessmentTaskMarkingAggregationDescription(task)
GenerateAssessmentTaskMarkingDescription(task, firstPersonPronoun, thirdPersonPronoun)
SendSupportTeamNotificationEmailAboutNewTask(session, task)
GetTaskEmailInfoForUsers(task, includePercentComplete)
UpdateScheduledNotificationStatus(NotificationID, Status)
.ctor()
.cctor()
GenerateLearnContentTaskProgressStats(TaskID, UpdateType)
GetLearnContentTaskProgressStatsFromStatsDB(contentFilter, userFilter, activityFilter, knowledgeSetID, targetStarLevel, requireLearningInAllSelectedActivitySubtypes)
GetLearnContentTaskStarsEarntForSingleUserFromStatsDB(userID, contentFilter, activityFilter, knowledgeSetID, targetStarLevel, requireLearningInAllSelectedActivitySubtypes)
GenerateActivitySubtypeWhereClause(filter, Prefix)
GenerateLearnContentTaskProgressStatsForUserAndSpecificTasks(UserID, targetTasks)
SummarizeTaskUserProgress(TaskID, TaskEvent, RecalculateLearnContentTaskUserProgress)
GenerateDataForTaskUserProgressSnapshot(task, snapshot)
GenerateDataForCompleteActivityTaskUserProgressSnapshot(task, snapshot)
FindOrCreateSnapshotForTask(TaskID, TaskEvent, SnapshotDataType, SnapshotStartingStatus, DataSetID, OverwriteExistingSnapshot)
GetTaskProgressOverviewForMultipleTasks(session, taskIDs, IncludeLateSubmissions)
GetTaskProgressOverviewForMultipleTasksAfterValidation(tasks, IncludeLateSubmissions)
GetTaskProgressOverviewForTasksOfSpecificTypeFromLiveData(tasks, taskType, IncludeLateSubmissions)
GetTaskProgressOverviewForCompleteActivityTasksFromLiveData(tasks)
GetNumberOfStudentsInMultipleTasks(tasks)
GetStudentIDsInMultipleTasks(tasks)
GetTaskProgressOverviewsFromSnapshots(tasks, IncludeLateSubmissions)
GetTaskProgressOverviewsFromSnapshots(tasks, TaskEvent)
GetUserTaskLiveUserProgressForCompleteActivityTask(session, taskID, filteredClassIDs)
GetUserTaskLiveUserProgressForLearnContentTask(session, taskID, filteredClassIDs)
GetUserTaskLiveUserProgressForEarnPointsTask(session, taskID, filteredClassIDs)
GetMostDifficultQuestionsForAssessmentTask(task, usersFilter, numberOfQuestions)
GetMostDifficultQuestionsForTask(task, usersFilter, numberOfQuestions)
DetermineWhichStatsSourceToChoose(task, IncludeLateSubmissions)
GetUserStatsForTask(task, usersFilterID, includeLateSubmissions)
GetUserStatsForLearnContentTask(task, usersFilterID, IncludeLateSubmissions)
GetUserStatsForEarnPointsTask(task, usersFilterID, IncludeLateSubmissions)
GetUserStatsForAssessmentTask(task, usersFilterID)
GetUsersDetailsFromUserFilter(filter)
GetUsersDetailsFromUserFilter(usersCachedResultID)
GetSnapshotIDForCompleteActivityTask(taskID, taskEvent)
GetUserStatsForCompleteActivityTaskFromSnapshot(task, usersFilterID, snapshotID)
GetUserStatsForCompleteActivityTaskFromLiveData(task, usersFilterID)
GetProgressReportInfoForEarnPointsTask(task, filteredClassIDs)
GetProgressReportInfoForEarnPointsTask(session, TaskID, filteredClassIDs)
GetProgressReportInfoForLearnContentTask(task, filteredClassIDs)
GetProgressReportInfoForLearnContentTask(session, TaskID, filteredClassIDs)
GetProgressReportInfoForAssessmentTask(task, filteredClassIDs)
GetProgressReportInfoForAssessmentTask(session, TaskID, filteredClassIDs)
GetProgressReportInfoForCompleteActivityTask(task, filteredClassIDs)
GetProgressReportInfoForCompleteActivityTask(session, TaskID, filteredClassIDs)
GetSmartLessonProgressReportForCompleteActivityTask(session, TaskID, ActivityID, filteredClassIDs)
CheckWhetherSmartLessonReportHasNewData(session, TaskID, ActivityID, LastKnownUpdate, filteredClassIDs)
GetSmartLessonProgressReportForCompleteActivityTaskForSpecificUser(session, TaskID, ActivityID, UserID)
CheckWhetherSmartLessonReportForSpecificUserHasNewData(session, TaskID, ActivityID, UserID, LastKnownUpdate)
GetAnswerReviewsReportForCompleteActivityTask(session, TaskID, filteredClassIDs)
GetAnswerReviewsReportForCompleteActivityTask(task, filteredClassIDs)
GetSmartLessonProgressReportForClasses(session, ActivityID, classIDs, periodStartDate, periodEndDate)
GetSmartLessonProgressReportForSpecificUser(session, ActivityID, UserID, periodStartDate, periodEndDate)
GetCommonMistakesForCompleteActivityTask(task, activityID, sectionID, contentID, filteredClassIDs)
GetCommonMistakesForCompleteActivityTask(session, taskID, activityID, sectionID, contentID, filteredClassIDs)
GetCommonMistakesForCompleteActivityTaskForSpecificUser(session, taskID, userID, activityID, sectionID, contentID)
GetSmartLessonCommonMistakesForClasses(session, ActivityID, classIDs, periodStartDate, periodEndDate, sectionID, contentID)
GetSmartLessonCommonMistakesForSpecificUser(session, ActivityID, userID, periodStartDate, periodEndDate, sectionID, contentID)
GetUserAnswersForCompleteActivityTask(task, activityID, sectionID, contentID, mostRecentOnly, filteredClassIDs)
GetUserAnswersForCompleteActivityTask(session, taskID, activityID, sectionID, contentID, mostRecentOnly, filteredClassIDs)
GetUserAnswersForCompleteActivityTaskForSpecificUser(session, taskID, userID, activityID, sectionID, contentID, mostRecentOnly)
GetSmartLessonUserAnswersForClasses(session, ActivityID, classIDs, periodStartDate, periodEndDate, sectionID, contentID, mostRecentOnly)
GetSmartLessonUserAnswersForSpecificUser(session, ActivityID, userID, periodStartDate, periodEndDate, sectionID, contentID, mostRecentOnly)
GetMultipleHomeworkTasksSummaryReportForClasses(session, classIDs, periodStartDate, periodEndDate, includeHomework, includeAssessments, includeTasksAssignedToTargetStudents)
GetMultipleHomeworkTasksSummaryReport(tasks, cachedUserFilter, stripOutStudentTaskResults)
DeleteSnapshotForTaskAfterValidation(TaskID, TaskEvent)
DeleteAllSnapshotsAssociatedWithTask(TaskID, conn, tran)
GenerateSnapshotsForAllAppropriateTasks()
.ctor()
UpdateTaskSchoolLookups(TaskID, SchoolIDs, conn)
RemoveAllTaskSchoolLookups(TaskID, conn)
UpdateTaskClassLookups(TaskID, ClassIDs, conn)
RemoveAllTaskClassLookups(TaskID, conn)
AddTaskUserLookups(TaskID, UsersToAdd, conn)
UpdateTaskUserLookups(TaskID, UserIDs, conn)
RemoveTaskUserLookups(TaskID, UsersToRemove, conn)
RemoveAllTaskUserLookups(TaskID, conn)
UpdateTaskModuleLookups(TaskID, ModuleIDs, conn)
RemoveAllTaskModuleLookups(TaskID, conn)
UpdateTaskListLookups(TaskID, ListIDs, conn)
RemoveAllTaskListLookups(TaskID, conn)
UpdateTaskTestLookups(TaskID, TestIDs, conn)
RemoveAllTaskTestLookups(TaskID, conn)
UpdateTaskSubjectLookups(TaskID, SubjectIDs, conn)
RemoveAllTaskSubjectLookups(TaskID, conn)
UpdateTaskActivityTypeLookups(TaskID, ActivityTypeIDs, conn)
RemoveAllTaskActivityTypeLookups(TaskID, conn)
UpdateTaskActivitySubtypeLookups(TaskID, ActivitySubtypeIDs, conn)
RemoveAllTaskActivitySubtypeLookups(TaskID, conn)
RemoveAllTaskTargetUserLookups(TaskID, conn)
RemoveAllTaskTargetContentLookups(TaskID, conn)
RemoveAllTaskTargetActivityLookups(TaskID, conn)
.ctor()
GetCurrentTasksForUser(session)
GetCurrentTasksBaseDataForUser(UserID)
GetMultipleTaskDataForUser(TaskIDs, databaseFetchFunction)
GenerateCacheKeyForTaskDataForUser(ID)
GetMultipleAssessmentTasksInfoForUser(TaskInstanceIDs)
RetrieveMultipleAssessmentTasksInfoForUserFromDatabase(TaskInstanceIDs)
GetMultipleLearnContentTasksInfoForUser(TaskInstanceIDs)
RetrieveMultipleLearnContentTasksInfoForUserFromDatabase(TaskInstanceIDs)
GetMultipleEarnPointsTasksInfoForUser(TaskInstanceIDs)
RetrieveMultipleEarnPointsTasksInfoForUserFromDatabase(TaskInstanceIDs)
GetMultipleCompleteActivityTasksInfoForUser(TaskInstanceIDs)
GetUserTaskListProgressDetails(session, taskID)
GetLearnContentAndEarnPointsTaskListDetailsAfterValidation(userID, task)
GetCompleteActivityTaskListDetailsAfterValidation(userID, task)
RetrieveMultipleCompleteActivityTasksInfoForUserFromDatabase(TaskInstanceIDs)
GetTasksOwnedByUser(userID, oldestExpiryDate)
GetTasksOwnedByUser(session, excludeOldTasks)
GetTasksBaseDataForTasksOwnedByUser(UserID, oldestExpiryDate)
GetTaskCountsForClasses(session, classIDs, oldestExpiryDate, limitToAssessments)
GetTasksForClass(session, ClassID, excludeOldTasks)
GetTasksForClasses(session, classIDs, oldestExpiryDate)
GetTasksForClassesAndSubjectsAfterValidation(classIDs, BaseLanguageID, TargetSubjectIDs, expiryDateMoreRecentThan, startDateOlderThan)
GetClassTaskCountsAfterValidation(ClassIDs, expiryDateMoreRecentThan, startDateOlderThan, limitToAssessments)
GetTasksBaseDataForTasksDirectedAtClasses(ClassIDs, BaseLanguageID, TargetSubjectIDs, expiryDateMoreRecentThan, startDateOlderThan)
CreateGenericTask(session, Type, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, targetUsersType, targetContentType, targetActivitiesType, timezoneOffset, estimatedTime, brand, emailStudents, emailParents, emailTeachers, notifyTeacher, baseLanguage, targetSubject, EnableLiveActivityFeed, trackStudentFocus, requireFullScreenMode, focusLossWarningStyle, disableCheers, parentTask, conn, tran)
SetDataSetInfoForTask(task, KnowledgesetID, ScoreDatasetID, ownsKnowledgeDataSet, ownsScoreDataset, conn, tran)
canSessionAccessTask(session, taskID)
isUserSubscribedToTask(UserID, TaskID)
isUserFilterValidForTaskEditor(session, UserFilter)
isTaskTargettedAtUser(session, task)
CreateAssessmentTask(session, creationDetails, cleanUpClientData)
CreateLearnContentTask(session, creationDetails)
CreateEarnPointsTask(session, creationDetails)
CreateCompleteActivityTask(session, creationDetails)
SetTargetUsersForTask(session, TaskID, filter)
SetTargetUsersForTask(task, filter)
ChangeTaskUserType(task, newTargetUsersType)
SetTargetContentForTask(task, filter)
ChangeTaskContentType(task, newTargetContentType)
UpdateLearnContentTaskContentMetadata(task)
RecalculateLearnContentTaskMetrics(TaskID, ForceRecalculationOfUserStats)
SetTargetActivitiesForTask(session, TaskID, filter)
SetTargetActivitiesForTask(task, filter)
ChangeTaskActivityType(task, newTargetActivityType)
UpdateLearnContentTaskActivitiesMetadata(task)
DetermineNumberOfActivitySubtypesTargettedByLearnContentTask(targetSubjects, requireLearningInAllSelectedActivitySubtypes, targetActivities, targetActivitySubtypeIDs)
DetermineNumberOfActivitySubtypesThatRequireSoundFiles(RequireLearningInAllSelectedActivitySubtypes, TargetActivities, TargetActivitySubtypeIDs)
UpdateNotificationsForTask(task)
SendImmediateReminderEmailToStudentsAboutTask(session, taskID)
SendImmediateReminderEmailToStudentsAboutTaskAfterValidation(task)
ValidateThatUserHasPrivilegesToEditTask(session, task)
ValidateThatUserHasPrivilegesToViewTaskData(session, task)
ValidateThatUserHasPrivilegesToViewMultipleTasksData(session, tasks)
ModifyCoreTaskData(task, newData)
UpdateDateInformationForTask(task, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, TimezoneOffset)
ReopenClosedTaskAfterValidation(task, newFinalSubmissionDate, newDueDate)
ReopenLearnContentTask(session, taskID, newFinalSubmissionDate)
ReopenEarnPointsTask(session, taskID, newFinalSubmissionDate)
ReopenCompleteActivityTask(session, taskID, newFinalSubmissionDate)
ReopenAssessmentTask(session, taskID, newFinalSubmissionDate, markSubsequentAttemptsAsOverdue)
ModifyAssessmentTaskSpecificData(task, testID, ownsTest, numberOfAttemptsAllowed, gradeAggregationStyle, assessorType, requiresAccessCode, accessCode, studentResultDisplayPermissions, teacherResultDisplayPermissions, securityLevel, overrideTimeAllowed, overrideTimeAllowedForDisconnections, resultPublicationStatus, allowTeacherAttempts)
ModifyEarnPointsTaskSpecificData(task, TargetPoints, TimerStyle, ReviewQuizUnlockStyle, DisableSoundInReadingMode)
ModifyLearnContentTaskSpecificData(task, TargetStarLevel, RequireLearningInAllSelectedActivitySubtypes, TimerStyle, ReviewQuizUnlockStyle, DisableSoundInReadingMode)
ModifyCompleteActivityTaskSpecificData(task, newData)
DeleteAssessmentTask(session, TaskID, DeleteUnderlyingTest)
DeleteTask(session, TaskID)
PerformHardDeleteOfAssessmentTaskAfterValidation(session, task, deleteUnderlyingTest)
PerformHardDeleteOfTaskAfterValidation(task)
PerformSoftDeletionOfTaskAfterValidation(task)
UpdateSoftDeletionStatusOfTaskAfterValidation(task, shouldBeDeleted)
RemoveTaskFromCache(TaskID)
RemoveMultipleTasksFromCache(TaskIDs)
GetTaskForAdmin(session, TaskID)
GetTask(TaskID)
GetAssessmentTaskForAdmin(session, TaskID)
GetAssessmentTask(TaskID)
GetEarnPointsTaskForAdmin(session, TaskID)
GetEarnPointsTask(TaskID)
GetLearnContentTaskForAdmin(session, TaskID)
GetLearnContentTask(TaskID)
GetCompleteActivityTaskForAdmin(session, TaskID)
GetCompleteActivityTask(TaskID)
GenerateCacheKeyForTask(TaskID)
GetTaskFromDatabase(TaskID)
ConvertGenericTaskToTypeSpecificTask(genericTask, conn)
GetAssessmentSpecificTaskData(TaskID, conn)
GetEarnPointsSpecificTaskData(TaskID, conn)
GetLearnContentSpecificTaskData(TaskID, conn)
GetCompleteActivitySpecificTaskData(TaskID, conn)
GetTargetContentInfoForTask(task, conn)
GetTargetActivityInfoForTask(task, conn)
GetTargetClassesInfoForMultipleTasksDataForUser(tasks, conn)
GetTargetUsersInfoForTask(task, conn)
GetUserProgressForEarnPointsTask(session, TaskID)
GetUserProgressForEarnPointsTaskAfterValidation(UserID, TaskID)
GetUserProgressForAssessmentTask(session, TaskID)
GetUserProgressForAssessmentTaskAfterValidation(UserID, TaskID)
GetUserProgressForLearnContentTask(session, TaskID)
GetUserProgressForLearnContentTaskAfterValidation(UserID, TaskID)
GetUserProgressForCompleteActivityTaskAfterValidation(userID, taskID)
GetUserProgressForCompleteActivityTask(session, taskID)
AttachUserProgressToMultipleEarnPointsTasksForUser(UserID, tasks)
AttachUserProgressToMultipleAssessmentTasksForUser(UserID, tasks)
UseAttemptTimeAllowed(status)
AttachUserProgressToMultipleLearnContentTasksForUser(UserID, tasks)
AttachUserProgressToMultipleCompleteActivityTasksForUser(UserID, tasks)
DetermineProgressForCompleteActivityResults(results, referencedActivities)
UpdateTaskDateLastUpdated(task)
ModifyLearnContentTask(session, newData)
ModifyEarnPointsTask(session, newData)
ModifyAssessmentTask(session, newData)
UpdateAssessmentTaskAccessCode(session, taskID, newAccessCode)
UpdateAssessmentTaskResultPublicationStatus(session, taskID, newResultPublicationStatus)
ModifyCompleteActivityTask(session, newData)
RecalculateEstimatedTimeForEarnPointsTask(task)
RecalculateEstimatedTimeForLearnContentTask(task)
RecalculateEstimatedTimeForAssessmentTask(task, test)
RecalculateEstimatedTimeForCompleteActivityTask(task)
UpdateEstimatedTimeForTask(task, Estimate)
GetNotificationsForTask(session, TaskID)
GetNotificationsForTask(TaskID)
GetSpecificTasks(session, taskIDs)
GetMultipleUserTasks(taskIDs)
CacheMultipleUserTasks(taskIDs)
GroupTasksByType(tasks)
GetMultipleTasksGroupedByType(taskIDs)
GetMultipleTasksGroupedByTypeWithReturnObject(taskIDs)
EstimateTimeForLearnContentTask(contentFilter, activityFilter, targetStarLevel, requireLearningInAllSelectedActivitySubtypes, numberOfQuestionsWithSoundFiles)
EstimateTimeForEarnPointsTask(ContentFilter, ActivityFilter, TargetScore)
EstimateTimeForAssessmentTask(test)
EstimateTimeForCompleteActivityTask(session, ContentFilter, filterSections, sectionFilters)
EstimateTimeForCompleteActivityTask(ContentFilter, filterSections, sectionFilters)
UpdateLearnContentTaskTargetStars(task)
DetermineLearnContentTaskTargetStarsForTranslationListTask(task)
DetermineLearnContentTaskTargetStarsForFactListTask(task)
CalculateNumberOfTranslationsWithSoundFilesFromCachedContentIDs(ContentIDsCachedResult)
RecalculateAllLearnContentTasksTotalStars()
GetTestIDForAssessmentTask(session, assessmentTaskID)
GetTestIDForAssessmentTask(assessmentTaskID)
GetAssessmentTaskIDFromAssessmentContext(assessmentContext)
GetAssessmentTaskFromAssessmentContext(assessmentContext)
GetTestForAssessmentTask(session, assessmentTaskID)
GetQuickTestForAssessmentTask(session, assessmentTaskID)
EstimateTimeForAssessmentTaskDataSelection(TargetListIDs, TranslationDirection)
GetScoresDataSetsForAllCurrentTasks()
FlushAllTasksFromCache()
FindExistingActivityAttemptsForCompleteActivityTask(task)
GetUserIDsReferencedByUserFilter(filter)
FindExistingActivityAttemptsForCompleteActivityTask(taskID, ContentFilter, UserFilter, hasUserSpecificActivities, userSpecificActivities, Cutoff)
ValidateCompleteActivityContentFilter(filter)
EnsureReasonableAssessmentTaskAccessCode(AccessCode)
GenerateAssessmentTaskAccessCode()
GetAllLiveAssessmentTasksForSchool(session, filteredClassIDs)
GetStudentDetailsForAssessmentTasks(session, taskIDs)
ValidateThatSessionCanMonitorTasks(session, taskIDs, throwOnFail)
GetCurrentAssessmentAttemptDetailsForAssessmentTasks(session, requests)
GetCurrentAssessmentAttemptDetailsForAssessmentTasksAfterValidation(requests)
GetCurrentAssessmentAttemptDetailsForAssessmentTaskForUser(session, taskID, userID)
GetDemoTaskDetailsWithReturnObject()
GetDemoTaskDetails()
GetDemoTaskDetailsFromDatabase()
GetUserDetailsForTask(session, taskID, restrictToStudents)
GetUserOnlineStatusForTask(session, taskID, restrictToStudents)
GetUserOnlineStatusForTaskAfterValidation(task, restrictToStudents)
GetTaskMonitoringStatus(session, taskID)
GetTaskMonitoringStatus(taskID)
RehomeModuleReferencesForTasks(taskIDs, oldModuleID, newModuleID)
RehomeModuleReferencesForTask(taskID, oldModuleID, newModuleID)
RehomeModuleReferencesForTask(task, oldModuleID, newModuleID)
ConvertMultipleLearnContentTasksToCompleteActivityTasks(taskIDs)
ConvertLearnContentTaskToCompleteActivityTask(oldTask, includePreviousAttempts, previousAttemptsCutoff)
UpdateCompleteActivityTaskToReferenceMostRecentActivityAttempts(taskID)
UpdateCompleteActivityTaskToReferenceMostRecentActivityAttempts(task)
UpdateCompleteActivityTaskToReferenceMostRecentActivityAttempts(taskID, ContentFilter, UserFilter, Cutoff)
RemoveAllUserTasksFromCache(liveTasksOnly)
RemoveDemoTasksFromCache()
UndoSoftDeletionOfTask(taskID)
UpdateAllTaskListSorting()
UpdateTaskListSorting(taskID)
RemoveTasksForClassesFromCache(classIDs)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_Results()
set_Results(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
FromTasksForUserReturnObject(tasks)
.ctor()
.ctor()
get_UserID()
set_UserID(value)
get_PercentComplete()
set_PercentComplete(value)
get_IsStruggling()
set_IsStruggling(value)
get_StrugglingActivityId()
set_StrugglingActivityId(value)
.ctor()
CleanUpClientData(referencedTest)
.ctor()
.ctor()
Clone()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ConvertToSmartLessonSectionFilters(records)
FromSmartLessonSectionFilters(TaskID, data)
GenerateDBDataTable(records)
.ctor()
.ctor()
ShallowCopy()
FilterTaskDataForSpecificUser(userID)
.ctor()
get_HasValidFilteredSections()
get_HasValidUserSpecificActivities()
FromTask(task, includePreviousAttempts, previousAttemptsCutoff, numberOfActivities, timerStyle, reviewQuizUnlockStyle, hasFilteredSections, hasUserSpecificActivities, filteredSections, userSpecificActivities, emailStudents, emailParents, emailTeachers, notifyTeacher)
FromTask(task, specificData)
ToCompleteActivityTaskSpecificData()
Clone()
GetActivityIDsForUser(userID, fallBackToAllLists)
GetNumberOfActivitiesForUser(userID, fallBackToAllLists)
GetFilteredSectionsForActivity(activityID)
GetUsersAssociatedWithActivity(activityID)
.ctor()
.ctor()
ConvertToMapItems(records)
FromMapItems(TaskID, data)
GenerateDBDataTable(records)
.ctor()
get_PercentComplete()
set_PercentComplete(value)
get_Started()
set_Started(value)
get_HasStarted()
get_HasMadeSignificantProgress()
get_HasCompletedTask()
get_TotalNumberOfAttempts()
get_Score()
get_PercentCorrect()
ToModel()
.ctor()
get_UserID()
get_Score()
get_HasStarted()
get_HasMadeSignificantProgress()
get_PercentComplete()
get_HasCompletedTask()
get_TotalNumberOfAttempts()
get_PercentCorrect()
ToModel()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetAllTasks()
GetAllLearningTasks()
.ctor()
ShallowCopy()
.ctor()
FromTask(task, testID, testType, ownsTest, assessmentContext, numberOfAttemptsAllowed, gradeAggregationStyle, assessorType, requiresAccessCode, accessCode, studentResultDisplayPermissions, teacherResultDisplayPermissions, securityLevel, overrideTimeAllowed, overrideTimeAllowedForDisconnections, resultPublicationStatus, allowTeacherAttempts, emailStudents, emailParents, emailTeachers, notifyTeacher)
FromTask(task, specificData)
Clone()
.ctor()
.ctor()
.ctor()
.ctor()
ToModel(assessorType)
.ctor()
ShallowCopy()
.ctor()
FromTask(task, targetPoints, timerStyle, reviewQuizUnlockStyle, disableSoundInReadingMode, emailStudents, emailParents, emailTeachers, notifyTeacher)
FromTask(task, specificData)
Clone()
.ctor()
.ctor()
.ctor()
get_CorrectAnswers()
set_CorrectAnswers(value)
get_IncorrectAnswers()
set_IncorrectAnswers(value)
get_Score()
set_Score(value)
get_TargetScore()
set_TargetScore(value)
get_HasStarted()
get_HasMadeSignificantProgress()
get_PercentComplete()
get_HasCompletedTask()
get_TotalNumberOfAttempts()
get_PercentCorrect()
ToModel()
.ctor()
ShallowCopy()
.ctor()
FromTask(task, targetStarLevel, requireLearningInAllSelectedActivitySubtypes, numberOfLists, numberOfQuestions, numberOfQuestionsWithSoundFiles, numberOfActivitySubtypes, targetStars, timerStyle, reviewQuizUnlockStyle, disableSoundInReadingMode, emailStudents, emailParents, emailTeachers, notifyTeacher)
FromTask(task, specificData)
Clone()
.ctor()
CopyAllValues(donor, recipient)
get_hasEnded()
get_hasStarted()
get_isCurrentlyOpen()
.ctor()
.ctor()
.ctor()
.ctor()
get_CorrectAnswers()
set_CorrectAnswers(value)
get_IncorrectAnswers()
set_IncorrectAnswers(value)
get_Score()
set_Score(value)
get_CurrentStars()
set_CurrentStars(value)
get_TargetStars()
set_TargetStars(value)
get_HasStarted()
get_HasMadeSignificantProgress()
get_PercentComplete()
get_HasCompletedTask()
get_TotalNumberOfAttempts()
get_PercentCorrect()
ToModel()
.ctor()
.ctor()
.ctor(taskID, taskEvent, type, scheduledDate, sendEmails, createAppNotifications, notifyTeacher)
Compare(item1, item2)
CopyAllValues(donor, recipient)
GenerateContentFilter()
GenerateActivityFilter()
CloneLists()
.ctor()
CopyAllValues(donor, recipient)
GenerateUserFilter()
.ctor()
.ctor()
.ctor()
get_PercentAccuracy()
get_TotalAnswers()
ToModel()
.ctor()
.ctor(sessionID)
ClearCache()
GetReferenceData()
LoadPeriodsFromDatabase()
LoadCurrenciesFromDatabase()
LoadItemsFromDatabase()
GetPeriodNameFromID(periodID)
GetPeriod(periodID)
GetPeriodFromDatabase(periodID)
<GetReferenceData>b__5_0()
<GetReferenceData>b__5_1()
<GetReferenceData>b__5_2()
.ctor(sessionID)
.ctor()
GetRevenueSummary(schoolID)
GetRevenueDetails(schoolID)
GetNextTargetPeriodIDForConfirmationFromDatabase(userID, schoolID)
GetNextTargetPeriodIDForConfirmation(userID, schoolID)
GenerateCacheKeyForNextPeriodID(userID, schoolID)
RemoveNextPeriodIDForUsersFromCache(sessionID, schoolID, authenticate)
GenerateSelfConfirmationPrompts(userID, schoolID, nextPeriod)
GetRevenueSelfConfirmationData()
GetRevenueSelfConfirmationData(userID, schoolID)
GetHighLevelUsageMetricsForDepartmentFromSalesPeriod(schoolID, departmentID, nextPeriodID)
GetRevenueConfirmationRequestHistoryForUser(userID, schoolID, periodID)
IsTeacherDueToBeAskedAboutRevenue(history)
GetPublicRevenueDetailsForTeacher(userID, schoolID, nextPeriod)
GetEligibilityStatusForDepartments(schoolID)
GetEligibilityStatusForDepartmentsAfterValidation(schoolID)
StoreEligibilityStatusChangesForDepartment(statuses)
StoreEligibilityStatusChangesForDepartmentAfterValidation(statuses)
StoreRevenueSelfConfirmationOutcome(schoolID, departmentID, periodID, userID, outcomeID, comparisonData)
StoreRevenueSelfConfirmationOutcomeAfterValidation(schoolID, departmentID, periodID, userID, outcomeID, comparisonData)
StoreRevenueSelfConfirmationOutcomeToDatabase(schoolID, departmentID, periodID, userID, outcomeID)
StoreRevenueSelfConfirmationOutcomeAsCRMComment(schoolID, departmentID, periodID, userID, outcomeID, formattedChanges, outcomeString, teacherData)
SendSlackNotificationAboutConfirmationOutcome(periodID, schoolID, departmentID, outcomeID, formattedChanges, outcomeString, teacherData, leadOwner)
SendRevenueConfirmationRecordToTeacher(schoolID, departmentID, periodID, userID, outcomeID, htmlFormattedChanges, outcomeString, teacherData, leadOwner)
FormatRevenueDetailLineItems(responseData, outcomeID, formatHTML, includeNotes)
GetHumanReadableNameForItemCode(itemCode, quantity)
StoreRevenueDetails(schoolID, schoolPeriods, revenueDetails)
ValueToNZD(value, currency)
GetItemCodesWithRevenueType(RevenueTypeCode)
GenerateCacheKeyForItemCodesWithRevenueType(RevenueTypeCode)
GetItemCodesWithRevenueTypeFromDatabase(RevenueTypeCode)
ValidateSchoolPeriodConcurrencyOrThrow(oldRecord, newValue)
GenerateResubscriptionReminderEmailsForTeachers(periodID, campaignCode)
GenerateResubscriptionPromptModel(revenueInfo, user, currencyCodes)
CreateActionLinkParameters(revenueInfo, outcome, nextPeriod, deferralDays)
UpdateEligibilityStartDateForSelfConfirmation(schoolID, departmentID, periodID, newStartDate)
ConfirmResubscriptionPeriodIsStillOpen(userID, schoolID, departmentID, periodID)
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(user, period, oldCurrency, newCurrency, currentDetailRecord, detail, changeDate)
get_Description()
get_RevenueTypeName()
get_IsProjected()
get_SamePrice()
get_SameQuantity()
get_SameItem()
get_SameLikelihood()
get_SameCurrency()
get_SameDepartment()
IdentifyChanges()
DescribeDepartment(departmentID)
Apply()
get_Description()
.ctor()
.ctor()
CleanData()
.ctor()
.ctor(schoolDetailLines)
get_SummaryLines()
SummariseLinesByPeriodID(schoolDetailLines)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetDynamoNavigationEventsTable()
StoreEvent(record)
StoreMultipleEvents(records)
GetRecordsForUser(userID, sessionID)
GetMostRecentRecordForUser(userID)
GetMostRecentRecordForSession(userID, sessionID)
DeleteMultipleNavigationRecords(records)
.ctor()
.cctor()
RecordUserNavigation(Session, request)
RecordNewUserNavigationEventAfterValidation(record)
MigrateAllUserNavigationRecordsForClosedSessionIntoDatabase(session)
GetCountOfNavigationRecordsForSessionInDB(UserID, SessionID, StartDate, EndDate)
BulkCopyNavigationRecordsIntoDB(records)
GetMostRecentNavigationEventForUser(session, userID)
RecordKeyUserActionAfterValidation(UserID, ActionID)
.ctor()
.cctor()
UpdateLastActivityForUser(session, classID, moduleID, listID, taskID)
UpdateLastActivityForUser(userID, baseLanguage, targetSubject, classID, moduleID, listID, taskID)
UpdateSessionFocusedActivity(session, classID, moduleID, activityID, taskID)
GetRecentActivitiesForUser(userID)
GetRecentActivitiesForUserGroupedByClass(userID, classes)
GetRecentActivityIDsForUserAndClass(userID, classID)
GetRecentActivitiesForClasses(classIDs)
GenerateCacheKeyForClassRecentActivities(classID)
GetRecentActivitiesForClassesFromDatabase(classIDs)
GetRecentActivitiesForUserAndClasses(session, classIDs)
.ctor()
GetDynamoUserProfileFactsTable()
SetValues(session, facts)
SetValuesAfterValidation(userID, facts)
SetValuesForMultipleUsersAfterValidation(userIDs, facts)
GetValues(session, keys)
GetValuesAfterValidation(userID, keys)
GetAllValuesInPaths(session, paths)
GetAllValuesInPathsAfterValidation(userID, paths)
GetAllValuesInPath(session, path)
GetAllValuesInPathAfterValidation(userID, path)
GetAllKeysInPath(session, path)
GetAllKeysInPathAfterValidation(userID, path)
DeleteKeys(session, keys)
DeleteKeysAfterValidation(userID, keys)
DeleteAllKeysInPaths(session, paths)
DeleteAllKeysInPathsAfterValidation(userID, paths)
DeleteAllKeysInPath(session, path)
DeleteAllKeysInPathAfterValidation(userID, path)
.ctor()
.cctor()
GetContactRoles()
GetContactRolesAsync()
ClearCache()
GetContactRolesFromDatabase()
GetContactRolesFromDatabaseAsync()
GetDepartmentNameAsync(departmentID, fullName)
GetDepartmentNameAsync(departmentIDs)
GetDepartmentIDByShortDescription(codes, departmentsOnly)
GetContactRolesForUser(userID, DepartmentsOnly)
GetContactRolesForUsers(userIDs, DepartmentsOnly)
.ctor()
GetContactsStatsForSchool(session, schoolID)
GetTeacherCertificationLevel(userID, schoolID, updateRecordedLevel)
TeacherNeedsUpdate(userID)
GetTeacherCertificationUserInfoForSchool(session, schoolID)
GetTeacherCertificationUserInfoForSchoolAfterValidation(schoolID, bypassCache)
GetTeacherCertificationUserInfoForSchoolFromDatabase(schoolID)
GetTeacherCertificationLevels()
GetTeacherCertificationLevelsFromDatabase()
.ctor()
PreviewBulkUploadSchoolUsernameMatches(sessionID, schoolID, usersToUpload, options)
CreateUserUploadDataTable(newUsers)
BulkUploadSchool(sessionID, schoolID, pasteInfoList, licenceID, options)
CreateUploadBulkUsersCommand(conn, action, users, options, uploadClassID, matchesSchoolID)
BulkUploadUsers(SessionID, ClassID, newUsers, options, SingleSignonSchool)
AssociateTeachersUsernamesWithClasses(sessionID, schoolID, classRefs, classNameTeachersLookup)
AssociateTeachersNamesWithClasses(sessionID, schoolID, classRefs, classNameTeachersLookup)
GetAllTeacherIDs(sessionID, schoolID, classNameTeachersLookup, classNameTeacherUsernamesLookup)
FindUnavailableUsernamesOutsideSchool(session, schoolID, usernames)
CheckUsersHaveDefaultPassword(session, userIDs)
FindClassesWithIncorrectOrderOfFirstnameAndSurnameColumns(items)
StoreUserAuthenticationIdentifiersToDatabase(authenticationProvider, userIDAndSSOAuthIDs)
StoreUserLTIIdentifiersToDatabase(ltiProvider, userIDAndLTIAuthIDs)
ValidateSSOUserAuthenticationUniqueness(authenticationProvider, userIDAndSSOAuthIDs)
ValidateLTIUserAuthenticationUniqueness(ltiProvider, userIDAndLTIAuthIDs)
StoreParentEmailAddressDetailsToDatabase(userIDAndParentEmailAddress)
GetDatasetGroupDataForSchoolFromDatabase(schoolID)
GetDatasetGroupDataForSchool(session, schoolID)
GenerateCacheKeyForDatasetGroupData(schoolID)
StoreUploadHistoryLogToDatabase(session, item)
StoreUploadHistoryLogToDatabase(item)
StoreUploadCompleteCommentAndNotifySLO(session, schoolID, comment)
RecordClassListUpload(session, uploadDetails)
InsertClassListUploadRecords(userID, details)
SendClassListUploadRequestedEmail(user, school, details)
GenerateClassListFileUploadDetails(fileURLs)
NotifyLeadOwnersAboutNewUploadRequest(session, uploadDetails)
GetSampleUserIdentifiers(session, schoolID, identifierType)
GetSampleUserIdentifiersFromDatabase(schoolID, userType, identifierType, providerID)
DoesUsersDepartmentHaveStudentsEnrolled(session)
DoesUsersDepartmentHaveStudentsEnrolled(userID, schoolID)
.ctor()
.cctor()
ValidateThatITeachAtThisStudentsSchool(teacherID, studentID, db)
ValidateThatITeachAtThisStudentsSchool(teacherID, studentID, conn)
ValidateThatITeachAtThisStudentsSchool(teacherID, studentID)
ValidateThatITeachAtThisStudentsSchoolAsync(teacherID, studentID, conn)
ValidateThatITeachAtThisStudentsSchoolAsync(teacherID, studentID)
ValidateThatITeachAtThisUsersSchoolAsync(teacherID, studentID)
ValidateThatITeachAtThisUsersSchoolAsync(teacherID, studentID, conn)
ValidateThatITeachThisStudent(TeacherID, StudentID, conn)
ValidateThatITeachThisStudent(TeacherID, StudentID)
ValidateThatITeachThisStudentAsync(TeacherID, StudentID, conn)
ValidateThatITeachThisStudentAsync(TeacherID, StudentID)
ValidateThatITeachAtThisSchoolAsync(teacherID, schoolID, conn)
ValidateThatITeachAtThisSchoolAsync(teacherID, schoolID)
ValidateThatITeachAtAllTheseStudentsSchools(teacherID, studentIDs, db)
ValidateThatITeachAtAllTheseStudentsSchools(teacherID, studentIDs, conn)
ValidateThatITeachAtAllTheseStudentsSchoolsAsync(teacherID, studentIDs, conn)
ValidateThatITeachAtAllTheseSchools(teacherID, schools, conn)
ValidateThatITeachAtTheSameSchoolAsThisTeacher(teacherID, targetTeacherID, db)
ValidateThatITeachAtTheSameSchoolAsAllTheseTeachers(teacherID, targetTeacherIDs, conn)
ValidateThatITeachAtTheSameSchoolAsAllTheseTeachersAsync(teacherID, targetTeacherIDs, conn)
ValidateThatITeachAtAllTheseClassesSchools(UserID, ClassIDs)
ValidateThatITeachAtAllTheseClassesSchoolsAsync(UserID, ClassIDs)
ValidateThatITeachAtTheSameSchoolAsThisTeacher(TeacherID, TargetTeacherID, conn)
ValidateThatITeachAtTheSameSchoolAsThisTeacherAsync(TeacherID, TargetTeacherID)
ValidateThatITeachAtTheSameSchoolAsThisTeacherAsync(TeacherID, TargetTeacherID, conn)
ValidateMinimumPrivilegesForUser(UserID, MinPrivileges, conn)
ValidateMinimumPrivilegesForUserAsync(UserID, MinPrivileges, conn)
IsUserAbleToEditThisClass(Session, ClassID, db)
IsUserAbleToEditThisClassAsync(session, classID, conn)
IsUserAbleToEditThisClass(session, classID, conn)
IsUserAbleToEditTheseClasses(Session, ClassIDs, conn)
IsUserAbleToEditTheseClassesAsync(Session, ClassIDs)
IsUserAbleToEditTheseClassesAsync(Session, ClassIDs, conn)
IsUserInAllTheseClassesAsync(Session, ClassIDs)
IsUserInAllTheseClassesAsync(Session, ClassIDs, conn)
RestrictSchoolsToThoseUserIsAbleToEdit(Session, SchoolIDs, conn)
DoesUserTeachAtThisSchool(session, schoolID, db)
ValidateThatICanEditContent(session, contentID)
GetMaxPrivilegesLevelForUser(userID)
GetMaxPrivilegesLevelForUserAsync(userID)
GetAllTeacherIDsThatTeachInSchoolsThatIDo(UserID)
GetAllClassIDsOfSchoolsITeachIn(userID, excludeUnlicencedUsers)
ValidateTeacherIsKeyContact(userID)
ValidateTeacherIsKeyContactAsync(userID)
.ctor()
.cctor()
.ctor(sessionID)
get_DB()
CreateDatabaseContext()
GetUserGlobalSettings(userID)
GetUserSettingsCollection(userID, baseLanguageID, targetLanguageID)
SetGlobalSetting(userID, code, value)
SaveUserSettingsCollection(userID, baseLanguageID, targetLanguageID, settings)
ParseStringAsObject(value, key)
GetListOfStudentsPasswordChangedSettings(session, classIDs)
.ctor()
GetUserTitles()
GetUserTitlesList()
GetUserTitlesList(conn)
GetUserTitlesFromDatabase(conn)
.ctor()
GetUserTypes(SessionID)
GetUserTypesDictionary()
GetUserTypesList()
ConvertDictionaryToList(Dictionary)
GetUserTypesFromDatabase()
.ctor()
GetBasicDetailsOfUsersInClass(session)
GetStudentUserIDsInClasses(classIDs)
GetTeachersOfClassesForTask(taskId)
GetUsersInClass(SessionID, ClassID, UserTypeFilterString)
GetFilteredUsersInSchool(SessionID, SchoolID, MinPrivileges, MaxPrivileges)
GetRandomClassIDForUserID(userID)
GetUsersInSpecificClasses(sessionID, classIDs, minPrivileges, maxPrivileges)
GetUserIDsInSpecificClasses(classIDs, minPrivileges, maxPrivileges)
AssociateFacebookIDWithUser(SessionID, FacebookID, UserID)
AssociateFacebookIDWithUser(SessionID, FacebookID, UserID, authorize)
GetUserIDForFacebookID(SessionID, FacebookID)
GetUserIDForFacebookID(SessionID, FacebookID, authorize)
GetUserIDsForFacebookIDs(SessionID, FacebookIDs)
GetUserIDsForFacebookIDs(SessionID, FacebookIDs, authorize)
GetUsersForFacebookIDs(SessionID, FacebookIDs)
GetUsersForFacebookIDs(SessionID, FacebookIDs, authorize)
CreateCacheKeyForBasicUserInfo(userID)
GetBasicUserInfo(userID)
GetBasicUserInfoFromDatabase(userID)
GetUserDataForSpecificUsers(session, userIDs)
GetUserDataForSpecificUsers(session, userIDs, authorize)
GetUserDataForSpecificUsersAsync(userIDs)
GetUserDataForSpecificUser(SessionID, UserID)
GetUserDataForSpecificUser(SessionID, UserID, authorize)
GetUserDataForSpecificUserAsync(SessionID, UserID, authorize)
GetUserDataAfterValidation(UserID)
GetUserDataAfterValidationAsync(UserID)
GetUserAndLoginDataWithContactsForSpecificUsers(SessionID, UserIDs)
GetUserAndLoginDataForSpecificUsers(SessionID, UserIDs)
GetUserAndLoginDataForSpecificUsersAfterValidation(UserIDs)
GetUserAndLoginDataForSpecificUser(SessionID, UserID)
RemoveUsersFromClass(sessionID, classID, userIDs)
ResetUserPasswords(session, userIDs, userFilter)
FilterUsersForPasswordReset(userIDs, userFilter)
GenerateDefaultPasswordForUser(user)
GenerateDefaultPasswordForUser(firstName)
MoveUsersBetweenClasses(SessionID, DonorClassID, TargetClassID, UserIDs)
AddUsersToClass(sessionID, classID, userIDs, newUserType)
ValidateThatUsernameIsUnique(SessionID, Username, CurrentUserID)
ValidateThatNewUsersUsernameIsUnique(Username)
ValidateThatSessionCanAlterUserDetails(session, userID, throwIfNot)
EditUserDetails(session, UserID, FirstName, Surname, Email, Title, StudentID, ParentEmail)
EditUsersOwnLoginDetails(sessionID, username, password)
EditLoginDetails(sessionID, userID, username, password)
EditUserType(SessionID, UserID, ClassID, OldUserType, NewUserType)
EditContactDetails(sessionID, userID, jobTitle, notes, contactRoles, secondaryEmail)
IsUsersPasswordEncrypted(userID)
CreateNewUserAfterValidation(db, firstName, surname, titleID, email, username, password, studentID, parentEmail)
GenerateStoredPassword(password)
CreateNewUserAndAddToClassWithOptions(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType, StudentID, ParentEmail, options)
SendNewUsersWelcomeEmail(userID, firstName, surname, username, password, emailAddress, userType, branding, emailTemplate, ClassID, SchoolID, ClassName, SchoolName, LoginWithSSO)
GetUserDetails(Username, Password)
ValidateLoginDetails(Username, Password)
UpdateUserLoginDetails(username, password, newUsername, newPassword, emailAddress)
BeginResetPasswordProcess(username, emailAddress, firstName)
TryFindUser(username, emailAddress, firstName)
RequestPasswordResetViaForm(FirstName, Surname, Username, EmailAddress, School)
GetUserDataFromLogin(username, password)
GetUserDataFromUsername(Username)
GetUserDataFromEmailAddressAndFirstName(Email, FirstName)
EditUsersOwnEmailAddress(sessionID, newEmailAddress)
UpdateUserEmailAddress(session, userID, newEmailAddress)
UpdateUsersEmailAddress(user, newEmailAddress, notify)
SendVerifyNewEmailAddressEmail(user, newEmailAddress, brand)
GenerateVerifyNewEmailAddressModel(user, brand)
SendUserEmailAddressChangedEmail(user, newEmailAddress, oldEmailAddress, brand)
GenerateUserEmailAddressChangedModel(user, newEmailAddress, oldEmailAddress, brandId)
ResetPasswordToFirstname(session, userID, sendEmail)
CommitNewLoginDetails(userID, newUsername, newPassword, notify, isFirstName)
SendDetailsChangedEmail(newUsername, firstName, surname, newPassword, defaultEmail, passwordChangingToFirstName)
CheckPasswordSuitability(password)
IsCommonPassword(NewPassword)
ResetUserPasswordAfterValidation(user)
SendPasswordResetRequestEmail(user)
ValidateEmailAddress(newEmail)
ProcessPasswordChangeRequestForm(firstName, surname, username, emailAddress, school)
LogPasswordReset(firstName, surname, username, emailAddress, school, automatic)
CreateRandomPassword(PasswordLength)
ValidateNewUserInfo(user)
GetTeachersInSchool(schoolIDs, includeAdmin)
GetTeachersInASchoolAsync(sessionID, schoolID, authenticate)
GetTeachersInASchoolAfterValidationAsync(schoolID)
GetKeyContactsWhoTeachesLanguagesInSchool(schoolID)
GetLanguageTeachersIncludingKeyContactsInSchool(schoolID, hasValidEmailAddress)
GetKeyContactIDsInSchool(schoolID, hasValidEmailAddress)
GetUserEmailAddress(session, userID)
GetUserNameFromID(userID)
RecordSuccessfulEmailVerification(userID)
GetUserMaxPrivilege(userID, bypassCache)
GenerateUserMaxPrivilegesCacheKey(userID)
GetUserMaxPrivilegeFromDatabase(userID)
GetUserMaxPrivilegeAsync(userID, bypassCache)
GetUserMaxPrivilegeFromDatabaseAsync(userID)
SearchForUsersInSchool(session, schoolID, searchTerms, numberOfResults)
SearchForUsersGlobally(session, userSearchTerms, schoolSearchTerms, numberOfResults)
SearchForUsersToImpersonate(session, schoolKeyword, nameKeyword, includeStudents)
GenerateSchoolSearchQueryArgument(keyword, queryArgumentName, queryArgs)
RemoveParentEmailAddressFromDatabase(userID)
GenerateUserSearchQueryArgument(keyword, argumentBaseName, queryArgs)
DeleteInvalidEmailAddresses(emailAddresses)
SelectDefaultSchoolForUser(userID)
UpdateUserSubjectInterests()
GetParentDetailsForUser(userID)
GetParentDetailsForMultipleUsers(userIDs)
.ctor()
.cctor()
AcceptUserJoinRequests(session, ClassID, UserIDs, UserType)
AcceptUserClassRequest(ClassID, UserID)
InitAcceptUserClassRequestCommand(ClassID, UserID, UserType, FirstCommand)
ExecuteAcceptUserClassRequest(UserID, IDsAdded, IDsAlreadyThere, FailedIDs, FirstCommand)
SendAcceptedClassRequestEmails(sessionId, classId, conn, session, successfulIds, authorize)
DeclineUserJoinRequests(session, classId, userIDs)
ValidateClassCode(Code)
RequestAdditionToClassForExistingUser(ClassCode, Username, Password)
RequestAdditionToClassForNewUser(ClassCode, FirstName, Surname, TitleID, Email, Username, Password)
AddUserRequestToJoinClass(classID, userID)
GetUserJoinRequestsForClasses(SessionID, ClassIDs)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_ClassName()
set_ClassName(value)
get_Success()
set_Success(value)
get_Message()
set_Message(value)
.ctor()
get_Success()
set_Success(value)
get_Message()
set_Message(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
FromUserNavigationRecord(record)
.ctor()
get_HasEncryptedPassword()
.ctor()
.ctor()
ToDynamoDocument()
FromDynamoDocument(doc)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
FromDynamoDocument(document)
ToDynamoDocument(fact)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_ClassName()
set_ClassName(value)
get_JobTitle()
set_JobTitle(value)
get_Departments()
set_Departments(value)
.ctor()
.ctor()
.ctor()
CompareTo(other)
.ctor()
.cctor()
CompareTo(other)
HasValidLicence(searchResult)
.ctor()
.cctor()
CompareTo(other)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
CreateDefault()
.ctor()
.ctor()
.ctor(userRecord)
.ctor()
.ctor()
.ctor(generatedUsername, studentID, matchedUsername, action, firstName, surname)
get_FirstName()
set_FirstName(value)
get_LastName()
set_LastName(value)
get_UserName()
set_UserName(value)
get_Password()
set_Password(value)
get_ClassName()
set_ClassName(value)
get_TeacherNames()
set_TeacherNames(value)
get_TeacherUsernames()
set_TeacherUsernames(value)
get_EmailAddress()
set_EmailAddress(value)
get_Title()
set_Title(value)
get_JobTitle()
set_JobTitle(value)
get_Departments()
set_Departments(value)
get_StudentID()
set_StudentID(value)
get_NationalStudentID()
set_NationalStudentID(value)
get_ParentEmailAddress()
set_ParentEmailAddress(value)
get_UserAuthenticationIdentifier()
set_UserAuthenticationIdentifier(value)
get_UserLTIIdentifier()
set_UserLTIIdentifier(value)
ConvertToUserClassAndLoginForBulkUpload()
get_HasTeacherUsernames()
get_HasTeacherNames()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(user)
.ctor()
.ctor(userRecord)
get_IsBlank()
.ctor()
.ctor()
.ctor(_ID, _Name)
.ctor()
.ctor(_ID, _Description, _Privileges)
.ctor()
AddStudentUsageUpdateRecipientsToQueue()
GetUserIDsForUpdate(groupID)
ProcessUserUpdateEmailRequest(userID, groupID)
GenerateUpdateEmailDataForUser(userID, emailGroupID)
SendUsageUpdateEmail(data)
GenerateEmailModel(data)
GenerateCacheKeyForSchoolDeptMetrics(schoolID, startDate, endDate, baseLanguage, subjectIDs)
.ctor()
.cctor()
StoreRecurringUpdateEmailSendForMultipleUsers(emailGroup, userIDs)
StoreRecurringUpdateEmailSend(userID, emailGroup)
.ctor()
.ctor()
.ctor()
.ctor()
get_ValidationResults()
set_ValidationResults(value)
.ctor()
.ctor()
.ctor()
.ctor()
IsValidSpellingPair(word, contextualSentence)
GenerateSentenceCheckRegexForSpellingWord(word)
.ctor()
GetValidityManagerForLanguage(language)
GenerateCacheKeyForModel(language)
.ctor(language, model)
HowProbableIsDefinition(word)
HowProbableIsSetOfWords(words)
HowProbableIsWordLength(word)
HowProbableIsWordLengthDistribution(words)
CalculateProbabilityOfDefinition(word, n, model)
GenerateDataModel(language)
PrimeNgramData(model, allDefinitions, n)
PrimeWordLengthFrequencyData(model, allDefinitions)
GetAllValidDefinitionsInLanguage(language)
GetExampleCheatingDefinitionsInLanguage(language)
GenerateGibberish(numberOfItems, minLength, maxLength)
GenerateGibberish(minLength, maxLength)
NormaliseDefinition(definition)
ngram(n, input)
DetermineAppropriateCutoffForNgramProbabilities(model, n, goodExamples, badExamples)
.cctor()
RequiresSoundfiles(direction)
RequiresSoundfiles(direction)
GetTranslationDirections(SessionID, BaseLanguage, TargetLanguage, Abbreviate)
GetTranslationDirections(baseLanguage, targetLanguage, statsActivityType, abbreviate)
GetSQLForContentIDsWithSoundFiles()
GetTranslationDirectionsForContentList(listID)
.ctor()
.cctor()
FindOrCreateRomanisationsForDefinitions(NewDefinitions)
CompileRomanisationsForTranslations(translations)
CompileRomanisationsForDefinitions(definitionIDs)
.ctor()
ValidateDefinition(singleDefinition, contentType)
ValidateTranslation(singleTranslation)
ValidateTranslations(newTranslations)
ValidateNewEnglishSpellingTranslation(translation)
FindOrCreateDefinitions(db, validatedDefs, creatorID, creatorIsStudent)
get_InvalidCharsAfterParsingDefinition()
ValidateSingleDefinition(definitionForCreation, validationResult, contentType)
CleanDefinitionText(text, languageID)
.ctor()
.cctor()
DetermineScriptForLanguageAndText(languageID, text)
DetermineScriptTypeOfJapaneseText(text)
DetermineScriptTypeOfChineseText(text)
DoesScriptRequireRomanisations(script)
.ctor()
GetTranslationSuggestions(session, minVotes)
TopListsTranslationIsIn(session, contentID)
GroupSuggestionsByLanguages(suggestions)
AcceptSuggestions(sessionID, suggestions)
ConvertSuggestionIntoDefinitionForCreation(suggestion)
DeclineSuggestions(sessionID, suggestions)
LoadUserEmails(suggestions)
SendAcceptedTranslationSuggestionNotification(suggestionsAndEmails)
SuggestSynonym(SessionID, TranslationID, Suggestion, SuggestionLanguage)
SuggestSynonymWithReturn(SessionID, TranslationID, Suggestion, SuggestionLanguage)
.ctor()
.cctor()
GetSpecificTranslations(translationIDs)
RetrieveSpecificTranslationsFromDatabase(translationIDs)
CompileDefinitionsForSpecificTranslations(translations)
FindOrCreateTranslations(newTranslations, creatorID, creatorIsStudent)
GenerateTranslationContentsHashString(definitions)
GenerateOneSideOfTranslationContentsHashString(definitions)
FindDuplicateTranslationsOf(db, translationToMatch)
FindOrCreateTranslationsAndDefinitions(sessionID, newTranslations)
FindOrCreateTranslationsAndDefinitions(session, newTranslations, db, useSessionForCreator)
GetDefinitionIdArrayForLanguage(language, definitions)
InvalidateCachedTranslationIDs(translationIDs)
SetAllNullTranslationHashCodes()
FetchTranslationDefinitionLookupDataForTranslationsWithoutHashCodes()
SetContentHashForMultipleTranslationsAsync(hashKeys)
SetContentHashForMultipleTranslations(hashKeys)
UpdateTranslationContentHashForSpecificTranslations(translationIDs)
FetchTranslationDefinitionLookupDataForSpecificTranslations(TranslationIDs)
EnsureThatTranslationsHaveSoundFiles(translationIDs)
.ctor()
.ctor()
FromTranslationForCreation(definition)
.ctor()
.ctor()
.ctor()
DeserializeDefinitions()
ToTranslation()
.ctor()
DownCast()
.ctor()
Create(validationResults)
GenerateFaultMessage(validationResults)
.ctor(message, validationResults)
get_IsValid()
get_Errors()
set_Errors(value)
get_TranslationCreationID()
set_TranslationCreationID(value)
.ctor()
get_CombinedErrorMessage()
ToString()
.ctor()
.ctor(baseLanguageDefinitions, targetLanguageDefinitions)
.ctor(sourceTranslation)
.ctor()
ToTranslationDefinitionLookup(translationID)
RecalibrateLanguage(contentType, baseLanguage, targetLanguage)
.ctor()
InputCompiledDefinitions(compiledDefinitions)
get_AllDefinitions()
get_AllDefinitionIDs()
.ctor()
.ctor(id, text, comment, scriptType, displayedAsAnswer, typeCode)
.ctor()
.ctor()
get_Valid()
ToXmlData()
.ctor()
get_FromLanguage()
set_FromLanguage(value)
get_ToLanguage()
set_ToLanguage(value)
get_Label()
set_Label(value)
get_Suggestions()
set_Suggestions(value)
.ctor()
get_TranslationID()
set_TranslationID(value)
get_Suggestion()
set_Suggestion(value)
get_Votes()
set_Votes(value)
get_FromLanguage()
set_FromLanguage(value)
get_ToLanguage()
set_ToLanguage(value)
get_ToLanguageID()
set_ToLanguageID(value)
get_FromDefinitions()
set_FromDefinitions(value)
get_ToDefinitions()
set_ToDefinitions(value)
get_ContentType()
set_ContentType(value)
get_Comment()
set_Comment(value)
.ctor()
GetSyncronisedUtcNow()
.ctor()
get_Now()
get_UTCNow()
SafelyDetermineInitialTimeOffset()
GetOrCacheDatabaseTimeOffset()
PerformTimeOffsetUpdate(startTime)
GetDatabaseTimeOffsetFromDB()
GetLambdaTimeOffset()
GetServerTimeInDatabaseFormat()
GetSyncronisedUtcDateTime()
GetSynchronisedLocalServerTime()
GetServerTimeWithPackaging()
ConvertDBTimeToLocalTime(DBTime)
ConvertLocalTimeToDBTime(LocalTime)
ConvertDBTimeToNZTime(DBTime)
GetNZMidnightForCurrentDate()
GetNZMidnightForCurrentDateInUTC()
GetLocalUTCOffsetInMinutes()
CalculateTimezoneAdjustmentMinutes(clientOffsetMinutes)
GetNearestQuietTimeForExpensiveProcess()
.ctor()
.cctor()
GetCurrentTimePeriod()
GetAdjacentTimePeriods()
GetAdjacentTimePeriodsFromDatabase()
GetNextTimePeriodFromDatabase(eventCode)
StoreTestDurationFromQuestionTimes(session, questionTimes)
StoreTestDuration(session, additionalElapsedSeconds)
HandleQuotaExceeded(session)
ValidateUserWithinQuota(userID)
ValidateUsernameWithinQuota(username)
GetTimeUsageForUserInPeriod(userID, periodID)
GetCurrentTimeUsageWithPeriodInfoForUser(session)
.ctor()
.cctor()
.ctor(valid)
get_FriendlyMessage()
GetFriendlyMessage(flashVersion)
.ctor()
get_IsActive()
.ctor()
get_Current()
.ctor()
.ctor()
.ctor()
.ctor()
GetSpaceRepScoringInfo()
GetMilestones()
BuildMilestonesList()
.ctor()
.cctor()
UpdateSchoolDepartmentTriggers()
.ctor()
.cctor()
.ctor()
GetRelevantSchoolAndClassesSummaryStats(session, dataSetSelectionInfo)
GenerateCacheKeyForGetRelevantSchoolAndClassesSummaryStats(schoolID, dataSetSelectionInfo)
GetRelevantSchoolAndClassesSummaryStatsFromDatabase(schoolID, dataSetSelectionInfo)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_TotalAnswers()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
FromRange(Data)
.ctor()
CreateSnapshotRecord(DataType, Status, Dataset)
UpdateSnapshotStatus(ID, Status)
DeleteSnapshotRecord(ID)
.ctor()
.ctor()
.ctor()
.cctor()
GetSchoolScores(DataSetSelectionInfo)
GetSchoolSubjectUsage(session, schoolID)
CreateSchoolScoresCacheKey(DataSetSelectionInfo)
GetSchoolScoresFromDatabase(DataSetSelectionInfo)
GetChronologicalStatsForSchools(sessionID, schoolIDs, baseLanguage, targetLanguage, includePreviousYearStats)
GetDatasetGroupForSchools(schoolIDs)
GetChronologicalStatsForSchools(sessionID, schoolIDs, startDate, endDate, baseLanguage, targetLanguage, includePreviousYearStats)
GetChronologicalStats(schoolID, startDate, endDate, baseLanguage, targetLanguage, conn)
GetStatsSpreadForSchool(SessionID, SchoolID, DataSetSelectionInfo, DataRanges)
UpdateSchoolChronologicalUsageStats(numberOfPreviousDays)
GetAllLicencedUsersInAllSchools()
GetAllUsersChronologicalUserSummaries(NumberOfDays)
GenerateChronologicalSchoolLanguageTable(records)
GenerateChronologicalSchoolOverallTable(records)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ArchiveChronologicalUserStats(cutoff)
GenerateArchivedChronologicalStatsDataTable(records)
.ctor()
.ctor()
GetQuestionsAnsweredByStudent(compCode, userID, daysOfHistory)
GetQuestionsAnsweredByStudent(userID, scoreDataset, daysOfHistory)
GetContentIDsAnsweredByUser(userID, scoreDataset, daysOfHistory)
DeactivateCheatingUser(userID, daysToExclude)
RemoveCheatingPoints(dataset, userID, targetData)
.ctor()
get_NumberRightToRemove()
get_NumberWrongToRemove()
.ctor()
get_UserID()
set_UserID(value)
get_FirstName()
set_FirstName(value)
get_Surname()
set_Surname(value)
get_ContentID()
set_ContentID(value)
get_CreatorID()
set_CreatorID(value)
get_CreatedDate()
set_CreatedDate(value)
get_BaseLanguageText()
set_BaseLanguageText(value)
get_TargetLanguageText()
set_TargetLanguageText(value)
get_BaseLanguageID()
set_BaseLanguageID(value)
get_TargetLanguageID()
set_TargetLanguageID(value)
get_BaseLanguageName()
set_BaseLanguageName(value)
get_TargetLanguageName()
set_TargetLanguageName(value)
.ctor()
.ctor()
get_PercentComplete()
.ctor()
get_PercentComplete()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetAllActivitySubtypes()
GetAllActivitySubtypesFromDB()
DetermineActivityTypeFromActivitySubtype(activitySubtype)
.ctor()
CacheUserIDs(database, filter)
CacheUserIDs(database, filter)
CacheUserIDs(database, FilterType, SchoolIDs, ClassIDs, UserIDs, IgnoreUnlicencedUsers, RestrictToStudents, IncludeArchivedClasses)
CacheActivityIDs(database, filter)
CacheActivityIDs(database, filter)
CacheActivityIDs(database, FilterType, ModuleIDs, ListIDs, TestIDs, ContentIDs)
GetOrCacheUserIDsInDatabase(database, FilterType, SchoolIDs, ClassIDs, UserIDs, IgnoreUnlicencedUsers, RestrictToStudents, IncludeArchivedClasses)
GetUserIDsFromDatabase(FilterType, SchoolIDs, ClassIDs, UserIDs, IgnoreUnlicencedUsers, RestrictToStudents, IncludeArchivedClasses)
GetUserIDsFromDefaultData(FilterType, SchoolIDs, ClassIDs, UserIDs, IgnoreUnlicencedUsers, RestrictToStudents)
GetUserIDsFromDatabaseAfterFiltering(conn, FilterType, SchoolIDs, ClassIDs, UserIDs, IgnoreUnlicencedUsers, RestrictToStudents, IncludeArchivedClasses)
GetActivityIDsFromDatabase(FilterType, ModuleIDs, ListIDs, TestIDs, ContentIDs)
GetOrCacheActivityIDsInDatabase(database, FilterType, ModuleIDs, ListIDs, TestIDs, ContentIDs)
StoreCachedResultIDs(database, typeCode, uniqueKey, ids)
CreateCachedIDsBulkUploadDataTable(ids, cachedResultID)
TryGetCachedProgressReport(database, typeCode, uniqueKey)
GenerateUserIDsCacheKey(databaseName, filter)
GenerateUserIDsCacheKey(databaseName, filter)
GenerateUserIDsCacheKey(databaseName, FilterType, SchoolIDs, ClassIDs, UserIDs, IgnoreUnlicencedUsers, RestrictToStudents, IncludeArchivedClasses)
GenerateContentIDsCacheKey(databaseName, filter)
GenerateContentIDsCacheKey(databaseName, filter)
GenerateContentIDsCacheKey(databaseName, FilterType, ModuleIDs, ListIDs, TestIDs, ContentIDs)
GetUserIDsFromDataSetUserFilter(filter)
GetUserIDsFromMultipleDataSetUserFilters(indexedFilters)
GetUserIDsFromCachedFilter(database, filterID)
.ctor()
GetStudentStatsUsingFilter(session, filter)
GetPointsWithinDateRange(filter)
GetStudentsStatsForCacheableContentSet(filter)
GetStudentStatsForAllContent(filter)
GetStudentStatsForSubject(filter)
CountQuestions(filter)
GetContentProgressUsingFilter(session, filter)
GetContentStatsForCacheableContentSet(filter)
SummariseActivitySubtypeStatistics(flatStatistics)
CountStudents(filter)
GetContentListUserProgressForClasses(session, schoolID, listID, classIDs, milestoneLevel)
GenerateContentListUserProgressForClassesAfterValidation(schoolID, listID, classIDs, milestoneLevel)
GetContentListUserProgressForStudent(session, schoolID, listID, studentID, milestoneLevel)
GenerateContentListUserProgressForStudentAfterValidation(schoolID, listID, studentID, milestoneLevel)
ApplyProgressSummariesToUsers(users, userProgress, translationDirections)
ApplyProgressSummariesToContent(content, contentProgress)
ApplyOnlineStatusToUsers(users, currentSessions, listID)
.ctor()
.ctor()
.cctor()
StoreProgressWithMilestones(sessionID, newData, clientTimezoneOffsetMinutes)
GetModuleSubjectInfo(moduleID)
GenerateRequestID()
StoreActivityProgress(sessionID, activityTypeID, baseLanguageID, targetLanguageID, newData, clientTimezoneOffsetMinutes, requestID)
SerialiseAndQueueStats(statsContainer)
SerialiseAndQueueSmartLessonSectionCompletionStats(statsContainer)
SerialiseAndQueueMainDBStatsUpdates(transferData)
SerialiseAndQueueScores(scoresContainer)
SerialiseAndQueueScoresAsync(scoresContainer)
CreateSerializationSettings()
DetermineTargetDataSetsForStatsSave(userID, baseLanguage, targetLanguage, activityType, saveDate)
ConvertStatsToDataTable(statsData)
OutputStats(UserID, ContentIDs, DataSet)
GetUsersWithinSpecificScoreRangeInSchool(SessionID, SchoolID, DataSetSelectionInfo, MinQuestionsAnswered, MaxQuestionsAnswered)
GetStatsContextsForUser(userID)
SaveStatsToDatabase(statsObject)
MergeAnyDuplicateStatsRecords(stats)
ApplyStatsUpdatesToMainDBOrEnqueueOnFailure(data)
ApplyStatsUpdatesToMainDB(data)
ConvertPrecalculatedUserScoreUpdatesToDataSetScores(newOverallScoreUpdates, newSubjectScoreUpdates)
PerformDatabaseSecondLineFilterOfDatasets(preFilteredDataSetIDs, stats, saveDate)
UpdateUserStatsOnStatsDatabase(userID, activityType, baseLanguage, targetSubject, saveDate, timezoneAdjustmentMinutes, stats, taskLinks, conn)
UpdateChronologicalUserScores(userID, activityType, baseLanguage, targetSubject, saveDate, timezoneAdjustmentMinutes, stats, conn)
TransferPrecalculatedUserScoreUpdatesToMainDatabase(userID, baseLanguage, targetSubject, saveDate, newOverallScoreUpdates, newSubjectScoreUpdates, conn)
GeneratePrecalculatedUserScoreUpdateDataTable(stats)
UpdateLearnContentTaskUserProgress(userID, newLearnContentTaskMilestones, conn)
GenerateCacheKeyForContentItemMilestoneRule(contentID)
GetMilestoneRuleIDsForContentItems(contentIDs)
GetMilestoneRuleIDsForContentItemsFromDatabase(contentIDs)
TestUserStatsSaving()
RepairPrecalculatedUserScoreMismatchesInMainDB(datasetID)
IdentifyMismatchedScores(statResult, mainResult)
HasScoreChanged(source, target)
GetPrecalculatedStatsForDataset(db, dataset)
.ctor()
.ctor()
get_PercentageCorrect()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_ActivitySubTypeStatistics()
AddActivitySubTypeStatistic(activitySubType, numberLearnt)
GetProgressForActivitySubtype(activitySubtype)
Aggregate(progressRecord)
get_UniqueID()
get_ActivitySubType()
get_NumberLearnt()
CreateEmptySummary()
get_ActivitySubType()
set_ActivitySubType(value)
CreateEmptySummary()
nz.co.LanguagePerfect.Services.Stats.UserProgress.BusinessObjects.IProgressRecord.get_UniqueID()
nz.co.LanguagePerfect.Services.Stats.UserProgress.BusinessObjects.IProgressRecord.get_NumberLearnt()
nz.co.LanguagePerfect.Services.Stats.UserProgress.BusinessObjects.IProgressRecord.CreateEmptySummary()
.ctor()
.ctor()
.ctor()
get_ActivitySubType()
set_ActivitySubType(value)
CreateEmptySummary()
nz.co.LanguagePerfect.Services.Stats.UserProgress.BusinessObjects.IProgressRecord.get_UniqueID()
nz.co.LanguagePerfect.Services.Stats.UserProgress.BusinessObjects.IProgressRecord.get_NumberLearnt()
nz.co.LanguagePerfect.Services.Stats.UserProgress.BusinessObjects.IProgressRecord.CreateEmptySummary()
.ctor()
get_IsCurrentlyFrozen()
.ctor()
.ctor()
Aggregate(progressRecord)
.ctor()
.ctor()
.ctor(idString)
.ctor(ids)
get_IDString()
get_IDs()
Contains(id)
JoinIDs(ids)
SplitIDs(idString)
set_UserID(value)
get_UserID()
GenerateKeyForDataset(dataset)
GenerateKey(userID, dataSetID, baseLanguage, targetLanguage)
.ctor()
.cctor()
.ctor()
.ctor(datasetID, score, scoreDifference, languageScore, languageScoreDifference)
.ctor(dataSetID, classID, baseLanguage, targetLanguage, scores)
get_Stats()
UpdateUserStat(replacementStat)
.ctor()
Clone()
.ctor()
.ctor()
get_SchoolIDs()
get_CountryIDs()
get_ClassIDs()
.ctor()
.ctor()
.ctor()
ToString()
.ctor()
get_UserID()
set_UserID(value)
get_FirstName()
set_FirstName(value)
get_Surname()
set_Surname(value)
get_StudentID()
set_StudentID(value)
get_OnlineStatus()
set_OnlineStatus(value)
get_FullName()
.ctor()
.ctor()
get_HasActivitySubType()
get_UserFilterType()
get_ContentFilterType()
get_ActivitySubTypeClause()
Compare(x, y)
.ctor()
.ctor()
.ctor()
SortAscOnWordNumber()
CompareTo(obj)
get_Score()
.ctor()
.ctor(userID, name, surname, score)
.ctor(displayText)
CloneWithNewName(name, surname)
ChangeScore(newScore)
OutputXML()
OutputAbbreviatedXML()
.ctor()
.ctor()
Aggregate(progressRecord)
.ctor()
toUserStatForTranslation()
.ctor()
.ctor()
.ctor()
QuestionCountPortionOfData()
QuestionContentPortionOfData()
BaselineShiftedQuestionContentPortionOfData()
.ctor()
.ctor(translationID, translationDirection, singleAnswerIsCorrect)
AddNewUserAnswer(isCorrect)
AppendUserStat(data)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
UpdateDepartmentalHealthMetrics()
StoreMetrics(summaries)
GetYearOverYearUsage(thisYear)
GetRatioOfUsageComparedToRegionAndDepartment(thisYear, daysOfHistoryToInclude)
GenerateSummaryHealthRecords(comparativeUsage, usageRatioForRegion, currentYear)
CalculateHealthRatingForDepartment(summaryRecords)
GetHealthRatingForDepartment(schoolID, departmentID)
GetHealthRatingForDepartmentInSchoolFromDB(schoolID, departmentID)
.ctor()
IdentifyCommonTasks(minuteRange)
.ctor()
.cctor()
StoreActivityUsageData(session, questionTimes, listUsage, totalSecondsInTest, retryState, attemptUniqueKey)
RecordStudentUsageFromStatsSavingInfo(session, listUsage, retryState, attemptUniqueKey)
RecordStudentUsageFromQuestionTimes(session, questionTimes, explicitCompletionDatetime, attemptUniqueKey)
RecordStudentUsageAfterValidation(usage, explicitCompletionDatetime, attemptUniqueKey)
GetOrderedSubjectsForClasses(session, schoolID, classIDs)
SuggestNextContentListForUser(userID, startingList, listsToExclude, listsToPrefer, limit)
GetClassUsageDataForSubjectsInTimePeriod(session, schoolID, classIDs, baseLanguage, subjectIDs, startDate, endDate)
GetHighLevelUsageMetricsForSchool(schoolID, startDate, endDate, baseLanguage, subjectIDs)
GetHighLevelUsageMetricsForClasses(schoolID, classIDs, startDate, endDate, baseLanguage, subjectIDs)
GetHighLevelUsageMetricsForFilter(schoolID, datasetFilter, startDate, endDate, baseLanguage, subjectIDs)
GetClassUsageSummaryForDashboard(session, schoolID, classIDs, baseLanguage, subjectIDs, startDate, endDate)
GetStudentUsageDataForSubjectsInTimePeriod(session, schoolID, classIDs, userID, baseLanguage, subjectIDs, startDate, endDate)
GetClassTaskCompletionDataForSubjectsInTimePeriod(session, schoolID, classIDs, subjectIDs, startDate, endDate, includeTasksAssignedToTargetStudents)
GetStudentTaskCompletionDataForSubjectsInTimePeriod(session, schoolID, classIDs, userID, subjectIDs, startDate, endDate)
RemoveTypedTasksNotTargetingWholeClass(tasks)
RemoveTypedTasksNotTargettedAtUser(tasks, userID)
ApplyUserFilterToSQL(sqlScaffold, userFilter)
GetCurrentActivitiesForSession(session)
GetCurrentActivitiesForOnlineUsers(schoolID, userIDs, baseLanguage, subjectIDs, onlineUsers)
MergeRecentAndCurrentActivities(recentActivities, currentActivities, totalUsers)
GetStudentUsageTimeSeriesData(schoolID, userFilter, baseLanguage, subjectIDs, startDate, endDate)
GetHighLevelUsageMetricsForStudentsInTimePeriod(userFilter, baseLanguage, subjectIDs, startDate, endDate)
DetermineMinStudentsToInclude(filter)
DetermineMinStudentsToInclude(totalStudents)
GetActivitiesOfInterestForClassesInTimePeriod(userFilter, totalNumberOfStudents, baseLanguage, subjectIDs, startDate, endDate)
GetMostRecentActivitiesForClassesInTimePeriod(userCacheFilterID, totalNumberOfStudents, baseLanguage, subjectIDs, startDate, endDate, numberOfResults)
GetStudentRecentUsage(userFilter, baseLanguage, subjectIDs, startDate, endDate)
GetRecentUsageByClassForMultipleClasses(userFilter, classIDs, baseLanguage, subjectIDs, startDate, endDate)
GetRecentUsageByClassForSingleStudent(userID, classIDs, baseLanguage, subjectIDs, startDate, endDate)
GetRecentUsageBySubject(userFilter, baseLanguage, subjectIDs, startDate, endDate)
ApplyOnlineUsageStatusToRecentStudentUsage(students, currentSessions, subjectIDs)
ApplyOnlineUsageStatusToUserInfo(students, currentSessions, subjectIDs)
ApplyTaskDetailsToRecentActivities(recentActivites, tasks)
ApplyTaskCountsToClassUsage(recentActivites, tasks)
ApplyTaskCountsToSubjectUsage(recentActivites, tasks)
GetClassUsageDataForSpecificContentInTimePeriod(session, schoolID, classIDs, baseLanguage, targetSubject, targetModuleIDs, targetListIDs, startDate, endDate)
GetStudentRecentUsageForSpecificLists(usersCacheFilterID, baseLanguage, targetSubject, listIDs, startDate, endDate)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_isSingleUser()
get_hasMultipleUsers()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
Start()
Stop()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(ranking)
CreateRankingResult(rankingQuery)
CreateInvalidLoginResult()
CreateNoScoreResult()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(ranking, userIDHash)
CreateRankingResult(rankingQuery)
CreateInvalidLoginResult()
CreateNoScoreResult()
get_ScoresSortedDescending()
set_ScoresSortedDescending(value)
get_ScoreboardKey()
set_ScoreboardKey(value)
get_OneBasedRankings()
set_OneBasedRankings(value)
.ctor(scoreboardKey, sortScoresDesc, oneBasedRankings)
GetRecordsAroundRank(scoreboardKey, scoresSortedDescending, rank, numberOfItemsAbove, numberOfItemsBelow, oneBasedRankings, projectedScoreRecord)
ProjectRecordIntoResults(results, projectedRecord, scoresSortedDescending)
GetRecordsAroundRank(rank, numberOfItemsAbove, numberOfItemsBelow, projectedScoreRecord)
GetTopRecords(scoreboardKey, scoresSortedDescending, offset, numberOfRows, oneBasedRankings)
GetTopRecords(offset, numberOfRows)
GetRankingOfUser(scoreboardKey, scoresSortedDescending, userID, oneBasedRankings)
GetRankingOfUser(userID)
GetScoreOfUser(scoreboardKey, userID)
GetScoreOfUser(userID)
GetRankingOfScore(scoreboardKey, scoresSortedDescending, score, oneBasedRankings)
GetRankingOfScore(score)
GetNumberOfRecordsInScoreboard(scoreboardKey)
GetNumberOfRecordsInScoreboard()
AddRecordToScoreboard(scoreboardKey, userID, score)
AddRecordToScoreboardIfBetter(scoreboardKey, scoresSortedDescending, userID, score)
AddMultipleRecordsToScoreboard(scoreboardKey, records)
DeleteScoreboard(scoreboardKey)
DeleteMultipleScoreboards(scoreboardKeys)
RemoveRecordForUser(scoreboardKey, userID)
ReplaceScoreboard(scoreboardKey, newRecords)
ReplaceMultipleScoreboards(newScoreboardData, logProgress)
MatchRedisScoreboardRecordsToUsers(records)
GetScoreboardUserDetails(userIDs, areTeachers)
GenerateCacheKeyForUserDetailsForScoreboard(userID, isTeacher)
GetScoreboardUserDetailsFromDatabase(userIDs, isTeacher)
.ctor()
GetDataSetStatusOrThrow(DataSet)
GetScoreboardLastUpdateTime(status)
FindSchoolsScoreboardRanking(dataSet, baseLanguage, targetLanguage, returnQPSRanking, username)
FindSchoolsScoreboardRankingForLanguage(dataSet, baseLanguage, targetLanguage, username, password)
FindSchoolsScoreboardRankingOverall(dataSet, username, password)
FindSchoolsScoreboardQPSRankingForLanguage(dataSet, baseLanguage, targetLanguage, username, password)
FindSchoolsScoreboardQPSRankingOverall(dataSet, username, password)
FindSchoolsScoreboardWeightedRanking(dataSet, baseLanguage, targetLanguage, returnQPSRanking, username, password)
FindSchoolsScoreboardWeightedRankingForLanguage(dataSet, baseLanguage, targetLanguage, username, password)
FindSchoolsScoreboardWeightedRankingOverall(dataSet, username, password)
FindSchoolsScoreboardWeightedQPSRankingForLanguage(dataSet, baseLanguage, targetLanguage, username, password)
FindSchoolsScoreboardWeightedQPSRankingOverall(dataSet, username, password)
GenerateSQLForScoreboardSchoolStats(BaseLanguage, TargetLanguage, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetScoreboardSchoolStats(DataSet, BaseLanguage, TargetLanguage, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetScoreboardSchoolStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetScoreboardSchoolStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolWeightedScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolWeightedScoreboardStatsOverall(DataSet, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetScoreboardClassStats(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS)
GetScoreboardClassStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS)
GetScoreboardClassStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS)
GetSpecificUsersScoresFromDatabase(datasetID, userIDs)
GetScoreboardCountryStatsOverall(DataSet, Offset, NumberOfRows)
GetStateScoreboardStatsOverall(dataSet, countryID, offset, numberOfRows)
GetScoreboardSchoolStatsForPartner(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, PartnerListOptionID)
GetScoreboardSchoolStatsForPartnerAndLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, PartnerListOptionID)
GetScoreboardSchoolStatsForPartner(DataSet, Offset, NumberOfRows, RankByQPS, PartnerListOptionID)
.ctor()
GetIDsOfCurrentSchoolScoreboardDataSets()
GetIDsOfCurrentUserScoreboardDataSets()
GetAllCurrentClassUserSchoolRelations(periodStartDate, periodEndDate)
GetCurrentClassUserSchoolRelationsForSpecificUsers(userIDs, periodStartDate, periodEndDate)
GetAllStrongClassSubjectLinks()
GetAllSchoolScoreboardGroupingInfo()
GetAllClassScoreboardGroupingInfo()
GetAllUserScoresForDataSets(dataSetIDs)
RebuildSchoolScoreboardsForAllCurrentDatasets()
RebuildSchoolScoreboardsForSpecificDatasets(datasetIDs)
CompileSchoolScoreboardDataForSpecificDatasets(datasetIDs)
GetTimeOfLastSchoolScoreboardRebuild()
AggregateOverallScores(scores, filterByGrouping, userGroupingLookups, allowedGroupings, groupSizes)
AggregateLanguageScores(scores, filterByGrouping, userGroupingLookups, allowedGroupings, groupSizes)
RankUserScores(userScores, usersPrimarySchools)
RankUserLanguageScores(userScoresByUserID, usersPrimarySchools)
GenerateItemGroupScoreRecordDataTable(itemIDReferenceString, recordSets)
GenerateItemGroupLanguageScoreRecordDataTable(itemIDReferenceString, recordSets)
GenerateUserLanguageScoreRecordDataTable(recordSets)
GenerateUserScoreRecordDataTable(recordSets)
GeneratePrecalculatedSchoolScoresDataTable(recordSets)
GeneratePrecalculatedSchoolLanguageScoresDataTable(recordSets)
PauseQueueMuncherAndRebuildUserScoreboardsForAllCurrentDatasets(updateSchoolLeaderboards)
SendQueueWorkerStartStopMessage(workerID, startWorker)
RebuildUserScoreboardsForAllCurrentDatasets(updateSchoolLeaderboards)
RebuildUserScoreboardsForSpecificDatasets(datasetIDs, updateSchoolLeaderboards)
GenerateGlobalUserScoreboardRecords(datasetIDs, userScores, userLanguageScores)
GenerateSchoolUserScoreboardRecords(datasetIDs, userScores, userLanguageScores)
GetAllNonStudentUsers()
UpdateDisplayedSchoolAchievements()
GetDatasetAndTargetSubjectCountForActiveOfficialCompetitions()
.ctor()
.cctor()
IsLiveCachedDatasetID(dataSetID)
.ctor(sessionID, dataSetID)
.ctor(session, dataSetID)
GetRankingStats(session, dataSetID, baseLanguage, targetLanguage)
GetRankingStats(baseLanguage, targetLanguage)
GetRankingPositions(session, dataSetID, baseLanguage, targetLanguage)
GetRankingPositionsFromCache(classID, schoolID, userID, datasetID, baseLanguageID, targetLanguageID)
AppendOrdinalToRanking(ranking)
GetUsersScoreFromDB(userID, dataSet, baseLanguage, targetLanguage)
UpdateScoreboards(scoresItem)
CacheClassSchoolCountryInfo()
LoadScoreboardsForUser(dataset, userID)
LoadScoreboardObjectsForDatasetForUser(dataset, userID)
PublishScoreboardObjectsToRedis(dataset, scoreboardObjects)
CreateScoreboardEntry(firstname, surname, score)
SeedDatasetClassScoreboardWithEmptyResults(dataSetID, targetLanguages)
GetAllLicencedClassSchoolCountryFromDB()
GetSchoolCountryFromDB(schoolID)
GetClassSchoolCountryFromDB(classID)
MakeRedisCacheKey(keyType, dataset, baseLanguageID, targetLanguageID, param)
RemoveAllExpiredScoreboards()
StoreStatsSaveRequestIDSuccess(requestID)
GenerateStatsSaveRequestIDKey(requestID)
HasStatsSaveRequestCompletedSuccessfully(session, requestID)
HasStatsSaveRequestCompletedSuccessfully(requestID)
GetUserScoreboardLastUpdateTime(status)
GetScoreboardUserStatsOverall(dataSet, offset, numberOfRows)
GetScoreboardUserStatsForLanguage(dataSet, baseLanguage, targetLanguage, offset, numberOfRows)
GetScoreboardUserStats(dataSet, baseLanguage, targetLanguage, offset, numberOfRows)
GetScoreboardUserStatsFromDatabase(dataSet, baseLanguage, targetLanguage, offset, numberOfRows)
ConvertUserStatsWithOnlineStatus(stats)
GetScoreboardUserStatsFromRedisForAdmin(dataSet, baseLanguage, targetLanguage, offset, numberOfRows)
GetScoreboardUserStatsFromRedis(dataSet, baseLanguage, targetLanguage, offset, numberOfRows)
GetScoreboardUserStatsFromRedisInternal(dataSet, baseLanguage, targetLanguage, offset, numberOfRows)
FindUsersScoreboardRankingOverall(dataSet, username)
FindUsersScoreboardRankingForLanguage(dataSet, baseLanguage, targetLanguage, username)
FindUsersScoreboardRanking(dataSet, baseLanguage, targetLanguage, username)
FindUsersScoreboardRankingInDB(userID, dataSet, baseLanguage, targetLanguage)
FindUsersScoreboardRankingInRedis(userID, dataSet, baseLanguage, targetLanguage)
FindUserScoresAroundMine(session, dataSet, baseLanguage, targetLanguage, projectedScore)
FindUserClassScoresAroundMine(session, dataSet, baseLanguage, targetLanguage, classID, projectedScore)
FindUserSchoolScoresAroundMine(session, dataSet, baseLanguage, targetLanguage, schoolID, projectedScore)
FindUserCountryScoresAroundMine(session, dataSet, baseLanguage, targetLanguage, countryID, projectedScore)
FindUserScoresAroundMine(session, dataSet, baseLanguage, targetLanguage, groupingKey, groupingID, projectedScore)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(dataSetID, schoolID)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ToScoreboardUserStat(online)
GenerateUserHash(userID)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetLPTotalQuestions()
BuildLPTotalQuestionsCache()
GetTotalQuestionsForDataSet(dataSet)
BuildTotalQuestionsForDataSetCache(DataSet)
GetTotalQuestionsAndDataSetInfoForDataSet(dataSet)
BuildTotalQuestionsAndDataSetInfoForDataSetCache(DataSet)
CanUseVSP()
CanUseVSPCheck()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GenerateDatasetInfoCacheKey(dataSetID)
GetAllDataSets()
GetRelevantDataSets()
GetRelevantCategorisedDataSetsForSchool(session, schoolID)
GetRelevantDataSetsForSchool(session, schoolID)
BuildRelevantDataSetsCache()
GenerateCacheKeyForDefaultDatasetForSchool(schoolID)
DetermineDefaultDatasetForSchool(schoolID)
GetSchoolDefaultDatasetIDFromDatabase(schoolID)
GetSpecificDataSetInfoInReturnObject(dataSetID)
GetSpecificDataSetInfo(dataSetID)
GetSpecificDataSetInfoWithCurrentTime(DataSetID)
BuildSpecificDataSetInfoCache(DataSetID)
GetDefaultDataSetGroups()
BuildDefaultDataSetGroupsCache()
GenerateDataSetFilteringSQL(SelectionInfo)
GenerateDataSetFilteringSQL(SelectionInfo, ColumnName)
CreateDataSetSelectionForSingleDataSet(Value)
CreateDataSetSelectionForSingleGroup(Value, RestrictToActiveDataSet)
CreateDataSetSelectionForDefaultDataSets(RestrictToActiveDataSet)
GetActiveDatasetsFromDatabase(futureBufferMinutes)
GetActiveDataSetIDs()
GetAllKnowledgeDataSets(sessionID, isCurrent)
IsDataSetActive(datasetID)
GetDatasetTargetSubjectsForDisplay(datasetID, inUseOnly)
isUserSubscribedToDataset(UserID, datasetID)
GenerateActivityFilterForTranslationDirection(translationDirection)
GetDataSetTargetContentInfo(datasetID)
GenerateCacheKeyForDataSetTargetContentInfo(datasetID)
RetrieveDataSetTargetContentInfoFromDatabase(datasetID)
CreateScoresDataset(conn, tran, KnowledgeSetID, Name, Description, Purpose, StartDate, EndDate, targetUsersType, targetContentType, targetActivitiesType, InterStudentScoreboard, InterClassScoreboard, InterSchoolScoreboard, ClearCacheOfDatasetIDs)
CreateDatasetPair(conn, tran, KnowledgeSetName, KnowledgeSetDescription, ScoreDatasetName, ScoreDatasetDescription, Purpose, StartDate, EndDate, targetUsersType, targetContentType, targetActivitiesType, InterStudentScoreboard, InterClassScoreboard, InterSchoolScoreboard, clearCacheOfDatasetIDs)
UpdateDataSetDates(conn, tran, DataSetID, StartDate, EndDate)
UpdateDataSetTargetContentType(conn, tran, DataSetID, ContentType, ClearExistingLookups)
UpdateDataSetTargetUserType(conn, tran, DataSetID, UserType, ClearExistingLookups)
UpdateDataSetTargetActivityType(conn, tran, DataSetID, ActivityType, ClearExistingLookups)
DeleteDataset(conn, tran, DataSetID)
AddDataSetSchoolLookups(DataSetID, SchoolsToAdd, conn, tran)
UpdateDataSetSchoolLookups(DataSetID, SchoolIDs, conn, tran)
RemoveDataSetSchoolLookups(DataSetID, SchoolsToRemove, conn, tran)
RemoveAllDataSetSchoolLookups(DataSetID, conn, tran)
AddDataSetClassLookups(DataSetID, ClassesToAdd, conn, tran)
UpdateDataSetClassLookups(DataSetID, ClassIDs, conn, tran)
RemoveDataSetClassLookups(DataSetID, ClassesToRemove, conn, tran)
RemoveAllDataSetClassLookups(DataSetID, conn, tran)
AddDataSetUserLookups(DataSetID, UsersToAdd, conn, tran)
UpdateDataSetUserLookups(DataSetID, UserIDs, conn, tran)
RemoveDataSetUserLookups(DataSetID, UsersToRemove, conn, tran)
RemoveAllDataSetUserLookups(DataSetID, conn, tran)
AddDataSetModuleLookups(DataSetID, ModulesToAdd, conn, tran)
UpdateDataSetModuleLookups(DataSetID, ModuleIDs, conn, tran)
RemoveDataSetModuleLookups(DataSetID, ModulesToRemove, conn, tran)
RemoveAllDataSetModuleLookups(DataSetID, conn, tran)
AddDataSetListLookups(DataSetID, ListsToAdd, conn, tran)
UpdateDataSetListLookups(DataSetID, ListIDs, conn, tran)
RemoveDataSetListLookups(DataSetID, ListsToRemove, conn, tran)
RemoveAllDataSetListLookups(DataSetID, conn, tran)
AddDataSetTestLookups(DataSetID, TestsToAdd, conn, tran)
UpdateDataSetTestLookups(DataSetID, TestIDs, conn, tran)
RemoveDataSetTestLookups(DataSetID, TestsToRemove, conn, tran)
RemoveAllDataSetTestLookups(DataSetID, conn, tran)
GenerateSubjectsDataTable(Subjects)
AddDataSetSubjectLookups(DataSetID, SubjectsToAdd, conn, tran)
UpdateDataSetSubjectLookups(DataSetID, SubjectIDs, conn, tran)
RemoveDataSetSubjectLookups(DataSetID, SubjectsToRemove, conn, tran)
RemoveAllDataSetSubjectLookups(DataSetID, conn, tran)
AddDataSetActivityTypeLookups(DataSetID, ActivityTypesToAdd, conn, tran)
UpdateDataSetActivityTypeLookups(DataSetID, ActivityTypeIDs, conn, tran)
RemoveDataSetActivityTypeLookups(DataSetID, ActivityTypesToRemove, conn, tran)
RemoveAllDataSetActivityTypeLookups(DataSetID, conn, tran)
AddDataSetActivitySubtypeLookups(DataSetID, ActivitySubtypesToAdd, conn, tran)
UpdateDataSetActivitySubtypeLookups(DataSetID, ActivitySubtypeIDs, conn, tran)
RemoveDataSetActivitySubtypeLookups(DataSetID, ActivitySubtypesToRemove, conn, tran)
RemoveAllDataSetActivitySubtypeLookups(DataSetID, conn, tran)
RemoveAllDataSetTargetUserLookups(DataSetID, conn, tran)
RemoveAllDataSetTargetContentLookups(DataSetID, conn, tran)
RemoveAllDataSetTargetActivityLookups(DataSetID, conn, tran)
RemoveAllDataSetTargetLookupsOfAllTypes(DataSetID, conn, tran)
InferSubjectsFromModuleSelection(moduleIDs, conn)
UpdateDataSetTargetContentToMatchFilter(DataSetID, filter, conn, tran)
UpdateDataSetTargetUsersToMatchFilter(DataSetID, filter, conn, tran)
GetExpandedDataSetTargetContentInfoForCompetition(datasetID, hostSchoolID)
GetExpandedDataSetTargetUserInfo(datasetID)
GetCurrentMonthDataSet()
GetCurrentMonthDataSetFromDatabase()
GenerateGetAllActiveDataSetsOnSpecificDayCacheKey(day, includeHoursPrior, includeHoursAfter)
GetAllActiveDataSetsOnSpecificDay(day, includeHoursPrior, includeHoursAfter)
GetAllActiveDataSetsOnSpecificDayFromDatabase(day, includeHoursPrior, includeHoursAfter)
GetDefaultDatasetForSchoolOnDate(schoolID, comparisonDate)
GetSpecificDataSetsForStatsSaving(dataSetIDs)
GenerateCacheKeyForDataSetForStatsSaving(dataSetID)
GetSpecificDataSetsForStatsSavingFromDatabase(dataSetIDs)
GenerateDataSetStatusCacheKey(ID)
GetDataSetStatus(ID)
GetDataSetStatusFromDB(ID)
RemoveIndexOfActiveDatasetsFromCache()
RemoveDataSetFromCache(ID, clearActiveDatasets)
RemoveMultipleDataSetFromCache(DatasetIDs, clearActiveDatasets)
RemoveAllActiveDataSetsFromCache()
GetKnowledgeSetIDForStatsDataset(statsDataSetID)
SendAlertsForSoonExpiringDatasetsWithoutReplacements()
GetOverallAndMonthlyDatasetsForThisYearFromDatabase()
GetOverallAndMonthlyDatasetsForThisYear()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(dataset)
get_Category()
get_Southern()
DetermineCategory()
get_IsYearlyDataSet()
get_IsMonthlyDataSet()
SimplifyName()
get_IsWeeklyDataSet()
Compare(filter1, filter2)
.ctor()
Compare(filter1, filter2)
GetTargetSubjectIDs()
CleanUpTargetIDs()
ReplaceNullsWithEmptyLists()
.ctor()
.ctor()
Compare(filter1, filter2)
ApplyClassesSubfilter(filteredClassIDs)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
FromStatsDataSet(baseInfo)
.ctor()
.ctor()
.ctor(selectionType, targetIDs, restrictToActiveDataSets)
CreateDataKey()
.ctor()
ToString()
VerifyAndUpdateAddressDetails(sessionID, schoolID, replacementAddressDetails, principalEmail, datasetID)
EmailTeachersInSchoolAboutAddressChange(db, userWhoChangedID, schoolID, original, replacement, originalPrincipalsEmail, replacementPrincipalsEmail, numberOfCertificates)
GetOtherKeyContactsInSchool(schoolID, userWhoChangedID, departmentID)
BuildAddressSummary(db, address, principalsEmail)
GetSchoolContactDetailsIfAddressNotVerified(sessionID, schoolID)
.ctor()
.ctor()
SearchForSchool(session, schoolSearchTerms, numberOfResults)
SearchForSchoolAfterValidation(schoolSearchTerms, numberOfResults)
GetSchoolsWithLicensedUsers(SessionID)
GetAllSchoolIDs(excludeNonSchools)
GetAllCurrentlyLicencedSchoolIDs()
GetAllSchools()
GetSchoolDataWithReturnObject(schoolID)
GetSchoolData(schoolID)
GetSchoolByName(schoolName)
GetRelevantSchools(SessionID, ShowAdminsAllSchools)
FindPotentialSchoolClashes(session, name, code)
FindSchoolsWithCode(code)
GetRelevantSchools(SessionID)
GetSchoolsThisUserTeachesInFromSessionID(SessionID)
GetSchoolsThisUserTeachesIn(userID)
GetSchoolFromClassID(SessionID, ClassID, authorize)
GetRelevantSchoolFilterDetails(sessionID)
GetRelevantSchoolsContactDetails(SessionID)
GetSchoolContactDetails(SessionID, SchoolID)
GetSchoolContactDetailsAsync(SchoolID)
ValidateThatUserTeachesInThisSchool(Session, SchoolID, conn)
CreateSchool(session, Name, Code, Country, State, ContentTemplates, DefaultDataSetGroup)
EditCoreSchoolData(SessionID, ID, NewName, NewCode, NewCountry)
EditSchoolFullContactDetails(sessionID, schoolData)
EditSchoolContactDetails(SessionID, ID, NewName, NewCode, NewCountry, NewState, NewCity, NewSuburb, NewAddress1, NewAddress2, NewPostCode, NewPhoneNumber, NewPrincipalsName)
DeleteSchool(SessionID, ID)
CreateAndSetUpSchoolWithExistingLicence(SessionID, SchoolName, IdentifyingCode, Country, State, ContentTemplates, DefaultDataSetGroup, DefaultClassName, LicenceID)
CreateAndSetUpSchoolWithNewLicence(session, SchoolName, IdentifyingCode, Country, State, ContentTemplates, DefaultDataSetGroup, DefaultClassName, licence, Products)
CreateAndSetUpSchoolAfterValidation(Session, SchoolName, IdentifyingCode, Country, State, ContentTemplates, DefaultDataSetGroup, DefaultClassName, licence)
FindSchoolIDForUsername(username)
GetFirstSchoolIDForUserID(userID)
GetValidWeightDivisionsForScoreboard()
GetSchoolDetailsFromIDAsync(schoolID)
GetSchoolDetailsFromID(session, schoolID)
CheckIfSchoolHasValidLicence(session, schoolID)
GetSchoolUsernameTemplates()
IsNonSchool(schoolID)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
UpdateDashUserPresence(sessionID, userID, activityID, translationDirection, baseLanguage, targetSubject, multiplayer)
RenewDashUserPresence(sessionID)
ClearDashUserPresence(sessionID)
GetNumberOfUsersActiveInDashContext(baseLanguage, targetSubject, activityID, translationDirection)
RemoveExpiredUserPresenceItems()
FindPopularDashActivitiesInModule(userID, schoolID, baseLanguage, targetSubject, targetModuleID, maxResults)
FindPopularDashActivitiesInSubject(userID, schoolID, baseLanguage, targetSubject, maxResults)
FindPopularDashActivitiesInTask(userID, schoolID, baseLanguage, targetSubject, taskID, maxResults)
.ctor()
UpdateDashUserPresence(session, request)
UpdateDashUserPresence(sessionID, userID, activityID, translationDirection, multiplayer)
RenewDashUserPresence(session)
GetNumberOfUsersActiveInDashContext(session, activityID, translationDirection)
GetNumberOfUsersActiveInDashContext(activityID, translationDirection)
RemoveExpiredUserPresenceItems()
FindPopularDashActivities(session, request)
FindPopularDashActivities(userID, schoolID, request)
MergePopularDashActivitiesResults(results)
.ctor()
.cctor()
AllocateUserToDashGame(session, request)
AllocateUserToDashGame(userID, userMaxPrivileges, datasetID, activityID, translationDirection, peerJSID, startInXSeconds, projectedBestTime)
FindAppropriateExistingGameToJoin(userID, datasetID, activityID, translationDirection)
GetGameDetails(gameID)
GetChosenQuestionsForGame(gameID)
GetUsersInDashGame(gameID)
AddUserToDashGame(gameID, userID, peerJSID, userSpaceAlreadyReserved)
LeaveDashGameLobby(session, gameID)
RemoveUserFromDashGame(gameID, userID, onlyIfGameHasntStarted)
GenerateNewDashSeriesAndInitialGame(creatorUserID, userMaxPrivileges, datasetID, activityID, translationDirection, startInXSeconds, reserveSpaceForCreator, userProjectedTime)
GenerateNewDashGame(creatorUserID, userMaxPrivileges, datasetID, activityID, baseLanguage, targetSubject, translationDirection, seriesID, startInXSeconds, reserveSpaceForCreator, userProjectedTime)
IsUserMemberOfGame(userID, gameID)
UpdateDashGameStartTime(session, gameID, XSecondsFromNow)
UpdateDashGameStartTime(gameID, XSecondsFromNow)
StartDashGameImmediately(session, gameID)
StartDashGameImmediately(gameID)
GetSeriesDetails(seriesID)
GenerateNewDashSeries(creatorUserID, datasetID, baseLanguage, targetSubject)
GenerateUniqueRoomKey()
.ctor()
.ctor()
SelectQuestionsForReviewQuiz(session, activityID, translationDirection)
SelectQuestionsForReviewQuiz(activityID, translationDirection)
SelectQuestions(validQuestions, questionMetrics)
GetReviewQuizValidTranslationDirections(session, activityID, translationDirections)
GetReviewQuizValidTranslationDirections(activityID, translationDirections)
GetReviewQuizValidQuestions(session, activityID, translationDirection)
GetReviewQuizValidQuestions(activityID, translationDirection)
GenerateCacheKeyForReviewQuizValidQuestions(activityID, translationDirection)
GenerateCacheKeysForReviewQuizValidQuestionsForAllTranslationDirections(activityID)
RemoveSmartLessonReviewQuizMetadataFromCache(activityID)
RemoveTranslationListReviewQuizMetadataFromCacheAsync(activityID)
RemoveTranslationListReviewQuizMetadataFromCache(activityID)
RemoveMultipleTranslationListReviewQuizMetadataFromCacheAsync(activityIDs)
RemoveMultipleTranslationListReviewQuizMetadataFromCache(activityIDs)
DetermineReviewQuizValidQuestions(activityID, translationDirection)
DetermineReviewQuizValidQuestionsForSmartLesson(activityID)
SelectContentFromSmartLessonSection(group, epQuestionDefinitionsLookup, questionMetricsLookup)
FilterQuestionContent(contentIDs, epQuestionDefinitionsLookup)
FilterOutOutlierTimeQuestions(contentIDs, questionMetricsLookup)
DetermineReviewQuizValidQuestionsForTranslationList(activityID, translationDirection)
IsActivityAppropriateForDash(activitySectionValidQuestions, questionMetrics)
.ctor()
GenerateScoreboardKey(dataset, activityID, translationDirection, scopeType, scopeID)
ValidateScoreboardResultsRequest(session, request)
GetScoreboardResultsForReviewQuiz(session, request)
GetTopResultsForReviewQuiz(datasetID, activityID, translationDirection, scopeType, scopeID, offset, numberOfResults)
GetResultsAroundMineForReviewQuiz(userID, maxPrivileges, datasetID, activityID, translationDirection, scopeType, scopeID, projectedScore)
GetUserRankings(session, request)
GetUserRankingsAndBestTime(session, request)
GetUserRankings(userID, maxPrivileges, datasetID, activityID, translationDirection, classID, schoolID, countryID, projectedBestTime)
GetUsersBestTime(userID, maxPrivileges, datasetID, activityID, translationDirection)
GetUsersBestTimeFromScoreboard(userID, datasetID, activityID, translationDirection)
SaveQuizResultToScoreboards(userID, MaxPrivileges, activityID, translationDirection, statsContexts, targetDatasets, time, onlyReplaceIfBetter)
RemoveSpecificAttemptsFromScoreboard(attemptIDs)
RemoveUserFromScoreboards(userID, activityID, translationDirection, datasets)
RemoveUserFromScoreboards(userID, activityID, translationDirection, datasets, statsContexts)
GetUserIDsForGhostAttempts(userID, maxPrivileges, dataset, activityID, translationDirection, projectedTime)
GetUserIDsForRandomGhostAttempts(dataset, activityID, translationDirection)
.ctor()
.cctor()
SaveReviewQuizAttempt(session, attempt, clientTimezoneOffsetMinutes, requestID)
ValidateNewAttemptDetails(attempt)
SaveEncryptedReviewQuizAttempt(session, encryptedAttempt, clientTimezoneOffsetMinutes, requestID)
StoreAttemptDatasetAssociations(attempt, activity, saveDate, clientTimezoneOffsetMinutes)
SaveStatsToUserProgressTables(session, attempt, activity, clientTimezoneOffsetMinutes)
StoreAttemptActivityUsageRecords(session, attempt)
SaveAttemptToDB(attempt)
GetMultipleAttemptDetails(attemptIDs)
GetDatasetsAssociatedWithAttempts(attemptIDs)
GetGhostAttempts(session, dataset, activityID, translationDirection, minDashVersion, projectedTime)
ChooseGhostAttemptIDs(userID, maxPrivileges, dataset, activityID, translationDirection, projectedTime, includeUsersOwnBestTime)
GetMultipleGhostAttemptDetails(attemptIDs)
GetUsersBestTimeFromDB(userID, dataset, activityID, translationDirection)
GetUsersBestTimeDetailsFromDB(dataset, activityID, translationDirection, userIDs)
GetReviewQuizMilestoneStatus(session, knowledgeset, activityID, translationDirection)
GetReviewQuizMilestoneStatus(userID, knowledgeset, activityID, translationDirection)
GetReviewQuizesWithAvailableMilestones(session, knowledgeset)
GetReviewQuizesWithAvailableMilestones(userID, knowledgeset)
.ctor()
Clone()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(message, attempt, innerException)
GetAllAvailableQuestions()
get_NumberOfAvailableQuestions()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_TotalTime()
.ctor()
get_TotalTime()
get_TotalQuestionsAsked()
ToJSON()
.ctor()
.ctor()
.ctor()
.ctor()
get_TotalTime()
.ctor()
get_TotalTime()
get_TotalQuestionsAsked()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ConvertBlankToNull(input)
StoreNewsFeedItem(item)
GetMetadataForAllNewsFeedPosts(activeOnly)
GetNewsFeedItemData(itemID)
UpdateDraftStatusOfItem(session, itemID, draft)
AssociateNewsFeedItemWithUsers(newsFeedItemID)
IdentifyUsersForNewsFeedTargeting(filter)
PreviewNewsFeedTargetingResults(filter)
StoreNewsFeedItemAssociations(newsFeedItemID, targetUsers)
AssociateNewsFeedItemWithSingleUser(itemID, userID)
UpdateNewsFeedItemInteraction(session, interactions)
UpdateNewsFeedItemInteraction(userID, interactions)
GetRecipientDataForUserAndNewsItem(userID, newsFeedItemIDs)
StoreNewsFeedItemInteractionChanges(recipientData)
GetInteractionDataForNewsFeedItemAfterValidation(itemID)
GetInteractionDataForNewsFeedItem(itemID)
SerialiseFilterObject(filterObject)
DeserialiseFilterObject(filterData)
AnnounceNewsFeedPostInSlack(itemID, undraftedBy, numberOfRecipients)
GetNewsItemsForFilter(session, targetSubject, categories, publicOnly)
GetPublicNewsItemsForFilterFromDatabase(targetSubject, categories, publicOnly, school)
GetActivityFeedItemsForUser(session, count)
GetNewsFeedItemsForUser(userID, schoolID, privilegesLevel, count)
ScoreNewsItem(itemScore, sourceWeighting, numberTakenFromSource, totalNumberTaken, numberOfSources)
GenerateCPLinkForNewsFeedItem(itemID)
.ctor()
.cctor()
GenerateSubTeamNotificationCommand(id, handle)
PostMessageAsync(text, attachments, username, channel, iconURL, iconEmoji, unfurlLinks, unfurlMedia)
PostMessage(text, attachments, username, channel, iconURL, iconEmoji, unfurlLinks, unfurlMedia)
PostMessageAsync(payload)
PostMessage(payload)
GetSlackUserID(userID)
GenerateCacheKeyForSlackID(userID)
GetSlackUserIDFromDatabase(userID)
StoreSlackUserIDToDatabase(dbUsername, slackUsername, allSlackUsers)
ListSlackUsers()
GetSlackUserIDFromUsername(slackUsername, allSlackUsers)
GenerateManageUsersLinkForSchool(schoolID, schoolName)
GenerateManageUsersLinkForSchool(schoolID)
.ctor()
.cctor()
CheerUserOn(session, targetUserIDHash, isReply)
CheerUserOn(session, targetUserID, isReply)
CheerMultipleUsersOn(session, targetUserIDHashes, isReply)
CheerMultipleUsersOn(session, targetUserIDs, isReply)
GetNumberOfAvailableCheersForUser(session)
GetNumberOfAvailableCheersForUser(userID)
GenerateRedisKeyForCheer(recipientID)
AddCheersToRedis(senderID, senderIsTeacher, recipientIDs, isReply)
GetRecentCheersForUser(session)
UpdateCheerCountsWithNewScores(userID, scores)
CheckUserIsEligibleToSendShoutout(session, competitionCode)
ValidateThatUserIsEligibleToSendShoutout(session, competitionCode)
GetLastShoutoutSubmissionDateForUser(userID, competitionCode)
SendShoutout(session, competitionCode, message)
SendShoutoutAfterValidation(userID, schoolID, competitionCode, message, userPrivilegeLevel)
TryGenerateRankingForCommonShoutouts(message, privilegesLevel)
GetShoutoutsForCompetition(competitionCode, numberOfItems, clientHighestShoutoutID)
GenerateShoutoutCacheKey(competitionCode, numberOfItems, clientHighestShoutoutID)
GetShoutoutsForCompetitionFromDatabase(competitionCode, numberOfItems)
GetSpecificShoutout(shoutoutID)
NotifySupportAboutNewShoutout(itemID, userID, userPrivilegeLevel, preApprovalResult)
ApplyRatingToShoutout(parameters)
.ctor()
GetConversationsFromDatabase(conversationIDs)
GetConversationFromDatabase(conversationID, includeMessages, includeParticipants)
GetConversationMessage(messageID)
GetConversationMessages(messageIDs)
GetConversationsForSession(session, schoolID)
GetAppropriateConversationsForSession(session, schoolID)
GetConversationsForSchool(schoolID)
GetConversationsForTeacher(userID)
CheckForNewConversationsForSessionWithReturnObject(session, schoolID, lastKnownMessageID)
CheckForNewConversationsForSession(session, schoolID, lastKnownMessageID)
CheckForNewConversationsForSchool(schoolID, lastKnownMessageID)
CheckForNewConversationsForTeacher(userID, lastKnownMessageID)
GetHighestMessageIDFromConversations(conversations)
CreateConversationAfterValidation(schoolID, department, participants)
CreateNewConversation(session, schoolID, department, participants, initialMessageAuthor, initialMessageText)
CreateNewConversationFromExistingComment(session, schoolID, department, participants, comment)
CreateNewConversationFromExistingMessage(session, schoolID, department, participants, messageID)
AddNewMessageToConversation(session, conversation, author, text)
AddNewMessageToConversationAfterValidation(conversation, author, text, creator)
SendNotificationOfNewMessageToConversationParticipants(conversationID, message)
SendSupportNotificationEmail(author, message, context, supportStaffRecipients, nonSupportStaffRecipients)
SendTeacherNotificationEmails(author, message, context, recipients)
EditMessage(session, messageID, newText)
UpdateConversationDetails(session, conversationID, department)
UpdateConversationParticipants(session, conversationID, participants)
SetConversationStar(session, conversationID, starred)
SetMessageStar(session, messageID, starred)
ArchiveConversation(session, conversationID)
GetDeliveryStatusForMessages(session, messageIDs)
MarkMessageAsRead(session, messageID)
MarkMultipleMessagesAsRead(session, messageIDs)
ValidateThatSessionCanEditConversation(session, conversationID, throwIfNot)
ValidateThatSessionCanEditMessage(session, messageID, throwIfNot)
GenerateCacheKeyForUserLastMessageID(userID)
UpdateLastMessageIDForUser(userID, messageID)
GetIDOfLastMessageForUser(userID)
GetIDOfLastMessageForUserFromDatabase(userID)
GenerateCacheKeyForSchoolLastMessageID(schoolID)
UpdateLastMessageIDForSchool(schoolID, messageID)
GetIDOfLastMessageForSchool(schoolID)
GetIDOfLastMessageForSchoolFromDatabase(schoolID)
GetNumberOfUnreadMessagesForUser(session)
GetMessageNotificationSyncInfoForUser(session)
GetNumberOfUnreadMessagesForUser(userID)
.ctor()
.ctor()
.ctor()
.ctor()
get_Channel()
set_Channel(value)
get_Username()
set_Username(value)
get_Text()
set_Text(value)
get_icon_url()
set_icon_url(value)
get_icon_emoji()
set_icon_emoji(value)
get_Attachments()
set_Attachments(value)
get_UnfurlLinks()
set_UnfurlLinks(value)
get_UnfurlMedia()
set_UnfurlMedia(value)
.ctor()
.ctor()
.ctor()
.ctor()
get_fallback()
set_fallback(value)
get_color()
set_color(value)
get_pretext()
set_pretext(value)
get_author_name()
set_author_name(value)
get_author_link()
set_author_link(value)
get_author_icon()
set_author_icon(value)
get_title()
set_title(value)
get_title_link()
set_title_link(value)
get_text()
set_text(value)
get_fields()
set_fields(value)
get_image_url()
set_image_url(value)
get_thumb_url()
set_thumb_url(value)
get_footer()
set_footer(value)
get_mrkdwn_in()
set_mrkdwn_in(value)
get_ts()
set_ts(value)
.ctor(title, message)
.ctor()
get_title()
set_title(value)
get_value()
set_value(value)
get_short()
set_short(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_id()
set_id(value)
get_name()
set_name(value)
get_deleted()
set_deleted(value)
get_color()
set_color(value)
get_profile()
set_profile(value)
get_is_admin()
set_is_admin(value)
get_is_owner()
set_is_owner(value)
get_is_primary_owner()
set_is_primary_owner(value)
get_is_restricted()
set_is_restricted(value)
get_is_ultra_restricted()
set_is_ultra_restricted(value)
get_has_2fa()
set_has_2fa(value)
get_two_factor_type()
set_two_factor_type(value)
get_has_files()
set_has_files(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(userID, privilegesLevel, schoolID, weighting)
FetchItems(count)
.ctor(userID, schoolID, weighting)
FetchItems(count)
get_Weighting()
set_Weighting(value)
get_ItemsTaken()
get_ItemsRemaining()
get_HasItemsRemaining()
.ctor(userID, weighting)
FetchItems(count)
TakeNext()
ViewNext()
TakeItems(count)
FetchItems(count)
TakeNext()
ViewNext()
TakeItems(count)
get_ItemsRemaining()
get_ItemsTaken()
get_HasItemsRemaining()
get_Weighting()
.ctor(userID, privilegesLevel, schoolID, weighting)
FetchItems(count)
ScoreItems(items)
.ctor(userID, weighting)
FetchItems(count)
GetNewsItemsForUser(userID, count)
ScoreItems(items)
GetNewsItemForCategories(categories, publicOnly)
GetPublicNewsItemsForCategoriesFromDatabase(categories, publicOnly)
CreateSerializationSettings()
GenerateQuestionStatesForQuestions(questions)
GenerateQuestionStatesForQuestionDefinitions(questionDefinitions)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
BulkCreateMCQQuestions(session, uploadDetails)
.ctor()
StoreConcept(session, baseLanguageID, targetSubjectID, concept)
SearchConcepts(sessionID, baseLanguageID, targetSubjectID, searchTerms)
.ctor()
GetQuestionListContent(session, listID)
GetQuestionSummariesForSpecificQuestions(session, questionIDs)
GetSpecificQuestionSummaries(questionIDs)
WhichOfTheseQuestionsCanThisUserEdit(session, questionIDs)
ApplyEditibilityToQuestionSummaries(session, questions)
CreateSerializationSettings()
UpdateQuestionTitle(session, questionID, questionTitle)
StoreQuestion(session, baseLanguageID, targetSubjectID, question, milestoneRuleID)
StoreQuestionAfterValidation(editorUserID, baseLanguageID, targetSubjectID, question, milestoneRuleID)
SearchQuestions(session, baseLanguageID, targetSubjectID, searchTerms, listID)
GenerateCacheKeyForQuestionDefinitionContainer(ID)
RemoveQuestionFromCache(ID)
RemoveQuestionsFromCache(IDs)
GetQuestions(session, questionDefinitionIDs)
GetQuestionsEncrypted(session, questionDefinitionIDs)
GetQuestions(questionDefinitionIDs)
GetQuestionsFromDatabase(questionDefinitionIDs)
CopyQuestion(session, sourceQuestionID, newQuestionID)
DeserializeQuestionDefinition(definition)
GetQuestionAuditSummary(session, questionID)
GetQuestionFeedbackSummary(session, questionID)
GetQuestionsInLists(session, listIDs)
RateQuestion(session, questionID, variablesState, rating, notes)
SendFeedback(session, questionID, variablesState, userAnswers, problem, expectation, schoolID, activityID, sectionID, moduleID, problemAreas)
GetFeedback(session, schoolIDFilter, targetSubject, userFilter, problemAreaCode, questionFilter, status)
GetFeedback(session, schoolIDFilter, targetSubject, userFilter, problemAreaCode, questionFilter, status, numberOfResults)
AttachProblemAreasToFeedbackItems(feedback)
AttachActivityNavigationComponentsToFeedbackItems(feedback)
ArchiveFeedback(session, feedbackIDs)
UpdateFeedbackStatus(session, feedbackIDs, status)
GetSymbolsForSubject(session, targetSubjectID)
StoreQuestionTimesOLD(session, questionTimes)
StoreStudentQuestionTimes(userID, questionTimes)
ToggleDraftModeOfQuestions(session, questionIDs)
UpdateStatusOfQuestions(session, questionIDs, status)
FixMobileQuestionTimes(questionTimes)
StoreQuestionTimesAfterValidation(questionTimes)
NotifyCollaboratorsAboutChangeToQuestion(session, questionID, comment)
CountNumberOfActiveQuestionsForContentFilter(cachedResultID)
GetQuestionTemplates(session, subjectID, isInfoSlide)
RemoveQuestionTemplatesFromCache(isInfoSlide)
GetQuestionTemplatesFromDatabase(session, subjectID, isInfoSlide)
DeepCopyQuestion(session, questionID)
DeepCopyQuestions(session, targetQuestions, copyStyle)
DuplicateQuestions(targetQuestions, userID)
GetQuestionMetadataForSpecificQuestions(questionIDs)
GetQuestionMetricsForQuestionsInList(session, listID)
GetQuestionMetricsForQuestionsInList(listID)
GetQuestionMetricsForQuestionsInListFromDB(listID)
GenerateCacheKeyForQuestionMetricsForList(listID)
InvalidateCachedQuestionMetricsForList(listID)
InvalidateCachedQuestionMetricsForListAsync(listID)
InvalidateCachedQuestionMetricsForMultipleLists(listIDs)
InvalidateCachedQuestionMetricsForMultipleListsAsync(listIDs)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(name, expression, outputOnly)
FindDependentVariableNames(variableNamesIndex)
GetValue()
CreateJavascriptDeclaration(contextVarName)
WrapInTryCatch(declaration)
.ctor(name, functionString)
CreateJavascriptDeclaration(contextVarName)
WrappedFunctionString()
.ctor(sortedVariables, circularDependentNodes)
get_HasCircularDependency()
GetCircularlyDependentVariableNames()
.ctor(name, value)
GetValue()
SetValue(retainedValue)
CreateJavascriptDeclaration(contextVarName)
.ctor(name)
FindDependentVariableNames(variableNamesIndex)
GetValue()
CreateJavascriptDeclaration(contextVarName)
.ctor(variableItem)
get_VariableItem()
get_HasDependencies()
AddDependentVariable(dependentVariable)
DependsOn(variable)
RemoveDependentVariable(variable)
SortTopologically(allVariables)
.ctor(allVariables)
ResolveDependencies(allVariables, variableNamesIndex)
Sort()
IndexVariables(allVariables)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_TypeCode()
.ctor()
.ctor()
.ctor()
.ctor()
get_TypeCode()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(Alignment, FontSize, Width)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_TypeCode()
.ctor()
.ctor()
get_TypeCode()
.ctor()
get_TypeCode()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(eventType)
PublishCurrentTime()
.ctor()
get_PushProvider()
GenerateSecurityToken(validChannels, validFor)
StoreSecurityToken(token, validFor)
PublishMessageToChannel(channelID, message)
.ctor()
.cctor()
SubscribeToDefaultChannels(session)
SubscribeUserToDefaultChannels(userID)
PublishMessageToUser(userID, message)
GenerateKeyForUserSubscriptions(userID)
.ctor()
GetModulesWithLanguagesForSchool(sessionID, schoolID)
CreateModulesReturnObjectFromModulesWithCounts(modulesAvailableToAllClasses, modulesWithCounts, numberOfClasses)
GetModulesWithLanguagesForSchoolAndClasses(session, schoolID, classIDs, modulesAvailableToAllClasses)
GetModulesContainingListActivityTypesForSchoolAndClasses(session, schoolID, classIDs, activityTypes, modulesAvailableToAllClasses)
GetModuleInfoWithReturnObject(moduleID)
GetModuleInfo(moduleID)
GetModuleInfoFromDatabase(moduleID)
GetModuleInfoCacheKey(moduleID)
GetSpecificModules(moduleIDs)
GetModuleLanguages(moduleID)
CheckIfSchoolOwnsModule(schoolID, moduleID)
ValidateThatSessionCanModifyModule(session, schoolID, moduleID, throwIfNot, conn)
ValidateThatSessionCanModifyModule(session, schoolID, moduleID, throwIfNot)
ValidateThatSessionCanModifyModuleAsync(session, schoolID, moduleID, throwIfNot)
ValidateThatSessionCanModifyModuleAsync(session, moduleID, throwIfNot)
CreateNewModule_Legacy(sessionID, schoolID, title, description, baseLanguage, targetLanguage, newTranslations)
CreateNewModule(sessionID, schoolID, title, description, baseLanguage, targetLanguage, newTranslations)
CreateNewModule(session, schoolID, title, description, baseLanguage, targetLanguage, newTranslations)
AddTranslationsForCreationToExistingModule(session, schoolID, moduleID, folderPath, newTranslations)
CreateModule(conn, schoolID, title, description, baseLanguage, targetLanguage, creator, applicationID, parentModule, subscribeToUpdatesFromParentModule, highlighted, visibleToStudents, moduleType)
FindNamesOfSchoolTasksUsingThisModule(schoolID, moduleID)
DeleteModule(sessionID, schoolID, moduleID, overrideLinkedTasksWarning)
DeleteModuleAfterSessionValidation(moduleID, overrideLinkedTasksWarning, userID)
DeleteModuleAsAdminIgnoringSafetyChecks(moduleID, userID)
DeleteModuleAfterAllSafetyChecks(moduleID, ancestor, deletedBy)
GetModulesForDataSet(DataSet)
GetModulesForDataSetFromDatabase(DataSet)
CreateCopyOfModuleForSchool_Legacy(session, schoolID, moduleID, subscribeToFutureChanges, highlighted, visibleToStudents)
ConvertToLegacyModuleReturnObject(contentModuleReturnObject)
CreateCopyOfModuleForSchool(session, schoolID, moduleID, subscribeToFutureChanges, highlighted, visibleToStudents)
CreateCopyOfModuleForStudent_Legacy(session, moduleID, subscribeToFutureChanges)
CreateCopyOfModuleForStudent(session, moduleID, subscribeToFutureChanges)
CreateCopyOfModuleAfterValidation(moduleID, creatorID, schoolOwnerID, subscribeToFutureChanges, highlighted, visibleToStudents, moduleType)
AddTemplateModulesToSchoolsAfterValidation(newLookups, remainSubscribed)
RemoveTemplateModulesFromSchoolsAfterValidation(schoolModulePairs)
UpdateModuleInfo(session, schoolID, moduleID, newTitle, newDescription)
ThrowIfSessionCannotModifyModule(session, schoolID, module)
ShareModule(session, moduleID, schoolID, sharedModuleType, publisherDetails)
UnshareModule(session, schoolID, moduleID)
GetModuleDescription(sessionID, moduleID)
CountUniqueWordsInContentLists(db, lists)
GetModulesForSpecificSubjectAndSchool(session, targetSubjectID, schoolID)
GetModuleWithTemplateInfo(moduleID)
GetModuleIDsSubscribedToUpdatesFromThisModule(moduleID, includeOriginalModuleID)
GetEquivalentModuleForSchool(session, schoolID, moduleID)
GetEquivalentModuleForSchoolAfterValidation(schoolID, moduleID, enforceVisibleToStudents)
UpdateModuleHighlighted(session, schoolID, moduleID, highlighted)
UpdateModuleVisibilityToStudents(session, schoolID, moduleID, visibleToStudents)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(moduleID, schoolID)
.ctor()
ToModuleInfoWithLanguages()
.ctor(moduleID, schoolID, moduleType, visibleToStudents, highlighted)
ToPair()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
RegisterForLanguagesLeague(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents)
AddLanguagesLeagueContactUsMessage(Name, Email, School, TheirMessage)
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
RegisterForWorldChampionships2011(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents)
RegisterForWorldChampionships2011WithPromoCode(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2012(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2013(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2014(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2015(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForEducationPerfectWorldSeries2014(Name, SchoolName, Position, Email, PhoneNumber, Subjects, Comments, PromoCode)
RegisterForEducationPerfectWorldSeries2015(Name, SchoolName, Position, Email, PhoneNumber, Subjects, Comments, PromoCode)
AddWorldChampionshipsContactUsMessage(Name, Email, School, TheirMessage)
.ctor()
GetNews(NewsChannel)
GetNewsItems(newsItemIDs)
GetSchoolScores(DataSet)
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetServerTime()
GetSpecificDataSetInfoWithCurrentTime(DataSetID)
GetLPTotalQuestions(DataSet)
GetTotalQuestionsAndDataSetInfoForDataSet(DataSet)
GetUserScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows)
GetUserScoreboardStatsOverall(DataSet, Offset, NumberOfRows)
GetSchoolScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolScoreboardStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
FindUsersScoreboardRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindUsersScoreboardRankingOverall(DataSet, Username, Password)
AddInAppFeedback(SessionID, Feedback, Email)
AddInAppFeedback2(SessionID, Feedback, Context, Email)
.cctor()
.ctor()
GetServerTime()
GetSpecificDataSetInfoWithCurrentTime(DataSetID)
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLanguagesForScoreboard(DataSet)
GetValidModulesForScoreboard(DataSet)
GetValidWeightDivisionsForScoreboard(DataSet)
GetAllCountries()
GetUserScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows)
GetUserScoreboardStatsOverall(DataSet, Offset, NumberOfRows)
GetSchoolScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolScoreboardStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolWeightedScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolWeightedScoreboardStatsOverall(DataSet, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetClassScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS)
GetClassScoreboardStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS)
GetCountryScoreboardStatsOverall(DataSet, Offset, NumberOfRows)
GetStateScoreboardStatsOverall(DataSet, CountryID, Offset, NumberOfRows)
GetScoreboardSchoolStatsForPartner(DataSet, Offset, NumberOfRows, RankByQPS, PartnerListOptionID)
GetScoreboardSchoolStatsForPartnerAndLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, PartnerListOptionID)
FindUsersScoreboardRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindUsersScoreboardRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardWeightedRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardWeightedRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardQPSRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardQPSRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardWeightedQPSRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardWeightedQPSRankingOverall(DataSet, Username, Password)
GetOverallAwards(datasetID)
GetScoreboardPartners()
GetFilteredScoreboardPartners(languages, maths, science, english, socialSciences)
GetDatasetTargetSubjects(datasetID)
GetCurrentMonthDataSet()
GetCompetitionMilestones(competitionCode)
GetCompetitionMiletonesForScoreboard(competitionCode)
GetCountriesForThisDataset(DatasetID)
GetStatesForCountry(countryID)
CheerStudentOn(sessionID, userIDHash, isReply)
GetNumberOfAvailableCheersForUser(sessionID)
CheckUserIsEligibleToSendShoutout(SessionID, CompetitionCode)
GetShoutoutsForCompetition(CompetitionCode, NumberOfItems, HighestKnownID)
SendShoutout(SessionID, CompetitionCode, Message)
GetOverallAndMonthlyDatasetsForThisYear()
.cctor()
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
RegisterForWorldCup2010(Name, SchoolName, Position, Email, PhoneNumber, Address)
AddWorldCupContactUsMessage(Name, Email, School, TheirMessage)
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
RegisterForOlympics2010(Name, SchoolName, Position, Email, PhoneNumber, Address)
AddOlympicContactUsMessage(Name, Email, School, TheirMessage)
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
AddContactUsMessage(Name, Email, School, TheirMessage)
RequestLPFreeTrial(Firstname, Surname, SchoolName, Position, SchoolPhone, Cellphone, Email, Address, City, State, Country, Languages, Comments, NumberOfLanguageStudents)
RequestEPTestDrive(Firstname, Surname, SchoolName, Position, Email, Subjects, Comments, signUpStep)
GetCompetitionInfo(compCode, timezoneOffset)
RequestCompetitionRegistration(Firstname, Surname, SchoolName, Position, SchoolPhone, Cellphone, Email, Comments, NumberOfLanguageStudents, competitionCode, competitionName)
ClearEntireCache()
GetSummary(sessionID)
GetItemsOfType(sessionID, typeNameFilter)
DeleteItemByCacheKey(sessionID, cacheKey)
GetModulesForCaching(sessionID)
GetTranslationListsForCaching(sessionID, moduleIDs)
CacheTranslationLists(sessionID, translationListIDs)
FlushCache(sessionID, level)
.ctor()
ImportComments()
DoWrites(importDate, crmDB, commentsCount, lastCommittedCount, areaID, currentCommentRecordBatch)
CreateInsertSqlFor(currentCommentRecordBatch, importDate, areaID)
ParseComments(schoolID, schoolComment, ownerLookup, nameLookup)
FindAuthor(ownerLookup, nameLookup, currentComment)
SlowMethod()
Throw()
ThrowRecordException()
FastMethod()
LogError()
ConvertLocalTimeToDBTime(LocalTime)
GetNZMidnightForCurrentDateInUTC()
PutStringInCache(input, Key, Expiry_mins)
AddStringToCache(input, Key, Expiry_mins)
GetStringFromCache(Key)
FlushCache()
GetOrSetStringInCache(input, Key, Expiry_mins)
PingMemcached(numberOfTimes)
TestSyncBlocking()
TestAsyncBlocking()
TestAsyncBlockingAsync()
GetIPAddress()
getUsersIPAddress()
.ctor()
.cctor()
SetValues(sessionID, facts)
GetValues(sessionID, keys)
GetAllValuesInPath(sessionID, path)
GetAllValuesInPaths(sessionID, paths)
DeleteKeys(sessionID, keys)
DeleteAllKeysInPath(sessionID, path)
DeleteAllKeysInPaths(sessionID, paths)
.ctor()
ExposeTypes()
.ctor()
RegisterForCPLoginNotifications(ClientID)
DeregisterForCPLoginNotifications(ClientID)
RandomMethod(MockSession)
.ctor()
.ctor()
LoginExtra(UserName, Password, AppID, FlashVersion)
SecureLogin(encryptedUsernameBase64, encryptedPasswordBase64, appID, flashVersion)
WebsiteLoginWithDeviceSession(deviceSessionID, appID, browserVersion)
WebsiteLogin(username, password, appID, browserVersion)
LoginWithDeviceSession(SessionID, appID, flashVersion)
LoginWithSessionPromise(PromiseID, appID, flashVersion)
GenerateSessionPromiseFromCurrentSession(SessionID)
DirectLogin(sessionID, hashKey, isImpersonating, flashVersion)
NewDirectLogin(sessionID, hashKey, isImpersonating, flashVersion, appID)
RegisterAndLoginUsingSSO(providerCode, serviceUrl, serviceTicket, flashVersion)
DirectLoginAsUser(adminSessionID, userID, flashVersion)
GetIndividualPaymentURLForUser(username, password)
AcceptEULA(sessionID)
ChangeBaseLanguage(SessionID, baseLanguage)
GetAllSchoolsSSODetails()
FindSSOSchoolDetailsFromSchoolName(schoolKeyword)
GetAppData(SessionID, ChosenClass, ChosenModule)
GetAppDataForSpecificDataSet(SessionID, ChosenClass, ChosenModule, DataSet)
GetAppDataWithCustomDataSetSelection(SessionID, ChosenClass, ChosenModule, DataSetSelectionOptions)
GetAppDataForSelectedTask(SessionID, ChosenClass, ChosenModule, DataSetSelectionOptions, taskID)
GetAppDataForActivitySelection(SessionID, ChosenClass, ActivitySelectionOptions, DataSetSelectionOptions)
UpdateStats(SessionID, Data)
StoreProgressWithMilestones(sessionID, data, clientTimezoneOffsetMinutes)
StoreActivityProgress(sessionID, activityTypeID, baseLanguageID, targetLanguageID, data, clientTimezoneOffsetMinutes)
StoreActivityProgress2(sessionID, activityTypeID, baseLanguageID, targetLanguageID, data, clientTimezoneOffsetMinutes, requestID)
HasStatsSaveRequestCompletedSuccessfully(sessionID, requestID)
StoreQuestionTimes(sessionID, questionTimes)
StoreActivityUsageData(sessionID, questionTimes, listUsage)
StoreActivityUsageData2(sessionID, questionTimes, listUsage, totalSecondsInTest)
StoreActivityUsageData3(sessionID, questionTimes, listUsage, totalSecondsInTest, retryState, attemptUniqueKey)
CreateContentListAndAddToModule(SessionID, SchoolID, ModuleID, Title, Description, Ancestor, BaseLanguage, TargetSubject, Purpose, Structure, Data)
UpdateTranslationList(SessionID, ListID, NewTitle, NewDescription, Data)
DeleteTranslationList(SessionID, ListID)
StoreFactListDisplayOptions(sessionID, contentListID, options)
CreateCopyOfModuleForStudent(sessionID, moduleID, subscribeToFutureChanges)
GetEquivalentModuleForSchool(sessionID, schoolID, moduleID)
RenewSessionLicence(SessionID)
EndSession(SessionID)
GenerateDeviceSessionFromLPSessionID(SessionID, ExpiryDate)
GenerateNewDeviceSessionForUserLogin(username, password, expiryDate)
GetClassUsers(SessionID)
FindUserScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, projectedScore)
FindUserClassScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, classID, projectedScore)
FindUserSchoolScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, schoolID, projectedScore)
FindUserCountryScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, countryID, projectedScore)
GetRankingStatsAndPositionsForDataSetClean(sessionID, DataSet)
GetRankingPositionsForDataSet(SessionID, DataSet)
GetLPTotalQuestions()
GetTotalQuestionsForDataSet(DataSetID)
GetTotalQuestionsAndDataSetInfoForDataSet(DataSet)
SuggestSynonym(SessionID, TranslationID, Suggestion, SuggestionLanguage)
SuggestSynonymWithReturn(SessionID, TranslationID, Suggestion, SuggestionLanguage)
GetUserIDsForFacebookIDs(FacebookIDs)
AssociateFacebookIDWithUser(SessionID, FacebookID, UserID)
GetUserIDForFacebookID(FacebookID)
SendFeedback(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas)
SendFeedback2(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas, schoolID, activityID, sectionID, moduleID)
RateQuestion(sessionID, questionID, variablesState, rating, notes)
AddInAppFeedback(SessionID, Feedback, Context, Email)
SubmitExpiredLicenceFeedback(userID, feedback)
SubmitEPSubjectRequestFeedback(sessionID, selectedSubjects, message)
ReportProblemsWithTranslation(sessionID, contentID, problems)
GetCategorisedProblemTypes()
GetCheers(sessionID)
CheerStudentsOn(sessionID, userIDHashes, isReply)
GetNumberOfAvailableCheersForUser(sessionID)
CheckUserIsEligibleToSendShoutout(SessionID, CompetitionCode)
GetShoutoutsForCompetition(CompetitionCode, NumberOfItems, HighestKnownID)
SendShoutout(SessionID, CompetitionCode, Message)
GetDataSetTargetInfo(sessionID, dataSetID)
GetSpecificDataSetInfoWithCurrentTime(DataSetID)
SaveUserSettings(sessionID, userID, baseLanguageID, targetLanguageID, settings)
GetQuestions(sessionID, questionDefinitionIDs)
GetQuestionsEncrypted(sessionID, questionDefinitionIDs)
GetQuestionsInLists(sessionID, listIDs)
GetQuestionMetricsForQuestionsInList(sessionID, listID)
GetCompetitionInfo(code)
GetCompetitionAndSchoolsInfo(code)
GetReasonForSessionExpiry(sessionID)
GetDatasetTargetSubjects(datasetID)
GetRelevantCompetitionsForUser(sessionID)
GetEndOfCompetitionInfo(sessionID, compCode)
SubmitEndOfCompetitionFeedback(sessionID, feedback, compCode)
GetWorldChampsPartners()
GetCompetitionExtraInfo(sessionID, compCode, datasetID)
GetCurrentTimeUsageWithPeriodInfoForUser(sessionID)
GetCurrentTasksForUser(sessionID)
GetUserProgressForEarnPointsTask(sessionID, TaskID)
GetUserProgressForLearnContentTask(sessionID, TaskID)
GetUserProgressForAssessmentTask(sessionID, TaskID)
GetUserProgressForCompleteActivityTask(sessionID, TaskID)
GetUserTaskListProgressDetails(sessionID, taskID)
GetTaskMonitoringStatus(sessionID, taskID)
SubmitTaskMonitoringStatus(request)
GetTestSummaryForAssessmentTask(sessionID, assessmentTaskID)
StartNewTestAttemptForAssessmentTask(sessionID, assessmentTaskID, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForRevisionTest(sessionID, testID, warnAboutIncompletePreviousAttempts)
ResumeIncompleteTestAttempt(sessionID, attemptID)
UpdateTestAnswers(sessionID, attemptID, answersToUpdate)
CompleteTestAttempt(sessionID, attemptID, clientTimezoneOffsetMinutes)
StartNewTestAttemptForAssessmentTask2(sessionID, assessmentTaskID, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForAssessmentTask3(sessionID, assessmentTaskID, accessCode, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForRevisionTest2(sessionID, testID, warnAboutIncompletePreviousAttempts)
ResumeIncompleteTestAttempt2(sessionID, attemptID)
UpdateTestAttemptQuestionStates(sessionID, attemptID, answersToUpdate)
CompleteTestAttempt2(sessionID, attemptID, clientTimezoneOffsetMinutes)
GetTestSummaryForAssessmentTask2(sessionID, assessmentTaskID)
StartNewAssessmentAttemptForRevisionTest(sessionID, testID, resumeIncompletePreviousAttempt)
StartNewAssessmentAttemptForAssessmentTask(sessionID, assessmentTaskID, accessCode, resumeIncompletePreviousAttempt)
GetAssessmentAttemptDetails(sessionID, attemptID)
RecordAssessmentAttemptClientStart(sessionID, attemptID)
UpdateAssessmentAttemptAnswers(sessionID, attemptID, answersToUpdate, events, timeStatus)
UpdateAssessmentAttemptAnswers2(sessionID, requestObject)
RecordAssessmentAttemptEvents(sessionID, attemptID, events, focusStatus)
RecordAssessmentExitWithoutSubmission(sessionID, attemptID)
CompleteAssessmentAttempt(sessionID, attemptID, clientTimezoneOffsetMinutes)
GetUserAssessmentResultSummariesWithFilter(sessionID, userID, testID, assessmentContextID)
GetUserAssessmentResultSummariesForAttempt(sessionID, userID, attemptID)
SearchForSpecificContent(sessionID, request)
GetRecentActivitiesForUserAndClasses(sessionID, classIDs)
UpdateLastActivityForUser(sessionID, classID, moduleID, listID, taskID)
UpdateSessionFocusedActivity(sessionID, classID, moduleID, listID, taskID)
StartNewActivityAttempt(sessionID, activityID, taskID)
GetUsersAttemptsForActivity(sessionID, activityID, taskID)
GetCurrentAnswersForActivityAttempt(sessionID, attemptID)
GetActivityAttemptData(sessionID, attemptID)
SaveIncompleteActivityAttemptAnswer(sessionID, attemptID, answer)
SaveFinalActivityAttemptAnswers(sessionID, answers)
SubmitSmartLessonFeedback(sessionID, activityID, attemptID, completedActivity, starRating, studentConfidence, message)
RecordSmartLessonAdditionalAnswerReviewTime(sessionID, attemptID, contentID, section, questionAttemptNumber, additionalReviewTime)
MarkSmartLessonAnswerReviewAsSeenByUser(sessionID, attemptID, contentID, section, questionAttemptNumber, reviewer)
GenerateS3StudentFileUploadDirective(sessionID)
GenerateS3StudentFileUploadDirective2(sessionID, isPrivate)
GenerateSignedURLForPrivateUserFile(sessionID, url)
RemoveS3UserFile(sessionID, url)
GetReviewQuizScoreboardResults(sessionID, request)
SaveReviewQuizAttempt(sessionID, attempt)
SaveReviewQuizAttempt2(sessionID, attempt, clientTimezoneOffsetMinutes, requestID)
SaveReviewQuizAttemptEncrypted(sessionID, encryptedAttempt, clientTimezoneOffsetMinutes, requestID)
GetReviewQuizGhostAttempts(sessionID, dataset, activityID, translationDirection, minDashVersion, projectedTime)
GetReviewQuizMilestoneStatus(sessionID, knowledgeset, activityID, translationDirection)
GetReviewQuizesWithAvailableMilestones(sessionID, knowledgeset)
GetReviewQuizUserRankings(sessionID, request)
GetReviewQuizUserRankingsAndBestTime(sessionID, request)
AllocateUserToMultiplayerDashGame(sessionID, request)
UpdateDashGameStartTime(sessionID, gameID, XSecondsFromNow)
StartDashGameImmediately(sessionID, gameID)
LeaveMultiplayerDashGameLobby(sessionID, gameID)
GetReviewQuizValidQuestions(sessionID, activityID, translationDirection)
GetReviewQuizValidTranslationDirections(sessionID, activityID, translationDirections)
SelectQuestionsForReviewQuiz(sessionID, activityID, translationDirection)
FindPopularDashActivities(sessionID, request)
UpdateMultiplayerDashUserPresence(sessionID, request)
RenewMultiplayerDashUserPresence(sessionID)
GetNumberOfUsersActiveInDashContext(sessionID, activityID, translationDirection)
StartNewActivityAttemptAnswer(sessionID, attemptID, answer, finaliseImmediately)
UpdateActivityAttemptAnswer(sessionID, answer)
FinaliseActivityAttemptAnswer(sessionID, answer)
GetServerTime()
Ping()
PingCache()
DownloadFile(sessionID, FileName, FileData)
SaveSvgStringAsPng(sessionID, fileName, svgString)
ExposeContentSearchTypes()
ExposeStructuredActivitiesTypes()
ExposeQuestionTypes()
ExposeAssessmentTypes()
GetUserDetails(Username, Password)
GetUserDetailsSecure(encryptedUsernameBase64, encryptedPasswordBase64)
EditUserLoginSecure(sessionID, encryptedUsernameBase64, encryptedPasswordBase64)
EditUserLogin(sessionID, username, password)
EditUserEmailAddress(sessionID, newEmailAddress)
AlterUserLoginDetails(Username, Password, NewUsername, NewPassword, EmailAddress)
ResetPassword(Username, EmailAddress, FirstName)
RequestPasswordResetViaForm(FirstName, Surname, Username, EmailAddress, School)
CheckPasswordSuitability(password)
.ctor()
SubscribeToDefaultUserChannels(SessionID)
__codeGenHelper()
.ctor()
GetCompetitionInfo(sessionID, compCode)
GetCompetitionAndSchoolsInfo(sessionID, compCode)
GetCompetitions(sessionID, includeFinished)
GetCompetitionDetails(sessionID, compCode)
CreateCompetition(sessionID, competitionDetails)
ModifyCompetition(sessionID, competitionDetails)
GetSchoolsInCompetition(sessionID, compCode)
AddSchoolsToCompetition(sessionID, compCode, schoolsToAdd, sendAlert, sendEmail)
RemoveSchoolsFromCompetition(sessionID, compCode, schoolsToRemove)
RemoveCompetition(sessionID, compCode)
GetRelevantCompetitionsForSchool(sessionID, SchoolID)
GetCompetitionPreviewsForFilter(sessionID, filter)
GetPendingCompetitionInvitationsForSchool(sessionID, schoolID)
JoinCompetition(sessionID, compCode, schoolID)
GetCompetitionTargetSubjects(sessionID, compCode)
GetSchoolParticipationInfosForCompetition(sessionID, compCode)
SendCompetitionInvitations(sessionID, compCode, recipientSchoolIDs, invitedBySchoolID, invitationEmailRecipientIDs, customInvitationMessage)
GetCompetitionInvitationTemplateToForward(sessionID, emailAddress, teacherID, schoolID, competitionCode)
GenerateCompetitionCodeFromName(sessionID, competitionName)
ValidateCompetitionCode(sessionID, competitionCode)
GetInvitationPreviewDataURI(sessionID, competitionCode, invitedBySchoolID, recipientSchoolIDs, customMessage)
GetInvitationRecipientInfos(sessionID, recipientSchoolIDs, invitationScope)
EmailSupportForHelp(sessionID, getHelpObject)
GetInvitationTemplate(sessionID, competitionCode, invitorSchoolName)
GetContentRestrictionsForCompetition(sessionID, compCode)
SetContentRestrictionsForCompetition(sessionID, compCode, newRestrictions)
GetUserRestrictionsForCompetition(sessionID, compCode)
SetUserRestrictionsForCompetition(sessionID, compCode, newRestrictions)
GetTiedCompetitionInfo(sessionID, compCode)
.ctor()
ExposeTypes()
GetAlertsForUser(sessionID, userID, unseenOnly)
MarkAlertsAsSeenForUser(sessionID, userID, alertIDs)
DeleteSingleUserAlert(sessionID, userID, alertID)
.ctor()
ExposeTypes()
CreateAssessmentTask(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle)
CreateEarnPointsTask(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, TargetPoints, TargetKnowledgeSet)
CreateLearnContentTask(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes)
CreateAssessmentTask2(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle)
CreateEarnPointsTask2(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetPoints, TargetKnowledgeSet)
CreateEarnPointsTask3(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetPoints, TargetKnowledgeSet, notifyTeacher)
CreateEarnPointsTask4(sessionID, creationDetails)
CreateLearnContentTask2(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes)
CreateLearnContentTask3(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes, notifyTeacher)
CreateLearnContentTask4(sessionID, creationDetails)
CreateAssessmentTask3(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType)
CreateAssessmentTask4(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, RequiresAccessCode, AccessCode)
CreateAssessmentTask5(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, RequiresAccessCode, AccessCode, NotifyTeacher)
CreateAssessmentTask6(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, RequiresAccessCode, AccessCode, StudentResultViewingPermissions, SecurityLevel, OverrideTimeAllowed, OverrideTimeAllowedForDisconnections, NotifyTeacher)
CreateAssessmentTask7(sessionID, creationDetails)
CreateCompleteActivityTask(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, TimezoneOffset, Brand, emailStudents, emailTeachers, includePreviousAttempts, previousAttemptsCutoff)
CreateCompleteActivityTask2(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, TimezoneOffset, Brand, emailStudents, emailTeachers, includePreviousAttempts, previousAttemptsCutoff, notifyTeacher)
CreateCompleteActivityTask3(sessionID, creationDetails)
ModifyAssessmentTask(sessionID, newData)
UpdateAssessmentTaskAccessCode(sessionID, taskID, newAccessCode)
UpdateAssessmentTaskResultPublicationStatus(sessionID, taskID, newStatus)
ModifyEarnPointsTask(sessionID, newData)
ModifyLearnContentTask(sessionID, newData)
ModifyCompleteActivityTask(sessionID, newData)
DeleteTask(sessionID, TaskID)
DeleteAssessmentTask(sessionID, TaskID, DeleteUnderlyingTest)
ReopenEarnPointsTask(sessionID, taskID, newFinalSubmissionDate)
ReopenLearnContentTask(sessionID, taskID, newFinalSubmissionDate)
ReopenCompleteActivityTask(sessionID, taskID, newFinalSubmissionDate)
ReopenAssessmentTask(sessionID, taskID, newFinalSubmissionDate, markSubsequentAttemptsAsOverdue)
SendImmediateReminderEmailToStudentsAboutTask(sessionID, TaskID)
GetTasksOwnedByUser(sessionID)
GetTasksOwnedByUser2(sessionID, excludeOldTasks)
GetTasksForClass(sessionID, ClassID)
GetTasksForClass2(sessionID, ClassID, excludeOldTasks)
GetTasksForClasses(sessionID, ClassIDs, OldestExpiryDate)
GetTaskCountsForClasses(sessionID, classIDs, oldestExpiryDate, limitToAssessments)
GetSpecificTasks(sessionID, TaskIDs)
GetTaskProgressOverviewForMultipleTasks(sessionID, taskIDs, IncludeLateSubmissions)
GetProgressReportInfoForLearnContentTask(sessionID, TaskID)
GetProgressReportInfoForLearnContentTask2(sessionID, TaskID, FilteredClassIDs)
GetProgressReportInfoForAssessmentTask(sessionID, TaskID)
GetProgressReportInfoForAssessmentTask2(sessionID, TaskID, FilteredClassIDs)
GetProgressReportInfoForEarnPointsTask(sessionID, TaskID)
GetProgressReportInfoForEarnPointsTask2(sessionID, TaskID, FilteredClassIDs)
GetProgressReportInfoForCompleteActivityTask(sessionID, TaskID)
GetProgressReportInfoForCompleteActivityTask2(sessionID, TaskID, FilteredClassIDs)
GetSmartLessonProgressReportForCompleteActivityTask(sessionID, TaskID, ActivityID)
CheckWhetherSmartLessonReportHasNewData(sessionID, TaskID, ActivityID, LastKnownUpdate, FilteredClassIDs)
GetSmartLessonProgressReportForCompleteActivityTask2(sessionID, TaskID, ActivityID, filteredClassIDs)
GetSmartLessonProgressReportForCompleteActivityTaskForSpecificUser(sessionID, TaskID, ActivityID, UserID)
CheckWhetherSmartLessonReportForSpecificUserHasNewData(sessionID, TaskID, ActivityID, UserID, LastKnownUpdate)
GetCommonMistakesForCompleteActivityTask(sessionID, taskID, activityID, sectionID, contentID)
GetCommonMistakesForCompleteActivityTask2(sessionID, taskID, activityID, sectionID, contentID, filteredClassIDs)
GetCommonMistakesForCompleteActivityTaskForSpecificUser(sessionID, taskID, userID, activityID, sectionID, contentID)
GetUserAnswersForCompleteActivityTask(sessionID, taskID, activityID, sectionID, contentID)
GetUserAnswersForCompleteActivityTask2(sessionID, taskID, activityID, sectionID, contentID, filteredClassIDs)
GetUserAnswersForCompleteActivityTask3(sessionID, taskID, activityID, sectionID, contentID, mostRecentAnswerOnly, filteredClassIDs)
GetUserAnswersForCompleteActivityTaskForSpecificUser(sessionID, taskID, userID, activityID, sectionID, contentID)
GetUserAnswersForCompleteActivityTaskForSpecificUser2(sessionID, taskID, userID, activityID, sectionID, contentID, mostRecentAnswerOnly)
GetAnswerReviewsReportForCompleteActivityTask(sessionID, TaskID, filteredClassIDs)
DoesTaskHaveSmartLessonExtendedResponseSections(sessionID, taskID)
SubmitSmartLessonAnswerReview(sessionID, review)
GetUserTaskLiveUserProgressForCompleteActivityTask(sessionID, taskID)
GetUserTaskLiveUserProgressForEarnPointsTask(sessionID, taskID)
GetUserTaskLiveUserProgressForLearnContentTask(sessionID, taskID)
GetMultipleHomeworkTasksSummaryReportForClasses(sessionID, classIDs, periodStartDate, periodEndDate, includeHomework, includeAssessments, includeTasksAssignedToTargetStudents)
EstimateTimeForLearnContentTask(sessionID, UserFilter, ContentFilter, ActivityFilter, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes)
EstimateTimeForEarnPointsTask(sessionID, UserFilter, ContentFilter, ActivityFilter, TargetScore)
EstimateTimeForCompleteActivityTask(sessionID, UserFilter, ContentFilter)
EstimateTimeForCompleteActivityTask2(sessionID, UserFilter, ContentFilter, filterSections, sectionFilters)
GetTestForAssessmentTask(sessionID, assessmentTaskID)
GetTest(sessionID, testID)
CreateTest(sessionID, newTest, schoolToShareWith)
ModifyTest(sessionID, test)
DeleteTest(sessionID, testID)
GetAllAssessmentTemplates(sessionID)
EstimateTimeForAssessmentTaskDataSelection(sessionID, TargetListID, TranslationDirection)
EstimateTimeForAssessmentTaskDataSelection2(sessionID, TargetListIDs, TranslationDirection)
EstimateMaxNumberOfQuestionsForQuickTestContentSelection(sessionID, parameters)
GetTestAttemptMarkingData(sessionID, testID, assessmentContextID, attemptID, includeCompletelyMarkedAttempts)
GetAssessmentTaskAttemptsMarkingData(sessionID, taskID, includeCompletelyMarkedAttempts)
SaveTeacherQuestionGradesForAttempt(sessionID, attemptID, version, grades)
FinaliseTeacherQuestionGradesForAttempt(sessionID, attemptID, version)
FinaliseTeacherAggregatedGradeForAttempt(sessionID, attemptID, grade)
FlagSectionMarkingStatusAsComplete(sessionID, attemptID, sectionID)
GetCurrentAssessmentAttemptDetailsForAssessmentTasks(sessionID, requests)
GetCurrentAssessmentAttemptDetailsForAssessmentTaskForUser(sessionID, taskID, userID)
CreateQuickTest(sessionID, newTest, schoolToShareWith)
ModifyQuickTest(sessionID, test)
GetQuickTestForAssessmentTask(sessionID, assessmentTaskID)
DoesTestHaveAnyAttempts(sessionID, testID)
____type_exposers(a, b, c, d, e, f, g)
GetUserAssessmentResultSummaries(sessionID, userID)
GetUserAssessmentResultSummariesWithFilter(sessionID, userID, testID, assessmentContextID)
GetAssessmentTaskReportingData(sessionID, assessmentTaskID)
GetAssessmentTaskReportingData2(sessionID, assessmentTaskID, excludeTeachers, filteredClassIDs)
GetUserAssessmentReportingData(sessionID, userID, testID, assessmentContextID)
GetStudentAnalysisGroups(sessionID, userID, testID, assessmentContextID)
GetGradingMethods(sessionID)
GetGradingMethod(sessionID, id)
HasTestBeenAttempted(sessionID, testID)
CheckOutNextAssessmentAttemptForMarking(sessionID, filter, lastAttemptID, lastSequenceString)
CheckOutSpecificAssessmentAttemptForMarking(sessionID, attemptID, filter, overrideExistingCheckout)
GetSpecificAssessmentAttempt(sessionID, attemptID, filter)
CheckBackInSpecificAssessmentAttemptForMarking(sessionID, attemptID)
GetMarkingProgressStatus(sessionID, filter)
GetAssessmentSectionVariantsForMarking(sessionID, filter)
GetMarkerHistory(sessionID, filter, markerUserID, offset, pageSize)
GetTestMarkers(sessionID, filter)
GetMarkingSetWithPrivilages(sessionID, markingSetID)
UpdateMarkingCheckoutLastUsed(sessionID, attemptID)
AssignAppropriateRemediationTasksToAllUsersInAssessmentTask(sessionID, assessmentTaskID, DueDate, maxTimeToAssign, maxSmartLessonsToAssign, activityLastAttemptedCutoff, emailStudents, emailTeacherReport)
AssignAppropriateRemediationTasksToAllUsersInAssessmentTask2(sessionID, assessmentTaskID, filterRecommendations, filteredRecommendations, filterClasses, filteredClassIDs, DueDate, maxTimeToAssign, maxSmartLessonsToAssign, activityLastAttemptedCutoff, emailStudents, emailParents, emailTeacherReport, notifyTeacher)
MakeAttemptEditable(sessionID, attemptID)
GetDemoTaskDetails()
GetSampleQuestionSetForAssessment(sessionID, assessmentID)
GetUserDetailsForTask(sessionID, taskID)
GetUserDetailsForTask2(sessionID, taskID, restrictToStudents)
GetUserOnlineStatusForTask(sessionID, taskID)
GetUserOnlineStatusForTask2(sessionID, taskID, restrictToStudents)
GetTaskMonitoringEvents(request)
GetTaskMonitoringStatuses(request)
ExportPDFOfAssessmentTaskAttempt(sessionID, taskID, attemptID, notifyWhenDone)
ExportSpreadsheetOfAssessmentTaskAttempt(sessionID, taskID, attemptID)
ExportSpreadsheetOfAllAttemptsForAssessmentTask(sessionID, taskID, targetClassIDs)
ExportPDFOfAssessmentAttempt(sessionID, attemptID, notifyWhenDone)
ExportPDFsOfAllAttemptsForAssessmentTask(sessionID, taskID, targetClassIDs, notifyWhenDone)
ExportPDFPreviewOfAssessment(sessionID, testID, enforceNewAttempt, notifyWhenDone)
GetReviewQuizValidQuestions(sessionID, activityID, translationDirection)
GetReviewQuizValidTranslationDirections(sessionID, activityID, translationDirections)
.ctor()
ExposeTypes()
GetQuestionListContent(sessionID, listID)
GetQuestionSummariesForSpecificQuestions(sessionID, questionIDs)
UpdateQuestionTitle(sessionID, questionID, questionTitle)
StoreQuestion(sessionID, baseLanguageID, targetSubjectID, question)
StoreQuestion2(sessionID, baseLanguageID, targetSubjectID, question, milestoneRuleID)
SearchQuestions(sessionID, baseLanguageID, targetSubjectID, searchTerms)
SearchQuestionsInModule(sessionID, baseLanguageID, targetSubjectID, searchTerms, listID)
GetQuestions(sessionID, questionDefinitionIDs)
SearchConcepts(sessionID, baseLanguage, targetSubjectID, searchTerms)
StoreConcept(sessionID, baseLanguageID, targetSubjectID, concept)
GetFeedback(sessionID, schoolIDFilter, targetSubject, userFilter, problemAreaCode, questionFilter, feedbackStatus)
UpdateFeedbackStatus(sessionID, feedbackIDs, feedbackStatus)
ArchiveFeedback(sessionID, feedbackIDs)
GetSymbolsForSubject(sessionID, targetSubjectID)
CopyQuestion(sessionID, sourceQuestionID, newQuestionID)
DeepCopyQuestion(sessionID, sourceQuestionID)
GetQuestionAuditSummary(sessionID, questionID)
GetQuestionFeedbackSummary(sessionID, questionID)
SendFeedback(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas)
SendFeedback2(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas, schoolID, activityID, sectionID, moduleID)
NotifyCollaboratorsAboutChangeToQuestion(sessionID, questionID, comment)
ToggleDraftModeOfQuestions(sessionID, questionIDs)
UpdateStatusOfQuestions(sessionID, questionIDs, status)
GetQuestionTemplates(sessionID, subjectID, isInfoSlide)
.ctor()
GetAttributeReferenceData(sessionID, includeArchived)
GetAttributeValuesForSchool(sessionID, schoolID)
GetSpecificAttributeForSchool(sessionID, schoolID, code)
GetSalesLeadOwnerForSchool(sessionID, schoolID)
GetSalesLeadOwnerForSession(sessionID, schoolID, departmentIDs)
StoreAttributeValue(sessionID, schoolID, value)
StoreMultipleAttributeValues(sessionID, schoolID, newValues)
StoreAttributeValuesChangeSet(sessionID, schoolID, changeSet)
GetSalesReferenceData(sessionID)
GetRevenueSummary(sessionID, schoolID)
GetRevenueDetails(sessionID, schoolID)
StoreRevenueDetails(sessionID, schoolID, schoolPeriods, revenueDetails)
StoreRevenueSelfConfirmationOutcome(sessionID, schoolID, departmentID, periodID, userID, outcomeID, comparisonData)
GetRevenueSelfConfirmationData(sessionID)
StoreEligibilityStatusChangesForDepartment(sessionID, statuses)
GetEligibilityStatusForDepartments(sessionID, schoolID)
GetCommentsForSchool(sessionID, schoolID)
GetCommentsAndMessagesForSchool(sessionID, schoolID)
CheckForNewCommentsAndConversationsForSchool2(sessionID, schoolID, lastKnownCommentID, lastKnownMessageID)
StoreComment(sessionID, schoolID, comment)
ArchiveComment(sessionID, commentID)
DeleteComment(sessionID, schoolID, commentID)
StarComment(sessionID, schoolID, commentID)
ShowTeacherComment(sessionID, schoolID, commentID)
GetCommentsReferenceData(sessionID)
GenerateActionLink(SessionID, LinkType, StartDate, ExpiryDate, OnceOff, UserID, RedirectURL, Brand, EnforceStartDate)
GenerateOneClickLoginLinkForTeacherFromCP(SessionID, UserID)
CreateNewConversationFromExistingComment(sessionID, schoolID, department, participants, comment)
CreateNewConversation(sessionID, schoolID, department, participants, initialMessageAuthor, initialMessageText)
CreateNewConversationFromExistingMessage(sessionID, schoolID, department, participants, messageID)
AddNewMessageToConversation(sessionID, conversation, author, text)
EditMessage(sessionID, messageID, newText)
UpdateConversationParticipants(sessionID, conversationID, participants)
UpdateConversationDetails(sessionID, conversationID, department)
SetConversationStar(sessionID, conversationID, starred)
SetMessageStar(sessionID, messageID, starred)
ArchiveConversation(sessionID, conversationID)
MarkMessageAsRead(sessionID, messageID)
MarkMultipleMessagesAsRead(sessionID, messageIDs)
GetMessagesForSession(sessionID, schoolID)
CheckForNewConversationsForSession2(sessionID, schoolID, lastMessageID)
GetDeliveryStatusForMessages(sessionID, messageIDs)
GetNumberOfUnreadMessagesForUser(sessionID)
GetMessageNotificationSyncInfoForUser(sessionID)
StoreNextAction(sessionID, schoolID, nextAction)
GetNextActionsForSchool(sessionID, schoolID)
DeleteNextAction(sessionID, schoolID, nextActionID, concurrencyTimestamp)
RemoveDepartmentFromSchool(sessionID, schoolID, departmentID)
GetStaffMembers(sessionID)
GetContactRoles()
GetReportsList(sessionID)
RegenerateReportData(sessionID, reportID)
GetReportData(sessionID, generatedReportID, startRow, endRow)
ClearCache(sessionID)
.ctor()
GetCategorisedProblemTypes()
ReportProblemsWithContent(sessionID, contentID, problems)
GetReportedFlags(sessionID, amount, schoolIDFilter, targetLanguage, reportedByFilter, problemTypeCode, flagTypes)
GetReportedFlags2(sessionID, amount, schoolIDFilter, targetLanguage, reportedByFilter, problemTypeCode, flagTypes, excludeStudentFeedback)
MarkResolved(sessionID, problemIDS)
MarkSeen(sessionID, problemIDS)
FixTranslation(sessionID, translationID, replacementEnglish, replacementForeign, editedSounds, deletedSounds)
.ctor()
HasTeacherRequestedFollowup(sessionID, schoolID)
TeacherRequestedFollowup(sessionID, schoolID)
DeclinedFollowup(sessionID, schoolID, reason)
TeacherSubmitContactDetails(sessionID, schoolID, date1, time1, phone1, date2, time2, phone2, date3, time3, phone3)
TeacherSubmitDepartmentDetails(sessionID, schoolID, details)
RequestedFollowup(sessionID, schoolID, datasetID)
TeacherDeclinedFollowup(sessionID, schoolID, reason, datasetID)
SubmitContactDetails(sessionID, schoolID, datasetID, date1, time1, phone1, date2, time2, phone2, date3, time3, phone3)
SubmitDepartmentDetails(sessionID, schoolID, details, datasetID)
GetChronologicalStatsForSchools(SessionID, SchoolIDs)
.ctor()
StoreSQLEmailTask(sessionID, emailTask)
AddNewSchedule(sessionID, schedule)
GetAllSQLEmailTasks(sessionID)
GetHistoryOfSpecificTaskSchedule(sessionID, scheduleID)
UpdateSQLEmailTask(sessionID, task)
EnableOrDisableTaskSchedule(sessionID, taskScheduleID, enable)
RenderXSLTemplate(sessionID, xslTemplate, xmlData)
ValidateXSL(sessionID, Xsl)
GetValidSenders(sessionID)
UpdateTaskSchedule(sessionID, schedule)
DeleteTaskSchedule(sessionID, scheduleID)
GetSampleXml(sessionID, taskID)
.ctor()
GetAllSentencesInContentList(sessionID, contentListID)
GetSentenceData(sessionID, sentenceID, schoolID, moduleID)
StoreSentence(sessionID, sentenceContentListID, theSentence, compositeLists)
GetContentSetForTranslationList(sessionID, translationListID)
Test()
.ctor()
CreateNewModule(sessionID, schoolID, title, description, baseLanguage, targetLanguage, newTranslations)
CreateNewModule2(sessionID, schoolID, title, description, baseLanguage, targetLanguage, newTranslations)
UpdateModuleInfo(sessionID, schoolID, moduleID, newTitle, newDescription)
UpdateModuleHighlighted(sessionID, schoolID, moduleID, highlighted)
UpdateModuleVisibilityForStudents(sessionID, schoolID, moduleID, visibleToStudents)
CreateContentList(sessionID, schoolID, ancestor, baseLanguage, targetSubject, title, description, purpose, structure, translationIDs)
CreateContentList2(sessionID, schoolID, ancestor, baseLanguage, targetSubject, title, description, purpose, structure, activityType, contentType, translationIDs)
CreateContentListAndAddToModule(sessionID, schoolID, moduleID, addAsPersonalList, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, contentIDs)
CreateContentListAndAddToModule2(sessionID, schoolID, moduleID, addAsPersonalList, folderPath, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, contentIDs)
CreateContentListAndAddToModule3(sessionID, schoolID, moduleID, addAsPersonalList, folderPath, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, activityType, contentType, contentIDs)
RenameContentListInModule(sessionID, listID, moduleID, schoolID, title)
RenameContentListFolderPathForModule(sessionID, schoolID, moduleID, oldFolderPath, newFolderPath, targetPersonalLists)
CreateCopyOfContentListInModule(sessionID, moduleID, schoolID, listID, title, transferListReferences)
CreateCopyOfContentListInModule2(sessionID, moduleID, schoolID, listID, title, folderPath, transferListReferences)
CreateCopyOfContentListInModule3(sessionID, moduleID, schoolID, listID, title, folderPath, deepCopyQuestions, transferListReferences)
UpdateContentListProperties(sessionID, listID, newTitle, newDescription, structure)
UpdateContentList(sessionID, listID, newTitle, newDescription, contentIDs, structure)
UpdateContentListContents(sessionID, listID, contentIDs)
AddContentToContentList(sessionID, listID, contentIDsToAdd, insertIndex)
RemoveContentFromContentList(sessionID, listID, contentIDsToRemove)
ReplaceContentInContentList(sessionID, listID, oldContentID, newContentID)
DeleteTranslationList(sessionID, listID)
AddOrRemoveModuleToTemplates(sessionID, moduleID, templateIDs)
AddOrRemoveModuleToTemlpates(sessionID, moduleID, templateIDs)
AddModuleToTemplate(sessionID, moduleID, templateID, highlightForSchools)
AddModuleToTemplate2(sessionID, moduleID, templateID)
RemoveModuleFromTemplate(sessionID, moduleID, templateID)
UpdateFeaturedForTemplateModule(sessionID, moduleID, templateID, featured)
GetContentModulesForTemplate(sessionID, templateID, baseLanguage, targetLanguage)
GetSubjectModuleHierarchy(sessionID, schoolID, subjectIDs, baseLanguageID)
GetTagSetForList(sessionID, listID)
GetTagSetForModule(sessionID, moduleID)
GetModulesContainingListActivityTypesForSchoolAndClasses(sessionID, schoolID, classIDs, activityTypes, modulesAvailableToAllClasses)
GetAllTranslationListsForModule(sessionID, schoolID, coreTransList)
GetModuleTranslationListsForModule(sessionID, schoolID, moduleID)
GetModuleTranslationListsForMultipleModules(sessionID, schoolID, moduleIDs)
GetModuleTestsForMultipleModules(sessionID, schoolID, moduleIDs)
GetAllDefinitionsForTranslationList(sessionID, transListID)
AddNewTranslation(sessionID, baseLang, targetLang, baseLanguageDefinitionsCombined, targetLanguageDefinitionsCombined, comment, scriptID)
AddNewTranslationStructured(sessionID, baseLang, targetLang, contentType, definitions)
EditTranslation(sessionID, translationID, baseLanguageDefinitionsCombined, targetLanguageDefinitionsCombined)
GetAllScriptsByLanguage(sessionID)
AddContentListsToModule(sessionID, schoolID, translationListIDsToCopy, targetModuleID, isPersonalList, sourceModuleID)
AddContentListsToModule2(sessionID, schoolID, translationListIDsToCopy, targetModuleID, folderPath, isPersonalList, sourceModuleID)
RemoveContentListsFromModule(sessionID, schoolID, translationListIDsToRemove, targetModuleID, isPersonalList)
DeleteModule(sessionID, schoolID, moduleID)
DeleteModule2(sessionID, schoolID, moduleID, overrideLinkedTasksWarning)
CopyTranslations(sessionID, schoolID, srcTranslationListID, destTranslationListID)
MakeModuleAvailableForSharing(sessionID, moduleID, schoolID, sharedModuleTypeID, publisherDetails)
MakeListAvailableForSharing(sessionID, schoolID, listID, sharedListTypeID, publisherDetails)
GetModuleDescription(sessionID, moduleID)
RemoveModuleFromSharing(sessionID, schoolID, moduleID)
RemoveListFromSharing(sessionID, schoolID, listID)
SearchForSharedModules(sessionID, baseLanguage, targetLanguage, searchTerms, firstResultIndex, numberOfResults, publicOnly)
CreateCopyOfModuleForSchool(sessionID, moduleID, schoolID, subscribeToFutureChanges)
CreateCopyOfModuleForSchool2(sessionID, moduleID, schoolID, subscribeToFutureChanges, highlighted)
CreateCopyOfModuleForSchool3(sessionID, moduleID, schoolID, subscribeToFutureChanges, highlighted, visibleToStudents)
CreateCopyOfModuleForSchool4(sessionID, moduleID, schoolID, subscribeToFutureChanges, highlighted, visibleToStudents)
CreateCopyOfModuleForStudent(sessionID, moduleID, subscribeToFutureChanges)
CreateCopyOfModuleForStudent2(sessionID, moduleID, subscribeToFutureChanges)
GetTranslationByID(sessionID, translationID)
GetFullTranslationByID(sessionID, translationID)
GetSharedModuleDetails(sessionID, moduleID)
GetTextbookPublishers(sessionID)
ChangeContentListStructure(sessionID, listID, structure)
GetContentDescriptionsForModule(sessionID, moduleID)
GetContentDescriptionsForContentList(sessionID, listID)
GetContentDescriptionsForSpecificContentIDs(sessionID, contentIDs)
GetModulesForSpecificSubjectAndSchool(sessionID, targetSubjectID, schoolID)
SearchForDefinitions(sessionID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
SearchForTranslations(sessionID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
SearchForTranslationsInSpecificList(sessionID, listID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
GetLinkedDefinitions(sessionID, translationID, typeCode)
GetFactListDisplayOptions(sessionID, contentListID)
StoreFactListDisplayOptions(sessionID, contentListID, options)
GetContentSharingStats(sessionID, month, student, subject, orderByHours)
UpdateContentListSearchMetadata(sessionID, schoolID, listID, metadata)
UpdateModuleSearchMetadata(sessionID, schoolID, moduleID, metadata)
SearchForCurriculumStandard(searchText, selectedSubject, selectedCurricula, selectedCurriculumLevels, numberOfResults)
GetCurricula(curriculumIDs)
AddCurriculumStandard(sessionID, curriculumLevel, curriculumSubject, name, curriculumIdentifier, subjects, searchTerms)
UpdateCurriculumStandard(sessionID, curriculumStandard, curriculumSubject, name, curriculumIdentifier, subjects, searchTerms)
SearchForSpecificContent(sessionID, request)
ChangeContentListVisibilityToStudents(sessionID, listID, moduleID, isVisible)
ChangeContentListActivityType(sessionID, schoolID, listID, activityType)
ChangeMilestoneRule(sessionID, contentID, milestoneRuleID)
CreateMediaItem(sessionID, subjectID, mediaType, schoolOwner, title, tags, url, attribution, sharing)
EditMediaItem(sessionID, item)
SearchForMediaItems(sessionID, searchTerm, mediaType, subjectID, school)
GetStructuredActivityWithContent(sessionID, activityID)
GetContentForCustomStructuredActivity(sessionID, activity)
CreateStructuredActivity(sessionID, schoolID, title, description, ancestor, baseLanguage, targetSubject, moduleToAddTo, addAsPersonalList, folderPath, template)
ModifyStructuredActivity(sessionID, activity)
DeleteStructuredActivity(sessionID, activityID)
ConvertContentListToStructuredActivity(sessionID, schoolID, listID, createAsNewList, moduleToAddTo, folderPath)
BeginDraftTest(sessionID, testID)
UpdateDraftTest(sessionID, test)
CommitDraftTest(sessionID, test)
DiscardDraftActivity(sessionID, activityID)
HasDraftActivity(sessionID, activityID)
GetEquivalentModuleForSchool(sessionID, schoolID, moduleID)
ReIndexSchoolContentForSearch(sessionID, schoolID)
GenerateLTILaunchURLForApp(sessionID, contentURL)
______dummy_method_to_generate_FactListResult_in_WebORBCodeGen(factListResult, purpose, structure, contentType, sharingLevels, curriculumStandardSearchResult, contentListSearchResult, moduleSearchResult, subscribedModuleSearchResult, subscribedContentListSearchResult, authoredContentSearchResult, exerciseGroup, infoGroup, repetitionGroup, quizGroup, translationGroup, activityGroup, questionMasteryRule)
.ctor()
GetAllEnvironmentsForLanguage(sessionID, languageID)
StoreEnvironmentForLanguage(sessionID, languageID, environment)
StoreApplicationThumbnailForLanguage(sessionID, languageID, thumbnailUrl)
GetEnvironmentsAssociatedWithModuleWithSubjectFallback(sessionID, moduleID)
GetAllEnvironmentsAssociatedWithModule(sessionID, moduleID)
AssociateEnvironmentWithModule(sessionID, moduleID, environmentID)
DissociateEnvironmentWithModule(sessionID, moduleID, environmentID)
DeleteEnvironment(sessionID, environmentID)
SetEnvironmentsWhetherModuleOnly(sessionID, environments)
GetEnvironmentsWhetherModuleOnly(sessionID, environmentIDs)
.ctor()
GetFeedback(sessionID, numberToReturn, includeArchived, schoolID)
GetFeedbackForSchool(sessionID, schoolID, numberToReturn, singleDepartmentOnly)
GetFeedbackForRelevantSchool(sessionID, numberToReturn, singleDepartmentOnly)
UpdateFeedback(sessionID, feedbackList)
GetNumberStudentsWantingToContinue(sessionID, schoolID, dataSet)
GetTotalNumberOfFeedback(sessionID)
.ctor()
GetHistory(sessionID, appID, roleID, startDate, endDate, countryID)
GetHistoryByDays(sessionID, appID, roleID, startDate, endDate, countryID)
GetHistoryByHours(sessionID, appID, roleID, startDate, endDate, countryID)
.ctor()
DownloadFile(sessionID, FileName, FileData)
LogUserAction(userID, area, details)
GenerateS3FileUploadDirective(sessionID, uploadType, folderPath, filename, flashUpload)
GetStatusForSinglePDFRequest(sessionID, requestID)
GetStatusForPDFBatchRequest(sessionID, batchID)
ConvertCsvToExcelSpreadsheet(sessionID, data, fileName, format)
.ctor()
GetAllLanguages(SessionID)
GetAllLanguagesOnly(SessionID)
GetSubjectsForSchool(sessionID, schoolID)
GetModulesWithLanguagesForSchool(SessionID, SchoolID)
GetContentListSummariesForModule(SessionID, ModuleID)
GetTranslationDirections(SessionID, BaseLanguage, TargetLanguage, Abbreviate)
CreateNewModule(SessionID, SchoolID, Title, Description, BaseLanguage, TargetLanguage, NewTranslations)
AddTranslationsToExistingModule(SessionID, SchoolID, ModuleID, NewTranslations)
AddTranslationsToExistingModule2(SessionID, SchoolID, ModuleID, folderPath, NewTranslations)
FindOrCreateTranslationsAndDefinitions(SessionID, Translations)
GetTranslationSuggestions(sessionID, minVotes)
TopListsTranslationIsIn(sessionID, contentID)
AcceptSuggestions(sessionID, suggestions)
DeclineSuggestions(sessionID, suggestions)
GetContentTemplates(SessionID)
GetContentTemplatesForSchool(SessionID, SchoolID)
GetModuleContentTemplates(sessionID, moduleID)
GetModuleIDsInTemplate(SessionID, TemplateID)
CreateContentTemplate(SessionID, Name, Description)
EditContentTemplate(SessionID, TemplateID, Name, Description)
GetLanguagePair(sessionID, baseLanguage, targetLanguage)
GetLanguagePairForTranslationID(sessionID, translationID)
GetDatasetTargetSubjects(sessionID, datasetID)
GetModulesWithLanguagesForSchoolAndClasses(sessionID, schoolID, classIDs, modulesAvailableToAllClasses)
.ctor()
GetNewsChannels(SessionID)
AddNewsChannel(SessionID, ChannelName)
GetNewsItems(SessionID, ChannelID, RestrictToCurrentItems)
AddNewsItem(SessionID, ChannelID, StartDate, EndDate, Title, ArticleText)
EditNewsItem(SessionID, ID, ChannelID, StartDate, EndDate, Title, ArticleText)
DeleteNewsItem(SessionID, NewsItemID)
GetNewsFeedItemsForUser(SessionID, Count)
UpdateNewsFeedItemInteraction(sessionID, Interactions)
GetPublicNewsItemsForFilter(SessionID, targetSubject, categories)
GetNewsItemsForFilter(SessionID, targetSubject, categories, publicOnly)
StoreNewsFeedItem(SessionID, Item)
GetMetadataForAllNewsFeedPosts(SessionID, ActiveOnly)
UpdateDraftStatusOfItem(SessionID, ItemID, Draft)
PreviewNewsFeedTargetingResults(SessionID, Filter)
GetNewsFeedItemData(SessionID, ItemID)
GetInteractionDataForNewsFeedItem(SessionID, ItemID)
ExposeNewsTypes()
.ctor()
UploadSoundFiles(SessionID, Associations)
TestUploadSoundFiles(SessionID, Language1, Speaker1, Definition1, URL1, Language2, Speaker2, Definition2, URL2)
GetSpeakersAndDialects(SessionID)
StoreSpeaker(SessionID, SpeakerDetails)
DeleteSpeaker(SessionID, SpeakerID)
.ctor()
GetClassesITeach(SessionID)
GetClassesITeachInSchool(SessionID, SchoolID, IncludeClassNumbers)
GetMyClassesInSchool(SessionID, SchoolID)
GetAllClassesInSchool(SessionID, SchoolID, IncludeClassNumbers)
GetClassesInSchoolWithAccessToSelectedContent(sessionID, schoolID, limitToTeachersClass, contentFilter, includeNumberOfUsers)
GetClassesInSchoolWithUserAndLicenceIDs(SessionID, SchoolID)
RenameClass(SessionID, ClassID, NewName)
DeleteClass(SessionID, ClassID)
CreateNewClass(SessionID, Name, SchoolID)
ArchiveClasses(SessionID, TargetClasses)
UndoClassArchive(SessionID, classesToRestore)
GetUsersInClasses(sessionID, classIDs, minPrivileges, maxPrivileges)
.ctor()
Login(Username, Password)
LoginExtra(Username, Password, FlashVersion)
LoginExtra2(Username, Password, applicationID, FlashVersion)
SecureLogin(encryptedUsernameBase64, encryptedPasswordBase64, flashVersion)
SecureLogin2(encryptedUsernameBase64, encryptedPasswordBase64, applicationID, flashVersion)
LoginWithDeviceSession(SessionID, flashVersion)
LoginWithDeviceSession2(SessionID, applicationID, flashVersion)
LoginWithSessionPromise(PromiseID, applicationID, flashVersion)
GenerateSessionPromiseFromCurrentSession(SessionID)
GenerateSessionPromiseForImpersonation(SessionID, TargetUserID)
DirectLogin(sessionID, hashKey, FlashVersion)
DirectLogin2(sessionID, hashKey, applicationID, FlashVersion)
ChangeSchoolSelection(sessionID, schoolID)
AcceptEULA(sessionID)
ExtendSession(SessionID)
ExtendSessionAndCheckMessage(SessionID)
EndSession(SessionID)
Impersonate(sessionID, impersonateUserID, impersonateUserName)
SearchForUsersToImpersonate(sessionID, schoolKeyword, nameKeyword, includeStudents)
GetPermissionTemplates(sessionID)
GetPermissionsForUser(sessionID, userID)
GetPermissionTemplateDescriptionForUser(sessionID, userID)
StoreUserPermissions(sessionID, userID, permissionCodes, basedOnTemplateID)
GetPermissions(sessionID)
GenerateDeviceSessionFromLPSessionID(SessionID, ExpiryDate)
GetReasonForSessionExpiry(sessionID)
ValidateUsernameWithinQuota(SessionID, Username)
.ctor()
GetLicenceTypes(SessionID)
GetLicenceStatusOptions(SessionID)
GetLicenceData(sessionID)
CreateNewLicence(SessionID, LicenceData, Products)
ModifyLicence(SessionID, LicenceData, Products)
DeleteLicence(SessionID, LicenceID)
AssociateClassWithLicence(SessionID, LicenceID, ClassID)
AssociateMultipleClassesWithLicence(SessionID, LicenceID, Classes)
DisassociateClassWithLicence(SessionID, LicenceID, ClassID)
MoveMultipleClassesToLicence(sessionID, originalLicenceID, newLicenceID, classesToMove)
DisassociateMultipleClassesWithLicence(SessionID, LicenceID, Classes)
GetFullClassDataAssociatedWithLicence(SessionID, LicenceID)
GetNumberOfUsersUsingLicence(SessionID, LicenceID)
GetLicenceDataForSpecificLicences(sessionID, licenceIDs)
GetLicenceDataForSchool(sessionID, schoolID)
GetAllProductDetailsForLicensing(sessionID)
GetRecentTransactionSummaries(sessionID, schoolID, fetchCount)
DownloadLicenceTransactionsForSchool(sessionID, schoolID, transactionIDs)
GetCurrencies()
GetClassesLicencedForContent(sessionID, classes, content)
.ctor()
SearchForSchoolByName(SessionID, SearchString, SearchLimit)
GetRelevantSchools(SessionID)
GetSchoolsWithLicensedUsers(sessionID)
GetAllSchools(sessionID)
GetSchoolData(sessionID, schoolID)
GetSchoolsThisUserTeachesIn(SessionID)
GetRelevantSchoolsContactDetails(SessionID)
GetRelevantSchoolFilterDetails(sessionID)
GetSchoolContactDetails(SessionID, SchoolID)
CreateSchool(SessionID, Name, Code, Country, ContentTemplate, DefaultDataSetGroup)
CreateSchool2(SessionID, Name, Code, Country, StateID, ContentTemplate, DefaultDataSetGroup)
CreateSchool3(SessionID, Name, Code, Country, StateID, ContentTemplates, DefaultDataSetGroup)
EditContentTemplatesForSchool(SessionID, SchoolID, NewContentTemplates)
EditSchoolData(SessionID, ID, NewName, NewCode, NewCountry)
EditSchoolContactDetails(SessionID, ID, NewName, NewCode, NewCountry, NewState, NewCity, NewSuburb, NewAddress1, NewAddress2, NewPostCode, NewPhoneNumber, NewPrincipalsName)
EditSchoolFullContactDetails(sessionID, schoolData)
DeleteSchool(SessionID, ID)
CreateAndSetUpSchool7(SessionID, SchoolName, IdentifyingCode, Country, State, ContentTemplates, DefaultDataSetGroup, DefaultClassName, LicenceData, Products)
GetSchoolUsernameTemplates()
GetAllCountries()
GetStatesForCountry(countryID)
StoreCountry(sessionID, countryData)
StoreState(sessionID, countryID, stateData)
MergeStates(sessionID, keepStateID, discardStateIDs)
VerifyAndUpdateAddressDetails(sessionID, schoolID, replacementAddressDetails, principalEmail)
VerifyAddressDetails(sessionID, schoolID, replacementAddressDetails, principalEmail, datasetID)
GetSchoolContactDetailsIfAddressNotVerified(sessionID, schoolID)
GetListOfStudentsPasswordChangedSettings(sessionID, classIDs)
GetPartners()
UpdatePartnersForSchool(sessionID, schoolID, partnerAttributeIDs)
FindSchoolClashes(sessionID, name, code)
FindNearbySimilarSchools(sessionID, schoolID, departmentID)
.ctor()
GetSchoolSummaryStats(SessionID, DataSetSelectionInfo)
GetStatsForClassesUsingFilter(sessionID, filter)
GetStudentProgress(sessionID, filter)
GetContentProgress(sessionID, filter)
GetOrderedSubjectsForClasses(sessionID, schoolID, classIDs)
GetRelevantDataSets()
GetRelevantDataSetsForSchool(sessionID, schoolID)
GetRelevantCategorisedDataSetsForSchool(sessionID, schoolID)
GetDefaultDataSetGroups()
GetChronologicalStatsForSchools(SessionID, SchoolIDs)
GetChronologicalStatsForSchoolsWithPreviousYear(SessionID, SchoolIDs)
GetChronologicalStatsForSchoolsForLanguageWithPreviousYear(SessionID, SchoolIDs, BaseLanguage, TargetLanguage)
GetStatsSpreadForSchool(SessionID, SchoolID, DataSetSelectionInfo, DataRanges)
GetUsersWithinSpecificScoreRangeInSchool(SessionID, SchoolID, DataSetSelectionInfo, MinQuestionsAnswered, MaxQuestionsAnswered)
GetWCSchoolStats(sessionID, schoolID, datasetID)
GetWCUsersWithinScoreRange(sessionID, schoolID, datasetID, scoreLower, scoreUpper, classID)
GetSchoolAllStats(sessionID, schoolID, datasetID)
GetAllKnowledgeDataSets(sessionID, isCurrent)
CanUseVSP()
GetDatasetTargetSubjects(datasetID)
GetSchoolSubjectUsage(sessionID, schoolID)
GetSmartLessonProgressReportForClasses(sessionID, ActivityID, ClassIDs, PeriodStartDate, PeriodEndDate)
GetSmartLessonProgressReportForSpecificUser(sessionID, ActivityID, UserID, PeriodStartDate, PeriodEndDate)
GetSmartLessonUserAnswersForClasses(sessionID, ActivityID, ClassIDs, PeriodStartDate, PeriodEndDate, SectionID, ContentID, MostRecentOnly)
GetSmartLessonUserAnswersForSpecificUser(sessionID, ActivityID, userID, PeriodStartDate, PeriodEndDate, SectionID, ContentID, MostRecentOnly)
GetSmartLessonCommonMistakesForClasses(sessionID, ActivityID, ClassIDs, PeriodStartDate, PeriodEndDate, SectionID, ContentID)
GetSmartLessonCommonMistakesForSpecificUser(sessionID, ActivityID, UserID, PeriodStartDate, PeriodEndDate, SectionID, ContentID)
GetClassUsageDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, subjectIDs, startDate, endDate)
GetClassUsageSummaryForDashboard(sessionID, schoolID, classIDs, subjectIDs, startDate, endDate)
GetStudentUsageDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, userID, subjectIDs, startDate, endDate)
GetClassTaskCompletionDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, subjectIDs, startDate, endDate)
GetStudentTaskCompletionDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, userID, subjectIDs, startDate, endDate)
GetContentListUserProgressForStudent(sessionID, schoolID, listID, studentID, milestoneLevel)
GetContentListUserProgressForClasses(sessionID, schoolID, listID, classIDs, milestoneLevel)
.ctor()
GetUsersInClass(SessionID, ClassID, UserTypeFilterString)
GetUsersInSpecificClasses(SessionID, ClassIDs)
GetUsersOfPrivilegesInSpecificClasses(sessionID, classIDs, minPrivileges, maxPrivileges)
GetFilteredUsersInSchool(SessionID, SchoolID, MinPrivileges, MaxPrivileges)
GetTeachersInASchoolAsync(sessionID, schoolID)
GetUserDataForSpecificUsers(SessionID, UserIDs)
GetUserAndLoginDataForSpecificUsers(SessionID, UserIDs)
GetUserAndLoginDataWithContactsForSpecificUsers(SessionID, UserIDs)
GetUserTitles(SessionID)
GetUserTypes(SessionID)
ValidateLoginDetails(Username, Password)
AddUsersToClass(SessionID, ClassID, UserIDs, UserType)
RemoveUsersFromClass(SessionID, ClassID, UserIDs)
ResetUserPasswords(SessionID, UserIDs)
ResetUserPasswords2(sessionID, userIDs, options)
MoveUsersBetweenClasses(SessionID, DonorClassID, TargetClassID, UserIDs)
ValidateThatUsernameIsUnique(SessionID, Username, CurrentUserID)
EditUserDetails(SessionID, UserID, FirstName, Surname, Email, Title)
EditUserDetails2(SessionID, UserID, FirstName, Surname, Email, Title, StudentID)
EditUserDetails3(SessionID, UserID, FirstName, Surname, Email, Title, StudentID, ParentEmail)
EditUserType(SessionID, UserID, ClassID, OldUserType, NewUserType)
CreateNewUser(SessionID, FirstName, Surname, TitleID, Email, Username, Password)
CreateNewUserAndAddToClass(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType)
CreateNewUserAndAddToClassWithOptions(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType, options)
CreateNewUserAndAddToClassWithOptions2(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType, StudentID, options)
CreateNewUserAndAddToClassWithOptions3(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType, StudentID, ParentEmail, options)
AcceptUserJoinRequests(SessionID, ClassID, UserIDs, UserType)
DeclineUserJoinRequests(SessionID, ClassID, UserIDs)
GetUserJoinRequestsForClasses(SessionID, ClassIDs)
GetCurrentOnlineUsers(sessionID)
GetCurrentOnlineUserCount(sessionID)
GetCurrentOnlineUsersForClasses(sessionID, schoolID, classIDs, baseLanguage, subjectIDs)
GetListOfOnlineUsersInMySchool(SessionID, schoolID, userIDFilter)
BulkUploadSchoolUsers(SessionID, SchoolID, users, licenceID)
BulkUploadSchoolUsersWithOptions(SessionID, SchoolID, users, licenceID, options)
FindUnavailableUsernamesOutsideSchool(sessionID, schoolID, usernames)
CheckUsersHaveDefaultPassword(sessionID, userIDs)
GetDatasetGroupDataForSchool(sessionID, schoolID)
StoreUploadHistoryLogItemToDatabase(sessionID, item)
StoreUploadCompleteCommentAndNotifySLO(sessionID, schoolID, comment)
PreviewBulkUploadSchoolUsernameMatches(sessionID, schoolID, usersToUpload)
PreviewBulkUploadSchoolUsernameMatchesWithOptions(sessionID, schoolID, usersToUpload, options)
CheckPasswordSuitability(password)
EditContactDetails(sessionID, userID, jobTitle, notes, contactRoles, secondaryEmail)
EditLoginDetailsSecure(sessionID, userID, encryptedUsernameBase64, encryptedPasswordBase64)
GetUserEmailAddress(sessionID, userID)
GetContactsStatsForSchool(sessionID, schoolID)
GetTeacherCertificationUserInfoForSchool(sessionID, schoolID)
SearchForUsersInSchool(sessionID, schoolID, searchTerms, numberOfResults)
ResetPasswordToFirstname(sessionID, userID)
SearchForUsersGlobally(sessionID, userSearchTerms, schoolSearchTerms, numberOfResults)
UpdateUserEmailAddress(sessionID, user, emailAddress)
UpdateUserEmailAddress2(sessionID, userID, emailAddress)
CheerStudentsOn(sessionID, userIDs, isReply)
GetCheers(sessionID)
RecordUserNavigation(sessionID, request)
GetMostRecentNavigationEventForUser(sessionID, userID)
RecordClassListUpload(sessionID, uploadDetails)
GetSampleUserIdentifiers(sessionID, schoolID, identifierType)
PreviewClassListDetailsEmail(sessionID, sampleTeacher, templateData)
SendClassListDetailsToTeachers(sessionID, teachersAndClasses, templateData)
DownloadClassListDetails(sessionID, schoolID, classIDs)
DoesUsersDepartmentHaveStudentsEnrolled(sessionID)
LogCPDashboardSearchHistoryRecord(sessionID, record)
____type_exposers(a)
EditLoginDetails(SessionID, UserID, Username, Password)
UpdateLoginDetails(CurrentUsername, CurrentPassword, NewUsername, NewPassword, EmailAddress)
UpdateUserLoginDetails(CurrentUsername, CurrentPassword, NewUsername, NewPassword, EmailAddress, overrideCommonPasswordCheck)
ChangeUserPassword(SessionID, UserID, password, forceChange)
.ctor()
ValidateClassCode(Code)
RequestAdditionToClassForExistingUser(ClassCode, Username, Password)
RequestAdditionToClassForNewUser(ClassCode, FirstName, Surname, TitleID, Email, Username, Password)
ValidateThatUsernameIsUnique(Username)
GetUserTitles()
.ctor()
Execute(task, session, privilegesLevel)
Execute(task, args, privilegesLevel)
Execute(task, args, privilegesLevel)
Execute(task, args, privilegesLevel, useMaxPriviligesLevel)
.ctor()
.ctor()
GetServerTime()
GetSpecificDataSetInfoWithCurrentTime(DataSetID)
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLanguagesForScoreboard(DataSet)
GetValidModulesForScoreboard(DataSet)
GetValidWeightDivisionsForScoreboard(DataSet)
GetAllCountries()
GetUserScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows)
GetUserScoreboardStatsOverall(DataSet, Offset, NumberOfRows)
GetSchoolScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolScoreboardStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolWeightedScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolWeightedScoreboardStatsOverall(DataSet, WeightDivisionID, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetClassScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS)
GetClassScoreboardStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS)
GetCountryScoreboardStatsOverall(DataSet, Offset, NumberOfRows)
GetStateScoreboardStatsOverall(DataSet, CountryID, Offset, NumberOfRows)
GetScoreboardSchoolStatsForPartner(DataSet, Offset, NumberOfRows, RankByQPS, PartnerListOptionID)
GetScoreboardSchoolStatsForPartnerAndLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, PartnerListOptionID)
FindUsersScoreboardRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindUsersScoreboardRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardWeightedRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardWeightedRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardQPSRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardQPSRankingOverall(DataSet, Username, Password)
FindSchoolsScoreboardWeightedQPSRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindSchoolsScoreboardWeightedQPSRankingOverall(DataSet, Username, Password)
GetOverallAwards(datasetID)
GetScoreboardPartners()
GetFilteredScoreboardPartners(languages, maths, science, english, socialSciences)
GetDatasetTargetSubjects(datasetID)
GetCurrentMonthDataSet()
GetCompetitionMilestones(competitionCode)
GetCompetitionMiletonesForScoreboard(competitionCode)
GetCountriesForThisDataset(DatasetID)
GetStatesForCountry(CountryID)
CheerStudentOn(sessionID, userIDHash, isReply)
GetNumberOfAvailableCheersForUser(sessionID)
CheckUserIsEligibleToSendShoutout(SessionID, CompetitionCode)
GetShoutoutsForCompetition(CompetitionCode, NumberOfItems, HighestKnownID)
SendShoutout(SessionID, CompetitionCode, Message)
GetOverallAndMonthlyDatasetsForThisYear()
.cctor()
.ctor()
GetNews(NewsChannel)
GetNewsItems(newsItemIDs)
GetSchoolScores(DataSet)
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetServerTime()
GetSpecificDataSetInfoWithCurrentTime(DataSetID)
GetLPTotalQuestions(DataSet)
GetTotalQuestionsAndDataSetInfoForDataSet(DataSet)
GetUserScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows)
GetUserScoreboardStatsOverall(DataSet, Offset, NumberOfRows)
GetSchoolScoreboardStatsForLanguage(DataSet, BaseLanguage, TargetLanguage, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
GetSchoolScoreboardStatsOverall(DataSet, Offset, NumberOfRows, RankByQPS, CountryID, StateID)
FindUsersScoreboardRankingForLanguage(DataSet, BaseLanguage, TargetLanguage, Username, Password)
FindUsersScoreboardRankingOverall(DataSet, Username, Password)
AddInAppFeedback(SessionID, Feedback, Email)
AddInAppFeedback2(SessionID, Feedback, Context, Email)
.cctor()
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
AddContactUsMessage(Name, Email, School, TheirMessage)
RequestLPFreeTrial(Firstname, Surname, SchoolName, Position, SchoolPhone, Cellphone, Email, Address, City, State, Country, Languages, Comments, NumberOfLanguageStudents)
RequestEPTestDrive(Firstname, Surname, SchoolName, Position, Email, Subjects, Comments, signUpStep)
GetCompetitionInfo(compCode, timezoneOffset)
RequestCompetitionRegistration(Firstname, Surname, SchoolName, Position, SchoolPhone, Cellphone, Email, Comments, NumberOfLanguageStudents, competitionCode, competitionName)
.ctor()
RegisterForLanguagesLeague(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents)
AddLanguagesLeagueContactUsMessage(Name, Email, School, TheirMessage)
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
RegisterForOlympics2010(Name, SchoolName, Position, Email, PhoneNumber, Address)
AddOlympicContactUsMessage(Name, Email, School, TheirMessage)
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
RegisterForWorldChampionships2011(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents)
RegisterForWorldChampionships2011WithPromoCode(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2012(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2013(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2014(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForWorldChampionships2015(Name, SchoolName, Position, Email, PhoneNumber, Address, NumberOfLanguageStudents, PromoCode)
RegisterForEducationPerfectWorldSeries2014(Name, SchoolName, Position, Email, PhoneNumber, Subjects, Comments, PromoCode)
RegisterForEducationPerfectWorldSeries2015(Name, SchoolName, Position, Email, PhoneNumber, Subjects, Comments, PromoCode)
AddWorldChampionshipsContactUsMessage(Name, Email, School, TheirMessage)
.ctor()
GetNews()
GetSchoolScores()
GetSchoolScoresForDataSetSelection(DataSetSelectionInfo)
GetLPTotalQuestions()
RegisterForWorldCup2010(Name, SchoolName, Position, Email, PhoneNumber, Address)
AddWorldCupContactUsMessage(Name, Email, School, TheirMessage)
LoginExtra(UserName, Password, AppID, FlashVersion)
SecureLogin(encryptedUsernameBase64, encryptedPasswordBase64, appID, flashVersion)
WebsiteLogin(username, password, appID, browserVersion)
WebsiteLoginWithDeviceSession(deviceSessionID, appID, browserVersion)
LoginWithDeviceSession(SessionID, appID, flashVersion)
LoginWithSessionPromise(PromiseID, appID, flashVersion)
DirectLogin(sessionID, hashKey, isImpersonating, flashVersion)
NewDirectLogin(sessionID, hashKey, isImpersonating, flashVersion, appID)
RegisterAndLoginUsingSSO(providerCode, serviceUrl, serviceTicket, flashVersion)
DirectLoginAsUser(adminSessionID, userID, flashVersion)
GenerateSessionPromiseFromCurrentSession(SessionID)
GetIndividualPaymentURLForUser(username, password)
AcceptEULA(sessionID)
ChangeBaseLanguage(SessionID, baseLanguage)
GetAllSchoolsSSODetails()
FindSSOSchoolDetailsFromSchoolName(schoolKeyword)
GetAppData(SessionID, ChosenClass, ChosenModule)
GetAppDataForSpecificDataSet(SessionID, ChosenClass, ChosenModule, DataSet)
GetAppDataWithCustomDataSetSelection(SessionID, ChosenClass, ChosenModule, DataSetSelectionOptions)
GetAppDataForSelectedTask(SessionID, ChosenClass, ChosenModule, DataSetSelectionOptions, taskID)
GetAppDataForActivitySelection(SessionID, ChosenClass, ActivitySelectionOptions, DataSetSelectionOptions)
UpdateStats(SessionID, Data)
StoreProgressWithMilestones(sessionID, data, clientTimezoneOffsetMinutes)
StoreActivityProgress(sessionID, activityTypeID, baseLanguageID, targetLanguageID, data, clientTimezoneOffsetMinutes)
StoreActivityProgress2(sessionID, activityTypeID, baseLanguageID, targetLanguageID, data, clientTimezoneOffsetMinutes, requestID)
HasStatsSaveRequestCompletedSuccessfully(sessionID, requestID)
StoreQuestionTimes(sessionID, questionTimes)
StoreActivityUsageData(sessionID, questionTimes, listUsage)
StoreActivityUsageData2(sessionID, questionTimes, listUsage, totalSecondsInTest)
StoreActivityUsageData3(sessionID, questionTimes, listUsage, totalSecondsInTest, retryState, attemptUniqueKey)
CreateContentListAndAddToModule(SessionID, SchoolID, ModuleID, Title, Description, Ancestor, BaseLanguage, TargetSubject, Purpose, Structure, Data)
UpdateTranslationList(SessionID, ListID, NewTitle, NewDescription, Data)
DeleteTranslationList(SessionID, ListID)
StoreFactListDisplayOptions(sessionID, contentListID, options)
CreateCopyOfModuleForStudent(sessionID, moduleID, subscribeToFutureChanges)
CreateCopyOfModuleForStudent2(sessionID, moduleID, subscribeToFutureChanges)
GetEquivalentModuleForSchool(sessionID, schoolID, moduleID)
RenewSessionLicence(SessionID)
EndSession(SessionID)
GenerateDeviceSessionFromLPSessionID(SessionID, ExpiryDate)
GenerateNewDeviceSessionForUserLogin(username, password, expiryDate)
GetClassUsers(SessionID)
SubmitTaskMonitoringStatus(request)
FindUserScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, projectedScore)
FindUserClassScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, classID, projectedScore)
FindUserSchoolScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, schoolID, projectedScore)
FindUserCountryScoresAroundMine(sessionID, dataSet, baseLanguage, targetLanguage, countryID, projectedScore)
GetRankingStatsAndPositionsForDataSetClean(sessionID, DataSet)
GetRankingPositionsForDataSet(SessionID, DataSet)
GetLPTotalQuestions()
GetTotalQuestionsForDataSet(DataSetID)
GetTotalQuestionsAndDataSetInfoForDataSet(DataSet)
SuggestSynonym(SessionID, TranslationID, Suggestion, SuggestionLanguage)
SuggestSynonymWithReturn(SessionID, TranslationID, Suggestion, SuggestionLanguage)
GetUserIDsForFacebookIDs(FacebookIDs)
AssociateFacebookIDWithUser(SessionID, FacebookID, UserID)
GetUserIDForFacebookID(FacebookID)
SendFeedback(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas)
SendFeedback2(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas, schoolID, activityID, sectionID, moduleID)
RateQuestion(sessionID, questionID, variablesState, rating, notes)
AddInAppFeedback(SessionID, Feedback, Context, Email)
SubmitExpiredLicenceFeedback(userID, feedback)
SubmitEPSubjectRequestFeedback(sessionID, selectedSubjects, message)
ReportProblemsWithTranslation(sessionID, contentID, problems)
GetCategorisedProblemTypes()
GetCheers(sessionID)
CheerStudentsOn(sessionID, userIDHashes, isReply)
GetNumberOfAvailableCheersForUser(sessionID)
CheckUserIsEligibleToSendShoutout(SessionID, CompetitionCode)
GetShoutoutsForCompetition(CompetitionCode, NumberOfItems, HighestKnownID)
SendShoutout(SessionID, CompetitionCode, Message)
GetDataSetTargetInfo(sessionID, dataSetID)
GetSpecificDataSetInfoWithCurrentTime(DataSetID)
SaveUserSettings(sessionID, userID, baseLanguageID, targetLanguageID, settings)
GetQuestions(sessionID, questionDefinitionIDs)
GetQuestionsEncrypted(sessionID, questionDefinitionIDs)
GetQuestionsInLists(sessionID, listIDs)
GetQuestionMetricsForQuestionsInList(sessionID, listID)
GetCompetitionInfo(code)
GetCompetitionAndSchoolsInfo(code)
GetReasonForSessionExpiry(sessionID)
GetDatasetTargetSubjects(datasetID)
GetRelevantCompetitionsForUser(sessionID)
GetEndOfCompetitionInfo(sessionID, compCode)
SubmitEndOfCompetitionFeedback(sessionID, feedback, compCode)
GetWorldChampsPartners()
GetCompetitionExtraInfo(sessionID, compCode, datasetID)
GetCurrentTimeUsageWithPeriodInfoForUser(sessionID)
GetCurrentTasksForUser(sessionID)
GetUserProgressForEarnPointsTask(sessionID, TaskID)
GetUserProgressForLearnContentTask(sessionID, TaskID)
GetUserProgressForAssessmentTask(sessionID, TaskID)
GetUserProgressForCompleteActivityTask(sessionID, TaskID)
GetUserTaskListProgressDetails(sessionID, taskID)
GetTaskMonitoringStatus(sessionID, taskID)
GetTestSummaryForAssessmentTask(sessionID, assessmentTaskID)
StartNewTestAttemptForAssessmentTask(sessionID, assessmentTaskID, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForRevisionTest(sessionID, testID, warnAboutIncompletePreviousAttempts)
ResumeIncompleteTestAttempt(sessionID, attemptID)
UpdateTestAnswers(sessionID, attemptID, answersToUpdate)
CompleteTestAttempt(sessionID, attemptID, clientTimezoneOffsetMinutes)
StartNewTestAttemptForAssessmentTask2(sessionID, assessmentTaskID, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForAssessmentTask3(sessionID, assessmentTaskID, accessCode, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForRevisionTest2(sessionID, testID, warnAboutIncompletePreviousAttempts)
ResumeIncompleteTestAttempt2(sessionID, attemptID)
UpdateTestAttemptQuestionStates(sessionID, attemptID, answersToUpdate)
CompleteTestAttempt2(sessionID, attemptID, clientTimezoneOffsetMinutes)
GetTestSummaryForAssessmentTask2(sessionID, assessmentTaskID)
StartNewAssessmentAttemptForRevisionTest(sessionID, testID, resumeIncompletePreviousAttempt)
StartNewAssessmentAttemptForAssessmentTask(sessionID, assessmentTaskID, accessCode, resumeIncompletePreviousAttempt)
GetAssessmentAttemptDetails(sessionID, attemptID)
RecordAssessmentAttemptClientStart(sessionID, attemptID)
UpdateAssessmentAttemptAnswers(sessionID, attemptID, answersToUpdate, events, timeStatus)
UpdateAssessmentAttemptAnswers2(sessionID, requestObject)
RecordAssessmentAttemptEvents(sessionID, attemptID, events, focusStatus)
RecordAssessmentExitWithoutSubmission(sessionID, attemptID)
CompleteAssessmentAttempt(sessionID, attemptID, clientTimezoneOffsetMinutes)
GetUserAssessmentResultSummariesWithFilter(sessionID, userID, testID, assessmentContextID)
GetUserAssessmentResultSummariesForAttempt(sessionID, userID, attemptID)
SearchForSpecificContent(sessionID, request)
GetRecentActivitiesForUserAndClasses(sessionID, classIDs)
UpdateLastActivityForUser(sessionID, classID, moduleID, listID, taskID)
UpdateSessionFocusedActivity(sessionID, classID, moduleID, listID, taskID)
StartNewActivityAttempt(sessionID, activityID, taskID)
GetUsersAttemptsForActivity(sessionID, activityID, taskID)
GetCurrentAnswersForActivityAttempt(sessionID, attemptID)
GetActivityAttemptData(sessionID, attemptID)
SaveIncompleteActivityAttemptAnswer(sessionID, attemptID, answer)
SaveFinalActivityAttemptAnswers(sessionID, answers)
SubmitSmartLessonFeedback(sessionID, activityID, attemptID, completedActivity, starRating, studentConfidence, message)
RecordSmartLessonAdditionalAnswerReviewTime(sessionID, attemptID, contentID, section, questionAttemptNumber, additionalReviewTime)
MarkSmartLessonAnswerReviewAsSeenByUser(sessionID, attemptID, contentID, section, questionAttemptNumber, reviewer)
GenerateS3StudentFileUploadDirective(sessionID)
GenerateS3StudentFileUploadDirective2(sessionID, isPrivate)
GenerateSignedURLForPrivateUserFile(sessionID, url)
RemoveS3UserFile(sessionID, url)
GetReviewQuizScoreboardResults(sessionID, request)
SaveReviewQuizAttempt(sessionID, attempt)
SaveReviewQuizAttempt2(sessionID, attempt, clientTimezoneOffsetMinutes, requestID)
SaveReviewQuizAttemptEncrypted(sessionID, encryptedAttempt, clientTimezoneOffsetMinutes, requestID)
GetReviewQuizGhostAttempts(sessionID, dataset, activityID, translationDirection, minDashVersion, projectedTime)
GetReviewQuizMilestoneStatus(sessionID, knowledgeset, activityID, translationDirection)
GetReviewQuizesWithAvailableMilestones(sessionID, knowledgeset)
GetReviewQuizUserRankings(sessionID, request)
GetReviewQuizUserRankingsAndBestTime(sessionID, request)
AllocateUserToMultiplayerDashGame(sessionID, request)
UpdateDashGameStartTime(sessionID, gameID, XSecondsFromNow)
StartDashGameImmediately(sessionID, gameID)
LeaveMultiplayerDashGameLobby(sessionID, gameID)
GetReviewQuizValidQuestions(sessionID, activityID, translationDirection)
GetReviewQuizValidTranslationDirections(sessionID, activityID, translationDirections)
SelectQuestionsForReviewQuiz(sessionID, activityID, translationDirection)
FindPopularDashActivities(sessionID, request)
UpdateMultiplayerDashUserPresence(sessionID, request)
RenewMultiplayerDashUserPresence(sessionID)
GetNumberOfUsersActiveInDashContext(sessionID, activityID, translationDirection)
StartNewActivityAttemptAnswer(sessionID, attemptID, answer, finaliseImmediately)
UpdateActivityAttemptAnswer(sessionID, answer)
FinaliseActivityAttemptAnswer(sessionID, answer)
GetServerTime()
Ping()
PingCache()
DownloadFile(sessionID, FileName, FileData)
SaveSvgStringAsPng(sessionID, fileName, svgString)
ExposeContentSearchTypes()
ExposeStructuredActivitiesTypes()
ExposeQuestionTypes()
ExposeAssessmentTypes()
.ctor()
ExposeTypes()
.ctor()
RegisterForCPLoginNotifications(ClientID)
DeregisterForCPLoginNotifications(ClientID)
RandomMethod(MockSession)
.ctor()
GetUserDetails(Username, Password)
GetUserDetailsSecure(encryptedUsernameBase64, encryptedPasswordBase64)
EditUserLoginSecure(sessionID, encryptedUsernameBase64, encryptedPasswordBase64)
EditUserLogin(sessionID, username, password)
EditUserEmailAddress(sessionID, newEmailAddress)
AlterUserLoginDetails(Username, Password, NewUsername, NewPassword, EmailAddress)
ResetPassword(Username, EmailAddress, FirstName)
RequestPasswordResetViaForm(FirstName, Surname, Username, EmailAddress, School)
CheckPasswordSuitability(password)
.ctor()
SetValues(sessionID, facts)
GetValues(sessionID, keys)
GetAllValuesInPath(sessionID, path)
GetAllValuesInPaths(sessionID, paths)
DeleteKeys(sessionID, keys)
DeleteAllKeysInPath(sessionID, path)
DeleteAllKeysInPaths(sessionID, paths)
.ctor()
RepairPrecalculateUserScoreDifferencesInMainDB()
ImportComments()
DoWrites(importDate, crmDB, commentsCount, lastCommittedCount, areaID, currentCommentRecordBatch)
CreateInsertSqlFor(currentCommentRecordBatch, importDate, areaID)
ParseComments(schoolID, schoolComment, ownerLookup, nameLookup)
FindAuthor(ownerLookup, nameLookup, currentComment)
SlowMethod()
Throw()
ThrowRecordException()
FastMethod()
LogError()
ConvertLocalTimeToDBTime(LocalTime)
GetNZMidnightForCurrentDateInUTC()
PutStringInCache(input, Key, Expiry_mins)
AddStringToCache(input, Key, Expiry_mins)
GetStringFromCache(Key)
FlushCache()
GetOrSetStringInCache(input, Key, Expiry_mins)
PingMemcached(numberOfTimes)
TestSyncBlocking()
TestAsyncBlocking()
TestAsyncBlockingAsync()
GetIPAddress()
getUsersIPAddress()
.ctor()
.cctor()
ClearEntireCache()
GetSummary(sessionID)
GetItemsOfType(sessionID, typeNameFilter)
DeleteItemByCacheKey(sessionID, cacheKey)
GetModulesForCaching(sessionID)
GetTranslationListsForCaching(sessionID, moduleIDs)
CacheTranslationLists(sessionID, translationListIDs)
FlushCache(sessionID, level)
.ctor()
SubscribeToDefaultUserChannels(SessionID)
__codeGenHelper()
.ctor()
ExposeTypes()
GetAlertsForUser(sessionID, userID, unseenOnly)
MarkAlertsAsSeenForUser(sessionID, userID, alertIDs)
DeleteSingleUserAlert(sessionID, userID, alertID)
.ctor()
GetClassesITeach(SessionID)
GetClassesITeachInSchool(SessionID, SchoolID, IncludeClassNumbers)
GetAllClassesInSchool(SessionID, SchoolID, IncludeClassNumbers)
GetMyClassesInSchool(SessionID, SchoolID)
GetClassesInSchoolWithAccessToSelectedContent(sessionID, schoolID, limitToTeachersClass, contentFilter, includeNumberOfUsers)
GetClassesInSchoolWithUserAndLicenceIDs(SessionID, SchoolID)
RenameClass(SessionID, ClassID, NewName)
DeleteClass(SessionID, ClassID)
CreateNewClass(SessionID, Name, SchoolID)
ArchiveClasses(SessionID, TargetClasses)
UndoClassArchive(SessionID, classesToRestore)
GetUsersInClasses(sessionID, classIDs, minPrivileges, maxPrivileges)
.ctor()
GetCompetitionInfo(sessionID, compCode)
GetCompetitionAndSchoolsInfo(sessionID, compCode)
GetCompetitions(sessionID, includeFinished)
GetCompetitionDetails(sessionID, compCode)
CreateCompetition(sessionID, competitionDetails)
ModifyCompetition(sessionID, competitionDetails)
GetSchoolsInCompetition(sessionID, compCode)
AddSchoolsToCompetition(sessionID, compCode, schoolsToAdd, sendAlert, sendEmail)
RemoveSchoolsFromCompetition(sessionID, compCode, schoolsToRemove)
RemoveCompetition(sessionID, compCode)
GetRelevantCompetitionsForSchool(sessionID, SchoolID)
GetCompetitionPreviewsForFilter(sessionID, filter)
GetPendingCompetitionInvitationsForSchool(sessionID, schoolID)
JoinCompetition(sessionID, compCode, schoolID)
GetCompetitionTargetSubjects(sessionID, compCode)
GetSchoolParticipationInfosForCompetition(sessionID, compCode)
SendCompetitionInvitations(sessionID, compCode, recipientSchoolIDs, invitedBySchoolID, invitationEmailRecipientIDs, customInvitationMessage)
GetCompetitionInvitationTemplateToForward(sessionID, emailAddress, teacherID, schoolID, competitionCode)
GenerateCompetitionCodeFromName(sessionID, competitionName)
ValidateCompetitionCode(sessionID, competitionCode)
GetInvitationPreviewDataURI(sessionID, competitionCode, invitedBySchoolID, recipientSchoolIDs, customMessage)
GetInvitationRecipientInfos(sessionID, recipientSchoolIDs, invitationScope)
EmailSupportForHelp(sessionID, getHelpObject)
GetInvitationTemplate(sessionID, competitionCode, invitorSchoolName)
GetContentRestrictionsForCompetition(sessionID, compCode)
SetContentRestrictionsForCompetition(sessionID, compCode, newRestrictions)
GetUserRestrictionsForCompetition(sessionID, compCode)
SetUserRestrictionsForCompetition(sessionID, compCode, newRestrictions)
GetTiedCompetitionInfo(sessionID, compCode)
.ctor()
CreateNewModule(sessionID, schoolID, title, description, baseLanguage, targetLanguage, newTranslations)
CreateNewModule2(sessionID, schoolID, title, description, baseLanguage, targetLanguage, newTranslations)
UpdateModuleInfo(sessionID, schoolID, moduleID, newTitle, newDescription)
UpdateModuleHighlighted(sessionID, schoolID, moduleID, highlighted)
UpdateModuleVisibilityForStudents(sessionID, schoolID, moduleID, visibleToStudents)
CreateContentList(sessionID, schoolID, ancestor, baseLanguage, targetSubject, title, description, purpose, structure, translationIDs)
CreateContentList2(sessionID, schoolID, ancestor, baseLanguage, targetSubject, title, description, purpose, structure, activityType, contentType, translationIDs)
CreateContentListAndAddToModule(sessionID, schoolID, moduleID, addAsPersonalList, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, contentIDs)
CreateContentListAndAddToModule2(sessionID, schoolID, moduleID, addAsPersonalList, folderPath, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, contentIDs)
CreateContentListAndAddToModule3(sessionID, schoolID, moduleID, addAsPersonalList, folderPath, title, description, ancestor, baseLanguage, targetSubject, purpose, structure, activityType, contentType, contentIDs)
RenameContentListInModule(sessionID, listID, moduleID, schoolID, title)
RenameContentListFolderPathForModule(sessionID, schoolID, moduleID, oldFolderPath, newFolderPath, targetPersonalLists)
CreateCopyOfContentListInModule(sessionID, moduleID, schoolID, listID, title, transferListReferences)
CreateCopyOfContentListInModule2(sessionID, moduleID, schoolID, listID, title, folderPath, transferListReferences)
CreateCopyOfContentListInModule3(sessionID, moduleID, schoolID, listID, title, folderPath, deepCopyQuestions, transferListReferences)
UpdateContentListProperties(sessionID, listID, newTitle, newDescription, structure)
UpdateContentList(sessionID, listID, newTitle, newDescription, contentIDs, structure)
UpdateContentListContents(sessionID, listID, contentIDs)
AddContentToContentList(sessionID, listID, contentIDsToAdd, insertIndex)
RemoveContentFromContentList(sessionID, listID, contentIDsToRemove)
ReplaceContentInContentList(sessionID, listID, oldContentID, newContentID)
DeleteTranslationList(sessionID, listID)
AddOrRemoveModuleToTemplates(sessionID, moduleID, templateIDs)
AddOrRemoveModuleToTemlpates(sessionID, moduleID, templateIDs)
AddModuleToTemplate(sessionID, moduleID, templateID, highlightForSchools)
AddModuleToTemplate2(sessionID, moduleID, templateID)
RemoveModuleFromTemplate(sessionID, moduleID, templateID)
UpdateFeaturedForTemplateModule(sessionID, moduleID, templateID, featured)
GetContentModulesForTemplate(sessionID, templateID, baseLanguage, targetSubject)
GetSubjectModuleHierarchy(sessionID, schoolID, subjectIDs, baseLanguageID)
GetTagSetForList(sessionID, listID)
GetTagSetForModule(sessionID, moduleID)
GetModulesContainingListActivityTypesForSchoolAndClasses(sessionID, schoolID, classIDs, activityTypes, modulesAvailableToAllClasses)
GetAllTranslationListsForModule(sessionID, schoolID, coreTransList)
GetModuleTranslationListsForModule(sessionID, schoolID, moduleID)
GetModuleTranslationListsForMultipleModules(sessionID, schoolID, moduleIDs)
GetModuleTestsForMultipleModules(sessionID, schoolID, moduleIDs)
GetAllDefinitionsForTranslationList(sessionID, transListID)
AddNewTranslation(sessionID, baseLang, targetLang, baseLanguageDefinitionsCombined, targetLanguageDefinitionsCombined, comment, scriptID)
AddNewTranslationStructured(sessionID, baseLang, targetLang, contentType, definitions)
EditTranslation(sessionID, translationID, baseLanguageDefinitionsCombined, targetLanguageDefinitionsCombined)
GetAllScriptsByLanguage(sessionID)
AddContentListsToModule(sessionID, schoolID, translationListIDsToCopy, targetModuleID, isPersonalList, sourceModuleID)
AddContentListsToModule2(sessionID, schoolID, translationListIDsToCopy, targetModuleID, folderPath, isPersonalList, sourceModuleID)
RemoveContentListsFromModule(sessionID, schoolID, translationListIDsToRemove, targetModuleID, isPersonalList)
DeleteModule(sessionID, schoolID, moduleID)
DeleteModule2(sessionID, schoolID, moduleID, overrideLinkedTasksWarning)
CopyTranslations(sessionID, schoolID, srcTranslationListID, destTranslationListID)
MakeModuleAvailableForSharing(sessionID, moduleID, schoolID, sharedModuleTypeID, publisherDetails)
MakeListAvailableForSharing(sessionID, schoolID, listID, sharedListTypeID, publisherDetails)
GetModuleDescription(sessionID, moduleID)
RemoveModuleFromSharing(sessionID, schoolID, moduleID)
RemoveListFromSharing(sessionID, schoolID, listID)
SearchForSharedModules(sessionID, baseLanguage, targetLanguage, searchTerms, firstResultIndex, numberOfResults, publicOnly)
CreateCopyOfModuleForSchool(sessionID, moduleID, schoolID, subscribeToFutureChanges)
CreateCopyOfModuleForSchool2(sessionID, moduleID, schoolID, subscribeToFutureChanges, highlighted)
CreateCopyOfModuleForSchool3(sessionID, moduleID, schoolID, subscribeToFutureChanges, highlighted, visibleToStudents)
CreateCopyOfModuleForSchool4(sessionID, moduleID, schoolID, subscribeToFutureChanges, highlighted, visibleToStudents)
CreateCopyOfModuleForStudent(sessionID, moduleID, subscribeToFutureChanges)
CreateCopyOfModuleForStudent2(sessionID, moduleID, subscribeToFutureChanges)
GetTranslationByID(sessionID, translationID)
GetFullTranslationByID(sessionID, translationID)
GetSharedModuleDetails(sessionID, moduleID)
GetTextbookPublishers(sessionID)
ChangeContentListStructure(sessionID, listID, structure)
GetContentDescriptionsForModule(sessionID, moduleID)
GetContentDescriptionsForContentList(sessionID, listID)
GetContentDescriptionsForSpecificContentIDs(sessionID, contentIDs)
GetModulesForSpecificSubjectAndSchool(sessionID, targetSubjectID, schoolID)
SearchForDefinitions(sessionID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
SearchForTranslations(sessionID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
SearchForTranslationsInSpecificList(sessionID, listID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
GetLinkedDefinitions(sessionID, translationID, typeCode)
GetFactListDisplayOptions(sessionID, contentListID)
StoreFactListDisplayOptions(sessionID, contentListID, options)
GetContentSharingStats(sessionID, month, student, subject, orderByHours)
UpdateContentListSearchMetadata(sessionID, schoolID, listID, metadata)
UpdateModuleSearchMetadata(sessionID, schoolID, moduleID, metadata)
SearchForCurriculumStandard(searchText, selectedSubject, selectedCurricula, selectedCurriculumLevels, numberOfResults)
GetCurricula(curriculumIDs)
AddCurriculumStandard(sessionID, curriculumLevel, curriculumSubject, name, curriculumIdentifier, subjects, searchTerms)
UpdateCurriculumStandard(sessionID, curriculumStandard, curriculumSubject, name, curriculumIdentifier, subjects, searchTerms)
SearchForSpecificContent(sessionID, request)
ChangeContentListVisibilityToStudents(sessionID, listID, moduleID, isVisible)
ChangeContentListActivityType(sessionID, schoolID, listID, activityType)
ChangeMilestoneRule(sessionID, contentID, milestoneRuleID)
CreateMediaItem(sessionID, subjectID, mediaType, schoolOwner, title, tags, url, attribution, sharing)
EditMediaItem(sessionID, item)
SearchForMediaItems(sessionID, searchTerm, mediaType, subjectID, school)
GetStructuredActivityWithContent(sessionID, activityID)
GetContentForCustomStructuredActivity(sessionID, activity)
CreateStructuredActivity(sessionID, schoolID, title, description, ancestor, baseLanguage, targetSubject, moduleToAddTo, addAsPersonalList, folderPath, template)
ModifyStructuredActivity(sessionID, activity)
DeleteStructuredActivity(sessionID, activityID)
ConvertContentListToStructuredActivity(sessionID, schoolID, listID, createAsNewList, moduleToAddTo, folderPath)
BeginDraftTest(sessionID, testID)
UpdateDraftTest(sessionID, test)
CommitDraftTest(sessionID, test)
DiscardDraftActivity(sessionID, activityID)
HasDraftActivity(sessionID, activityID)
GetEquivalentModuleForSchool(sessionID, schoolID, moduleID)
ReIndexSchoolContentForSearch(sessionID, schoolID)
GenerateLTILaunchURLForApp(sessionID, contentURL)
ModifyTranslationListContent(sessionID, listID, translations)
______dummy_method_to_generate_FactListResult_in_WebORBCodeGen(factListResult, purpose, structure, contentType, sharingLevels, curriculumStandardSearchResult, contentListSearchResult, moduleSearchResult, subscribedModuleSearchResult, subscribedContentListSearchResult, authoredContentSearchResult, exerciseGroup, infoGroup, repetitionGroup, quizGroup, translationGroup, activityGroup, questionMasteryRule)
.ctor()
Login(Username, Password)
LoginExtra(Username, Password, FlashVersion)
LoginExtra2(Username, Password, applicationID, FlashVersion)
SecureLogin(encryptedUsernameBase64, encryptedPasswordBase64, flashVersion)
SecureLogin2(encryptedUsernameBase64, encryptedPasswordBase64, applicationID, flashVersion)
LoginWithDeviceSession(SessionID, flashVersion)
LoginWithDeviceSession2(SessionID, applicationID, flashVersion)
LoginWithSessionPromise(PromiseID, applicationID, flashVersion)
GenerateSessionPromiseFromCurrentSession(SessionID)
GenerateSessionPromiseForImpersonation(SessionID, TargetUserID)
DirectLogin(sessionID, hashKey, FlashVersion)
DirectLogin2(sessionID, hashKey, applicationID, FlashVersion)
ChangeSchoolSelection(sessionID, schoolID)
AcceptEULA(sessionID)
ExtendSession(SessionID)
ExtendSessionAndCheckMessage(SessionID)
EndSession(SessionID)
Impersonate(sessionID, impersonateUserID, impersonateUserName)
SearchForUsersToImpersonate(sessionID, schoolKeyword, nameKeyword, includeStudents)
GetPermissionTemplates(sessionID)
GetPermissionsForUser(sessionID, userID)
GetPermissionTemplateDescriptionForUser(sessionID, userID)
StoreUserPermissions(sessionID, userID, permissionCodes, basedOnTemplateID)
GetPermissions(sessionID)
GenerateDeviceSessionFromLPSessionID(SessionID, ExpiryDate)
GetReasonForSessionExpiry(sessionID)
ValidateUsernameWithinQuota(SessionID, Username)
.ctor()
GetAttributeReferenceData(sessionID, includeArchived)
GetAttributeValuesForSchool(sessionID, schoolID)
GetSpecificAttributeForSchool(sessionID, schoolID, code)
GetSalesLeadOwnerForSchool(sessionID, schoolID)
GetSalesLeadOwnerForSession(sessionID, schoolID, departmentIDs)
StoreAttributeValue(sessionID, schoolID, value)
StoreMultipleAttributeValues(sessionID, schoolID, newValues)
StoreAttributeValuesChangeSet(sessionID, schoolID, changeSet)
GetSalesReferenceData(sessionID)
GetRevenueSummary(sessionID, schoolID)
GetRevenueDetails(sessionID, schoolID)
StoreRevenueDetails(sessionID, schoolID, schoolPeriods, revenueDetails)
StoreRevenueSelfConfirmationOutcome(sessionID, schoolID, departmentID, periodID, userID, outcomeID, comparisonData)
GetRevenueSelfConfirmationData(sessionID)
GetEligibilityStatusForDepartments(sessionID, schoolID)
StoreEligibilityStatusChangesForDepartment(sessionID, statuses)
GetCommentsForSchool(sessionID, schoolID)
GetCommentsAndMessagesForSchool(sessionID, schoolID)
CheckForNewCommentsAndConversationsForSchool2(sessionID, schoolID, lastKnownCommentID, lastKnownMessageID)
StoreComment(sessionID, schoolID, comment)
ArchiveComment(sessionID, commentID)
DeleteComment(sessionID, schoolID, commentID)
StarComment(sessionID, schoolID, commentID)
ShowTeacherComment(sessionID, schoolID, commentID)
GetCommentsReferenceData(sessionID)
CreateNewConversationFromExistingComment(sessionID, schoolID, department, participants, comment)
CreateNewConversation(sessionID, schoolID, department, participants, initialMessageAuthor, initialMessageText)
CreateNewConversationFromExistingMessage(sessionID, schoolID, department, participants, messageID)
AddNewMessageToConversation(sessionID, conversation, author, text)
EditMessage(sessionID, messageID, newText)
UpdateConversationParticipants(sessionID, conversationID, participants)
UpdateConversationDetails(sessionID, conversationID, department)
SetConversationStar(sessionID, conversationID, starred)
SetMessageStar(sessionID, messageID, starred)
ArchiveConversation(sessionID, conversationID)
MarkMessageAsRead(sessionID, messageID)
MarkMultipleMessagesAsRead(sessionID, messageIDs)
GetMessagesForSession(sessionID, schoolID)
CheckForNewConversationsForSession2(sessionID, schoolID, lastMessageID)
GetDeliveryStatusForMessages(sessionID, messageIDs)
GetNumberOfUnreadMessagesForUser(sessionID)
GetMessageNotificationSyncInfoForUser(sessionID)
StoreNextAction(sessionID, schoolID, nextAction)
GetNextActionsForSchool(sessionID, schoolID)
DeleteNextAction(sessionID, schoolID, nextActionID, concurrencyTimestamp)
RemoveDepartmentFromSchool(sessionID, schoolID, departmentID)
GetStaffMembers(sessionID)
GetContactRoles()
GenerateActionLink(SessionID, LinkType, StartDate, ExpiryDate, OnceOff, UserID, RedirectURL, Brand, EnforceStartDate)
GenerateOneClickLoginLinkForTeacherFromCP(SessionID, UserID)
GetReportsList(sessionID)
RegenerateReportData(sessionID, reportID)
GetReportData(sessionID, generatedReportID, startRow, endRow)
ClearCache(sessionID)
.ctor()
GetAllEnvironmentsForLanguage(sessionID, languageID)
StoreEnvironmentForLanguage(sessionID, languageID, environment)
StoreApplicationThumbnailForLanguage(sessionID, languageID, thumbnailUrl)
GetEnvironmentsAssociatedWithModuleWithSubjectFallback(sessionID, moduleID)
GetAllEnvironmentsAssociatedWithModule(sessionID, moduleID)
AssociateEnvironmentWithModule(sessionID, moduleID, environmentID)
DissociateEnvironmentWithModule(sessionID, moduleID, environmentID)
DeleteEnvironment(sessionID, environmentID)
SetEnvironmentsWhetherModuleOnly(sessionID, environments)
GetEnvironmentsWhetherModuleOnly(sessionID, environmentIDs)
.ctor()
GetFeedback(sessionID, numberToReturn, includeArchived, schoolID)
GetFeedbackForSchool(sessionID, schoolID, numberToReturn, singleDepartmentOnly)
GetFeedbackForRelevantSchool(sessionID, numberToReturn, singleDepartmentOnly)
UpdateFeedback(sessionID, feedbackList)
GetNumberStudentsWantingToContinue(sessionID, schoolID, dataSet)
GetTotalNumberOfFeedback(sessionID)
.ctor()
DownloadFile(sessionID, FileName, FileData)
LogUserAction(userID, area, details)
GenerateS3FileUploadDirective(sessionID, uploadType, folderPath, filename, flashUpload)
GetStatusForSinglePDFRequest(sessionID, requestID)
GetStatusForPDFBatchRequest(sessionID, batchID)
ConvertCsvToExcelSpreadsheet(sessionID, data, fileName, format)
.ctor()
GetHistory(sessionID, appID, roleID, startDate, endDate, countryID)
GetHistoryByDays(sessionID, appID, roleID, startDate, endDate, countryID)
GetHistoryByHours(sessionID, appID, roleID, startDate, endDate, countryID)
.ctor()
GetAllLanguages(SessionID)
GetAllLanguagesOnly(SessionID)
GetSubjectsForSchool(sessionID, schoolID)
GetModulesWithLanguagesForSchool(SessionID, SchoolID)
GetContentListSummariesForModule(SessionID, ModuleID)
GetTranslationDirections(SessionID, BaseLanguage, TargetLanguage, Abbreviate)
CreateNewModule(SessionID, SchoolID, Title, Description, BaseLanguage, TargetLanguage, NewTranslations)
CreateNewModule2(SessionID, SchoolID, Title, Description, BaseLanguage, TargetLanguage, NewTranslations)
AddTranslationsToExistingModule(SessionID, SchoolID, ModuleID, NewTranslations)
AddTranslationsToExistingModule2(SessionID, SchoolID, ModuleID, folderPath, NewTranslations)
FindOrCreateTranslationsAndDefinitions(SessionID, Translations)
GetTranslationSuggestions(sessionID, minVotes)
TopListsTranslationIsIn(sessionID, contentID)
AcceptSuggestions(sessionID, suggestions)
DeclineSuggestions(sessionID, suggestions)
GetContentTemplates(SessionID)
GetContentTemplatesForSchool(SessionID, SchoolID)
GetModuleContentTemplates(sessionID, moduleID)
GetModuleIDsInTemplate(SessionID, TemplateID)
CreateContentTemplate(SessionID, Name, Description)
EditContentTemplate(SessionID, TemplateID, Name, Description)
GetLanguagePair(sessionID, baseLanguage, targetLanguage)
GetLanguagePairForTranslationID(sessionID, translationID)
GetDatasetTargetSubjects(sessionID, datasetID)
GetModulesWithLanguagesForSchoolAndClasses(sessionID, schoolID, classIDs, modulesAvailableToAllClasses)
.ctor()
GetLicenceTypes(SessionID)
GetLicenceStatusOptions(SessionID)
GetLicenceData(sessionID)
CreateNewLicence(SessionID, LicenceData, Products)
ModifyLicence(SessionID, LicenceData, Products)
DeleteLicence(SessionID, LicenceID)
AssociateClassWithLicence(SessionID, LicenceID, ClassID)
AssociateMultipleClassesWithLicence(SessionID, LicenceID, Classes)
DisassociateClassWithLicence(SessionID, LicenceID, ClassID)
MoveMultipleClassesToLicence(sessionID, originalLicenceID, newLicenceID, classesToMove)
DisassociateMultipleClassesWithLicence(SessionID, LicenceID, Classes)
GetFullClassDataAssociatedWithLicence(SessionID, LicenceID)
GetNumberOfUsersUsingLicence(SessionID, LicenceID)
GetLicenceDataForSpecificLicences(sessionID, licenceIDs)
GetLicenceDataForSchool(sessionID, schoolID)
GetAllProductDetailsForLicensing(sessionID)
GetRecentTransactionSummaries(sessionID, schoolID, fetchCount)
DownloadLicenceTransactionsForSchool(sessionID, schoolID, transactionIDs)
GetCurrencies()
GetClassesLicencedForContent(sessionID, classes, content)
.ctor()
GetNewsChannels(SessionID)
AddNewsChannel(SessionID, ChannelName)
GetNewsItems(SessionID, ChannelID, RestrictToCurrentItems)
AddNewsItem(SessionID, ChannelID, StartDate, EndDate, Title, ArticleText)
EditNewsItem(SessionID, ID, ChannelID, StartDate, EndDate, Title, ArticleText)
DeleteNewsItem(SessionID, NewsItemID)
GetNewsFeedItemsForUser(SessionID, Count)
UpdateNewsFeedItemInteraction(SessionID, Interactions)
GetPublicNewsItemsForFilter(SessionID, targetSubject, categories)
GetNewsItemsForFilter(SessionID, targetSubject, categories, publicOnly)
StoreNewsFeedItem(SessionID, Item)
GetMetadataForAllNewsFeedPosts(SessionID, ActiveOnly)
UpdateDraftStatusOfItem(SessionID, ItemID, Draft)
PreviewNewsFeedTargetingResults(SessionID, Filter)
GetNewsFeedItemData(SessionID, ItemID)
GetInteractionDataForNewsFeedItem(SessionID, ItemID)
ExposeNewsTypes()
.ctor()
GetCategorisedProblemTypes()
ReportProblemsWithContent(sessionID, contentID, problems)
GetReportedFlags(sessionID, amount, schoolIDFilter, targetLanguage, reportedByFilter, problemTypeCode, flagTypes)
GetReportedFlags2(sessionID, amount, schoolIDFilter, targetLanguage, reportedByFilter, problemTypeCode, flagTypes, excludeStudentFeedback)
MarkResolved(sessionID, problemIDS)
MarkSeen(sessionID, problemIDS)
FixTranslation(sessionID, translationID, replacementEnglish, replacementForeign, editedSounds, deletedSounds)
.ctor()
ExposeTypes()
GetQuestionListContent(sessionID, listID)
GetQuestionSummariesForSpecificQuestions(sessionID, questionIDs)
UpdateQuestionTitle(sessionID, questionID, questionTitle)
StoreQuestion(sessionID, baseLanguageID, targetSubjectID, question)
StoreQuestion2(sessionID, baseLanguageID, targetSubjectID, question, milestoneRuleID)
SearchQuestions(sessionID, baseLanguageID, targetSubjectID, searchTerms)
SearchQuestionsInModule(sessionID, baseLanguageID, targetSubjectID, searchTerms, listID)
GetQuestions(sessionID, questionDefinitionIDs)
SearchConcepts(sessionID, baseLanguage, targetSubjectID, searchTerms)
StoreConcept(sessionID, baseLanguageID, targetSubjectID, concept)
GetFeedback(sessionID, schoolIDFilter, targetSubject, userFilter, problemAreaCode, questionFilter, feedbackStatus)
UpdateFeedbackStatus(sessionID, feedbackIDs, feedbackStatus)
ArchiveFeedback(sessionID, feedbackIDs)
GetSymbolsForSubject(sessionID, targetSubjectID)
DeepCopyQuestion(sessionID, questionID)
CopyQuestion(sessionID, sourceQuestionID, newQuestionID)
GetQuestionAuditSummary(sessionID, questionID)
GetQuestionFeedbackSummary(sessionID, questionID)
SendFeedback(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas)
SendFeedback2(sessionID, questionID, variablesState, userAnswers, problemText, expectationText, problemAreas, schoolID, activityID, sectionID, moduleID)
NotifyCollaboratorsAboutChangeToQuestion(sessionID, questionID, comment)
ToggleDraftModeOfQuestions(sessionID, questionIDs)
UpdateStatusOfQuestions(sessionID, questionIDs, status)
GetQuestionTemplates(sessionID, subjectID, isInfoSlide)
.ctor()
SearchForSchoolByName(SessionID, SearchString, SearchLimit)
GetRelevantSchools(SessionID)
GetSchoolsWithLicensedUsers(sessionID)
GetAllSchools(sessionID)
GetSchoolData(sessionID, schoolID)
GetSchoolsThisUserTeachesIn(SessionID)
GetRelevantSchoolsContactDetails(SessionID)
GetRelevantSchoolFilterDetails(sessionID)
GetSchoolContactDetails(SessionID, SchoolID)
CreateSchool(SessionID, Name, Code, Country, ContentTemplate, DefaultDataSetGroup)
CreateSchool2(SessionID, Name, Code, Country, StateID, ContentTemplate, DefaultDataSetGroup)
CreateSchool3(SessionID, Name, Code, Country, StateID, ContentTemplates, DefaultDataSetGroup)
EditContentTemplatesForSchool(SessionID, SchoolID, NewContentTemplates)
EditSchoolData(SessionID, ID, NewName, NewCode, NewCountry)
EditSchoolContactDetails(SessionID, ID, NewName, NewCode, NewCountry, NewState, NewCity, NewSuburb, NewAddress1, NewAddress2, NewPostCode, NewPhoneNumber, NewPrincipalsName)
EditSchoolFullContactDetails(sessionID, schoolData)
DeleteSchool(SessionID, ID)
CreateAndSetUpSchool7(SessionID, SchoolName, IdentifyingCode, Country, State, ContentTemplates, DefaultDataSetGroup, DefaultClassName, LicenceData, Products)
GetSchoolUsernameTemplates()
GetAllCountries()
GetStatesForCountry(countryID)
StoreCountry(sessionID, countryData)
StoreState(sessionID, countryID, stateData)
MergeStates(sessionID, keepStateID, discardStateIDs)
VerifyAndUpdateAddressDetails(sessionID, schoolID, replacementAddressDetails, principalEmail)
VerifyAddressDetails(sessionID, schoolID, replacementAddressDetails, principalEmail, datasetID)
GetSchoolContactDetailsIfAddressNotVerified(sessionID, schoolID)
GetListOfStudentsPasswordChangedSettings(sessionID, classIDs)
GetPartners()
UpdatePartnersForSchool(sessionID, schoolID, partnerAttributeIDs)
FindPotentialSchoolClashes(sessionID, name, code)
FindNearbySimilarSchools(sessionID, schoolID, departmentID)
.ctor()
GetAllSentencesInContentList(sessionID, contentListID)
GetSentenceData(sessionID, sentenceID, schoolID, moduleID)
StoreSentence(sessionID, sentenceContentListID, theSentence, compositeLists)
GetContentSetForTranslationList(sessionID, translationListID)
Test()
.ctor()
UploadSoundFiles(SessionID, Associations)
TestUploadSoundFiles(SessionID, Language1, Speaker1, Definition1, URL1, Language2, Speaker2, Definition2, URL2)
GetSpeakersAndDialects(SessionID)
StoreSpeaker(SessionID, SpeakerDetails)
DeleteSpeaker(SessionID, SpeakerID)
.ctor()
GetSchoolSummaryStats(SessionID, DataSetSelectionInfo)
GetStatsForClassesUsingFilter(sessionID, filter)
GetStudentProgress(sessionID, filter)
GetContentProgress(sessionID, filter)
GetOrderedSubjectsForClasses(sessionID, schoolID, classIDs)
GetRelevantDataSets()
GetRelevantDataSetsForSchool(sessionID, schoolID)
GetRelevantCategorisedDataSetsForSchool(sessionID, schoolID)
GetDefaultDataSetGroups()
GetChronologicalStatsForSchools(SessionID, SchoolIDs)
GetChronologicalStatsForSchoolsWithPreviousYear(SessionID, SchoolIDs)
GetChronologicalStatsForSchoolsForLanguageWithPreviousYear(SessionID, SchoolIDs, BaseLanguage, TargetLanguage)
GetStatsSpreadForSchool(SessionID, SchoolID, DataSetSelectionInfo, DataRanges)
GetUsersWithinSpecificScoreRangeInSchool(SessionID, SchoolID, DataSetSelectionInfo, MinQuestionsAnswered, MaxQuestionsAnswered)
GetWCSchoolStats(sessionID, schoolID, datasetID)
GetWCUsersWithinScoreRange(sessionID, schoolID, datasetID, scoreLower, scoreUpper, classID)
GetSchoolAllStats(sessionID, schoolID, datasetID)
GetAllKnowledgeDataSets(sessionID, isCurrent)
CanUseVSP()
GetDatasetTargetSubjects(datasetID)
GetSchoolSubjectUsage(sessionID, schoolID)
GetSmartLessonProgressReportForClasses(sessionID, ActivityID, ClassIDs, PeriodStartDate, PeriodEndDate)
GetSmartLessonProgressReportForSpecificUser(sessionID, ActivityID, UserID, PeriodStartDate, PeriodEndDate)
GetSmartLessonUserAnswersForClasses(sessionID, ActivityID, ClassIDs, PeriodStartDate, PeriodEndDate, SectionID, ContentID, MostRecentOnly)
GetSmartLessonUserAnswersForSpecificUser(sessionID, ActivityID, userID, PeriodStartDate, PeriodEndDate, SectionID, ContentID, MostRecentOnly)
GetSmartLessonCommonMistakesForClasses(sessionID, ActivityID, ClassIDs, PeriodStartDate, PeriodEndDate, SectionID, ContentID)
GetSmartLessonCommonMistakesForSpecificUser(sessionID, ActivityID, UserID, PeriodStartDate, PeriodEndDate, SectionID, ContentID)
GetClassUsageDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, subjectIDs, startDate, endDate)
GetClassUsageSummaryForDashboard(sessionID, schoolID, classIDs, subjectIDs, startDate, endDate)
GetStudentUsageDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, userID, subjectIDs, startDate, endDate)
GetClassTaskCompletionDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, subjectIDs, startDate, endDate)
GetStudentTaskCompletionDataForSubjectsInTimePeriod(sessionID, schoolID, classIDs, userID, subjectIDs, startDate, endDate)
GetContentListUserProgressForStudent(sessionID, schoolID, listID, studentID, milestoneLevel)
GetContentListUserProgressForClasses(sessionID, schoolID, listID, classIDs, milestoneLevel)
.ctor()
StoreSQLEmailTask(sessionID, emailTask)
AddNewSchedule(sessionID, schedule)
GetAllSQLEmailTasks(sessionID)
GetHistoryOfSpecificTaskSchedule(sessionID, scheduleID)
UpdateSQLEmailTask(sessionID, task)
EnableOrDisableTaskSchedule(sessionID, taskScheduleID, enable)
RenderXSLTemplate(sessionID, xslTemplate, xmlData)
ValidateXSL(sessionID, Xsl)
GetValidSenders(sessionID)
UpdateTaskSchedule(sessionID, schedule)
DeleteTaskSchedule(sessionID, scheduleID)
GetSampleXml(sessionID, taskID)
.ctor()
ValidateClassCode(Code)
RequestAdditionToClassForExistingUser(ClassCode, Username, Password)
RequestAdditionToClassForNewUser(ClassCode, FirstName, Surname, TitleID, Email, Username, Password)
ValidateThatUsernameIsUnique(Username)
GetUserTitles()
.ctor()
GetUsersInClass(SessionID, ClassID, UserTypeFilterString)
GetUsersInSpecificClasses(SessionID, ClassIDs)
GetUsersOfPrivilegesInSpecificClasses(sessionID, classIDs, minPrivileges, maxPrivileges)
GetFilteredUsersInSchool(SessionID, SchoolID, MinPrivileges, MaxPrivileges)
GetTeachersInASchoolAsync(sessionID, schoolID)
GetUserDataForSpecificUsers(SessionID, UserIDs)
GetUserAndLoginDataForSpecificUsers(SessionID, UserIDs)
GetUserAndLoginDataWithContactsForSpecificUsers(SessionID, UserIDs)
GetUserTitles(SessionID)
GetUserTypes(SessionID)
ValidateLoginDetails(Username, Password)
AddUsersToClass(SessionID, ClassID, UserIDs, UserType)
RemoveUsersFromClass(SessionID, ClassID, UserIDs)
ResetUserPasswords(SessionID, UserIDs)
ResetUserPasswords2(sessionID, userIDs, options)
MoveUsersBetweenClasses(SessionID, DonorClassID, TargetClassID, UserIDs)
ValidateThatUsernameIsUnique(SessionID, Username, CurrentUserID)
EditUserDetails(SessionID, UserID, FirstName, Surname, Email, Title)
EditUserDetails2(SessionID, UserID, FirstName, Surname, Email, Title, StudentID)
EditUserDetails3(SessionID, UserID, FirstName, Surname, Email, Title, StudentID, ParentEmail)
EditUserType(SessionID, UserID, ClassID, OldUserType, NewUserType)
CreateNewUser(SessionID, FirstName, Surname, TitleID, Email, Username, Password)
CreateNewUserAndAddToClass(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType)
CreateNewUserAndAddToClassWithOptions(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType, options)
CreateNewUserAndAddToClassWithOptions2(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType, StudentID, options)
CreateNewUserAndAddToClassWithOptions3(SessionID, FirstName, Surname, TitleID, Email, Username, Password, ClassID, UserType, StudentID, ParentEmail, options)
AcceptUserJoinRequests(SessionID, ClassID, UserIDs, UserType)
DeclineUserJoinRequests(SessionID, ClassID, UserIDs)
GetUserJoinRequestsForClasses(SessionID, ClassIDs)
GetCurrentOnlineUsers(sessionID)
GetCurrentOnlineUserCount(sessionID)
GetListOfOnlineUsersInMySchool(SessionID, schoolID, userIDFilter)
GetCurrentOnlineUsersForClasses(sessionID, schoolID, classIDs, baseLanguage, subjectIDs)
BulkUploadSchoolUsers(SessionID, SchoolID, users, licenceID)
BulkUploadSchoolUsersWithOptions(SessionID, SchoolID, users, licenceID, options)
FindUnavailableUsernamesOutsideSchool(sessionID, schoolID, usernames)
CheckUsersHaveDefaultPassword(sessionID, userIDs)
GetDatasetGroupDataForSchool(sessionID, schoolID)
StoreUploadHistoryLogItemToDatabase(sessionID, item)
StoreUploadCompleteCommentAndNotifySLO(sessionID, schoolID, comment)
PreviewBulkUploadSchoolUsernameMatches(sessionID, schoolID, usersToUpload)
PreviewBulkUploadSchoolUsernameMatchesWithOptions(sessionID, schoolID, usersToUpload, options)
CheckPasswordSuitability(password)
EditContactDetails(sessionID, userID, jobTitle, notes, contactRoles, secondaryEmail)
EditLoginDetailsSecure(sessionID, userID, encryptedUsernameBase64, encryptedPasswordBase64)
GetUserEmailAddress(sessionID, userID)
GetContactsStatsForSchool(sessionID, schoolID)
GetTeacherCertificationUserInfoForSchool(sessionID, schoolID)
SearchForUsersInSchool(sessionID, schoolID, searchTerms, numberOfResults)
ResetPasswordToFirstname(sessionID, userID)
SearchForUsersGlobally(sessionID, userSearchTerms, schoolSearchTerms, numberOfResults)
UpdateUserEmailAddress(sessionID, user, emailAddress)
UpdateUserEmailAddress2(sessionID, userID, emailAddress)
CheerStudentsOn(sessionID, userIDs, isReply)
GetCheers(sessionID)
RecordUserNavigation(sessionID, request)
GetMostRecentNavigationEventForUser(sessionID, userID)
RecordClassListUpload(sessionID, uploadDetails)
GetSampleUserIdentifiers(sessionID, schoolID, identifierType)
PreviewClassListDetailsEmail(sessionID, sampleTeacher, templateData)
SendClassListDetailsToTeachers(sessionID, teachersAndClasses, templateData)
DownloadClassListDetails(sessionID, schoolID, classIDs)
DoesUsersDepartmentHaveStudentsEnrolled(sessionID)
LogCPDashboardSearchHistoryRecord(sessionID, record)
____type_exposers(a)
EditLoginDetails(SessionID, UserID, Username, Password)
UpdateLoginDetails(CurrentUsername, CurrentPassword, NewUsername, NewPassword, EmailAddress)
UpdateUserLoginDetails(CurrentUsername, CurrentPassword, NewUsername, NewPassword, EmailAddress, overrideCommonPasswordCheck)
ChangeUserPassword(SessionID, UserID, password, forceChange)
.ctor()
ExposeTypes()
CreateAssessmentTask(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle)
CreateEarnPointsTask(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, TargetPoints, TargetKnowledgeSet)
CreateLearnContentTask(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes)
CreateAssessmentTask2(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle)
CreateEarnPointsTask2(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetPoints, TargetKnowledgeSet)
CreateEarnPointsTask3(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetPoints, TargetKnowledgeSet, notifyTeacher)
CreateEarnPointsTask4(sessionID, creationDetails)
CreateLearnContentTask2(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes)
CreateLearnContentTask3(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, ActivityFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes, notifyTeacher)
CreateLearnContentTask4(sessionID, creationDetails)
CreateAssessmentTask3(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType)
CreateAssessmentTask4(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, RequiresAccessCode, AccessCode)
CreateAssessmentTask5(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, RequiresAccessCode, AccessCode, NotifyTeacher)
CreateAssessmentTask6(sessionID, Name, Description, StartDate, DueDate, UserFilter, TimezoneOffset, brand, emailStudents, emailTeachers, TestID, ownsTest, ContainingModuleID, NumberOfAttemptsAllowed, GradeAggregationStyle, AssessorType, RequiresAccessCode, AccessCode, StudentResultViewingPermissions, SecurityLevel, OverrideTimeAllowed, OverrideTimeAllowedForDisconnections, NotifyTeacher)
CreateAssessmentTask7(sessionID, creationDetails)
CreateCompleteActivityTask(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, TimezoneOffset, Brand, emailStudents, emailTeachers, includePreviousAttempts, previousAttemptsCutoff)
CreateCompleteActivityTask2(sessionID, Name, Description, StartDate, DueDate, FinalSubmissionDate, AllowLateSubmissions, UserFilter, ContentFilter, TimezoneOffset, Brand, emailStudents, emailTeachers, includePreviousAttempts, previousAttemptsCutoff, notifyTeacher)
CreateCompleteActivityTask3(sessionID, creationDetails)
ModifyAssessmentTask(sessionID, newData)
UpdateAssessmentTaskAccessCode(sessionID, taskID, newAccessCode)
UpdateAssessmentTaskResultPublicationStatus(sessionID, taskID, newStatus)
ModifyEarnPointsTask(sessionID, newData)
ModifyLearnContentTask(sessionID, newData)
ModifyCompleteActivityTask(sessionID, newData)
DeleteTask(sessionID, TaskID)
DeleteAssessmentTask(sessionID, TaskID, DeleteUnderlyingTest)
ReopenEarnPointsTask(sessionID, taskID, newFinalSubmissionDate)
ReopenLearnContentTask(sessionID, taskID, newFinalSubmissionDate)
ReopenCompleteActivityTask(sessionID, taskID, newFinalSubmissionDate)
ReopenAssessmentTask(sessionID, taskID, newFinalSubmissionDate, markSubsequentAttemptsAsOverdue)
SendImmediateReminderEmailToStudentsAboutTask(sessionID, TaskID)
GetTasksOwnedByUser(sessionID)
GetTasksOwnedByUser2(sessionID, excludeOldTasks)
GetTasksForClass(sessionID, ClassID)
GetTasksForClass2(sessionID, ClassID, excludeOldTasks)
GetTasksForClasses(sessionID, ClassIDs, OldestExpiryDate)
GetTaskCountsForClasses(sessionID, classIDs, oldestExpiryDate, limitToAssessments)
GetSpecificTasks(sessionID, TaskIDs)
GetTaskProgressOverviewForMultipleTasks(sessionID, taskIDs, IncludeLateSubmissions)
GetProgressReportInfoForLearnContentTask(sessionID, TaskID)
GetProgressReportInfoForLearnContentTask2(sessionID, TaskID, filteredClassIDs)
GetProgressReportInfoForAssessmentTask(sessionID, TaskID)
GetProgressReportInfoForAssessmentTask2(sessionID, TaskID, filteredClassIDs)
GetProgressReportInfoForEarnPointsTask(sessionID, TaskID)
GetProgressReportInfoForEarnPointsTask2(sessionID, TaskID, filteredClassIDs)
GetProgressReportInfoForCompleteActivityTask(sessionID, TaskID)
GetProgressReportInfoForCompleteActivityTask2(sessionID, TaskID, FilteredClassIDs)
GetSmartLessonProgressReportForCompleteActivityTask(sessionID, TaskID, ActivityID)
GetSmartLessonProgressReportForCompleteActivityTask2(sessionID, TaskID, ActivityID, filteredClassIDs)
CheckWhetherSmartLessonReportHasNewData(sessionID, TaskID, ActivityID, LastKnownUpdate, filteredClassIDs)
GetSmartLessonProgressReportForCompleteActivityTaskForSpecificUser(sessionID, TaskID, ActivityID, UserID)
CheckWhetherSmartLessonReportForSpecificUserHasNewData(sessionID, TaskID, ActivityID, UserID, LastKnownUpdate)
GetCommonMistakesForCompleteActivityTask(sessionID, taskID, activityID, sectionID, contentID)
GetCommonMistakesForCompleteActivityTask2(sessionID, taskID, activityID, sectionID, contentID, filteredClassIDs)
GetCommonMistakesForCompleteActivityTaskForSpecificUser(sessionID, taskID, userID, activityID, sectionID, contentID)
GetUserAnswersForCompleteActivityTask(sessionID, taskID, activityID, sectionID, contentID)
GetUserAnswersForCompleteActivityTask2(sessionID, taskID, activityID, sectionID, contentID, filteredClassIDs)
GetUserAnswersForCompleteActivityTask3(sessionID, taskID, activityID, sectionID, contentID, mostRecentAnswerOnly, filteredClassIDs)
GetUserAnswersForCompleteActivityTaskForSpecificUser(sessionID, taskID, userID, activityID, sectionID, contentID)
GetUserAnswersForCompleteActivityTaskForSpecificUser2(sessionID, taskID, userID, activityID, sectionID, contentID, mostRecentAnswerOnly)
GetAnswerReviewsReportForCompleteActivityTask(sessionID, TaskID, filteredClassIDs)
DoesTaskHaveSmartLessonExtendedResponseSections(sessionID, taskID)
SubmitSmartLessonAnswerReview(sessionID, review)
GetUserTaskLiveUserProgressForCompleteActivityTask(sessionID, taskID)
GetUserTaskLiveUserProgressForEarnPointsTask(sessionID, taskID)
GetUserTaskLiveUserProgressForLearnContentTask(sessionID, taskID)
GetMultipleHomeworkTasksSummaryReportForClasses(sessionID, classIDs, periodStartDate, periodEndDate, includeHomework, includeAssessments, includeTasksAssignedToTargetStudents)
EstimateTimeForLearnContentTask(sessionID, UserFilter, ContentFilter, ActivityFilter, TargetStarLevel, TargetKnowledgeSet, RequireLearningInAllSelectedActivitySubtypes)
EstimateTimeForEarnPointsTask(sessionID, UserFilter, ContentFilter, ActivityFilter, TargetScore)
EstimateTimeForCompleteActivityTask(sessionID, UserFilter, ContentFilter)
EstimateTimeForCompleteActivityTask2(sessionID, UserFilter, ContentFilter, filterSections, sectionFilters)
GetTestForAssessmentTask(sessionID, assessmentTaskID)
GetTest(sessionID, testID)
CreateTest(sessionID, newTest, schoolToShareWith)
ModifyTest(sessionID, test)
DeleteTest(sessionID, testID)
GetAllAssessmentTemplates(sessionID)
EstimateTimeForAssessmentTaskDataSelection(sessionID, TargetListID, TranslationDirection)
EstimateTimeForAssessmentTaskDataSelection2(sessionID, TargetListIDs, TranslationDirection)
EstimateMaxNumberOfQuestionsForQuickTestContentSelection(sessionID, parameters)
GetTestAttemptMarkingData(sessionID, testID, assessmentContextID, attemptID, includeCompletelyMarkedAttempts)
GetAssessmentTaskAttemptsMarkingData(sessionID, taskID, includeCompletelyMarkedAttempts)
SaveTeacherQuestionGradesForAttempt(sessionID, attemptID, version, grades)
FinaliseTeacherQuestionGradesForAttempt(sessionID, attemptID, version)
FinaliseTeacherAggregatedGradeForAttempt(sessionID, attemptID, grade)
FlagSectionMarkingStatusAsComplete(sessionID, attemptID, sectionID)
GetTaskMonitoringEvents(request)
GetTaskMonitoringStatuses(request)
GetCurrentAssessmentAttemptDetailsForAssessmentTasks(sessionID, requests)
GetCurrentAssessmentAttemptDetailsForAssessmentTaskForUser(sessionID, taskID, userID)
CreateQuickTest(sessionID, newTest, schoolToShareWith)
ModifyQuickTest(sessionID, test)
GetQuickTestForAssessmentTask(sessionID, assessmentTaskID)
DoesTestHaveAnyAttempts(sessionID, testID)
____type_exposers(a, b, c, d, e, f, g)
GetUserAssessmentResultSummaries(sessionID, userID)
GetUserAssessmentResultSummariesWithFilter(sessionID, userID, testID, assessmentContextID)
GetAssessmentTaskReportingData(sessionID, assessmentTaskID)
GetAssessmentTaskReportingData2(sessionID, assessmentTaskID, excludeTeachers, filteredClassIDs)
GetUserAssessmentReportingData(sessionID, userID, testID, assessmentContextID)
GetStudentAnalysisGroups(sessionID, userID, testID, assessmentContextID)
GetGradingMethods(sessionID)
GetGradingMethod(sessionID, id)
HasTestBeenAttempted(sessionID, testID)
CheckOutNextAssessmentAttemptForMarking(sessionID, filter, lastAttemptID, lastSequenceString)
CheckOutSpecificAssessmentAttemptForMarking(sessionID, attemptID, filter, overrideExistingCheckout)
GetSpecificAssessmentAttempt(sessionID, attemptID, filter)
CheckBackInSpecificAssessmentAttemptForMarking(sessionID, attemptID)
GetMarkingProgressStatus(sessionID, filter)
GetAssessmentSectionVariantsForMarking(sessionID, filter)
GetMarkerHistory(sessionID, filter, markerUserID, offset, pageSize)
GetTestMarkers(sessionID, filter)
GetMarkingSetWithPrivilages(sessionID, markingSetID)
UpdateMarkingCheckoutLastUsed(sessionID, attemptID)
AssignAppropriateRemediationTasksToAllUsersInAssessmentTask(sessionID, assessmentTaskID, DueDate, maxTimeToAssign, maxSmartLessonsToAssign, activityLastAttemptedCutoff, emailStudents, emailTeacherReport)
AssignAppropriateRemediationTasksToAllUsersInAssessmentTask2(sessionID, assessmentTaskID, filterRecommendations, filteredRecommendations, filterClasses, filteredClassIDs, DueDate, maxTimeToAssign, maxSmartLessonsToAssign, activityLastAttemptedCutoff, emailStudents, emailParents, emailTeacherReport, notifyTeacher)
MakeAttemptEditable(sessionID, attemptID)
GetDemoTaskDetails()
GetSampleQuestionSetForAssessment(sessionID, assessmentID)
GetUserDetailsForTask(sessionID, taskID)
GetUserDetailsForTask2(sessionID, taskID, restrictToStudents)
GetUserOnlineStatusForTask(sessionID, taskID)
GetUserOnlineStatusForTask2(sessionID, taskID, restrictToStudents)
ExportPDFOfAssessmentTaskAttempt(sessionID, taskID, attemptID, notifyWhenDone)
ExportSpreadsheetOfAssessmentTaskAttempt(sessionID, taskID, attemptID)
ExportSpreadsheetOfAllAttemptsForAssessmentTask(sessionID, taskID, targetClassIDs)
ExportPDFOfAssessmentAttempt(sessionID, attemptID, notifyWhenDone)
ExportPDFsOfAllAttemptsForAssessmentTask(sessionID, taskID, targetClassIDs, notifyWhenDone)
ExportPDFPreviewOfAssessment(sessionID, testID, enforceNewAttempt, notifyWhenDone)
GetReviewQuizValidQuestions(sessionID, activityID, translationDirection)
GetReviewQuizValidTranslationDirections(sessionID, activityID, translationDirections)
.ctor()
HasTeacherRequestedFollowup(sessionID, schoolID)
TeacherRequestedFollowup(sessionID, schoolID)
DeclinedFollowup(sessionID, schoolID, reason)
TeacherSubmitContactDetails(sessionID, schoolID, date1, time1, phone1, date2, time2, phone2, date3, time3, phone3)
TeacherSubmitDepartmentDetails(sessionID, schoolID, details)
RequestedFollowup(sessionID, schoolID, datasetID)
TeacherDeclinedFollowup(sessionID, schoolID, reason, datasetID)
SubmitContactDetails(sessionID, schoolID, datasetID, date1, time1, phone1, date2, time2, phone2, date3, time3, phone3)
SubmitDepartmentDetails(sessionID, schoolID, details, datasetID)
GetChronologicalStatsForSchools(SessionID, SchoolIDs)
.ctor()
.ctor()
LogUserSearch(session, record)
LogUserSearch(userID, record)
.ctor()
GenerateURLForAppContent(moduleID, listID, taskID)
GenerateURLForTaskDashboard(taskID)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
CreateMediaItemWithReturnObject(session, subjectID, mediaType, schoolOwner, title, tags, url, thumbnailURL, attribution, sharing)
CreateMediaItem(session, subjectID, mediaType, schoolOwner, title, tags, url, thumbnailURL, attribution, sharing)
GetMediaItem(ID)
EditMediaItem(session, item)
SearchForMediaItems(session, searchTerm, mediaType, subjectID, school)
UpdateExternalVideoWhitelist()
DownloadSpreadsheetOfExternalVideos()
GetVideosFromDatabase()
StoreExternalVideoData(videos)
GetNewYoutubeVideosForWhitelist(lastSuccessful)
ValidateYouTubeVideos()
ValidateYouTubeVideos(savePath)
RemoveExternalVideoRecord(questionID, videoID, vidSource)
ValidateYoutubeVideo(videoCode)
get_EmbedURL()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
UpdateOldSchoolGeolocations()
FetchAndUpdateSchoolGeolocation(schoolID)
FetchSchoolGeolocation(schoolID)
BuildUpFullSchoolAddress(school)
SaveSchoolGeolocation(schoolID, latitude, longitude)
UpdateSchoolGeolocationLastAttemped(schoolID)
GetAllSchoolsRequiringGeolocationUpdate()
FindNearbySimilarSchools(session, schoolID, departmentID)
FindNearbySimilarSchools(schoolID, departmentID, maxResults)
.ctor()
.cctor()
.ctor()
ResetLocationsCache()
GetAllCountriesWithReturnObject()
GetAllCountries()
GetAllCountriesFromServer()
StoreCountry(sessionID, countryData)
MergeStates(sessionID, keepStateID, discardStateIDs)
StoreState(sessionID, countryID, stateData)
GetStatesForCountryWithReturnObject(countryID)
GetStatesForCountry(countryID)
GetStatesCacheKey(countryID)
GetStatesForCountryFromServer(countryID)
GetScoreboardCountriesForThisDataset(datasetID)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GenerateTransactionsForMovingClassesToLicence(creatorID, oldLicenceID, newLicenceID, usersAlreadyInTargetLicence, classesMoved)
GenerateTransactionsForRemovingClassesFromLicence(creatorID, oldLicenceID, classesRemoved)
GenerateTransactionsForAddingClassesToLicence(creatorID, targetLicence, studentsInTargetLicenceOriginally, classesAdded)
GenerateTransactionsForAddingUsersToClass(creatorID, classID, classLicences, originalUserLicenceMap, userIDs)
GenerateTransactionsForRemovingUsersFromClass(creatorID, originalClassID, studentsRemoved)
GenerateTransactionsForBulkImportingStudents(creatorID, newLicenceID, userClassMap, schoolID)
GenerateTransactionsForAddingStudentsToLicence(creatorID, newLicenceID, usersInLicenceOriginally, studentsAdded, schoolID)
GenerateTransactionsForRemovingStudentsFromLicence(creatorID, oldLicenceID, studentsRemoved, schoolID)
GenerateTransactionsForMovingStudentsToLicence(creatorID, oldLicenceID, targetLicenceID, studentsInTargetLicenceOriginally, studentsMoved, schoolID)
GetSchoolIDFromClass(classID)
GetStudentIDsFromClassIDs(classIDs)
SubmitTransactions(transactionItems)
IsUserNewToLicenceWhenAddedToClass(userID, classIDs, licenceID)
ExtractUsersWhoAreInLicence(userIDs, licenceID)
RecordLicenceTransaction(transaction)
FindMergableTransactionID(transaction, sqlTransaction, conn)
FindConflictingUserInserts(transactionID, userIDs, sqlTransaction, conn)
RemoveTeachersFromUserIDs(userIDs, classID)
CreateOrUpdateTransaction(preprocessedTransaction, sqlTransaction, conn, relevantTransactionID)
UpdateLicenceTransactionSummaries(licenceChanged)
GetRecentTransactionSummaries(session, schoolID, fetchCount)
DownloadLicenceTransactionsForSchool(session, schoolID, startDate, endDate, transactionIDs)
GetLicenceTypes(SessionID)
GetLicenceStatusOptions(SessionID)
GetLicenceWithProduct(includeUserCount, schoolID, licenceIDs, classIDs, coalesceProducts)
GetAllLicences(session)
GetLicenceDataForSchool(session, schoolID)
GetLicenceDataForSpecificLicences(session, licenceIDs)
GetLicencesAttachedToClasses(session, classIDs, includeUserCount)
GetLicencedSubjectsForClasses(classIDs)
ConvertProductGroupToComponents(products)
ConvertProductComponentsToGroup(products)
ConvertProductComponentsToGroup(licenceProducts)
GetProducts()
GetProductsFromDatabase()
GetSubjectsForProduct(productID)
CreateNewLicence(session, licence, products)
ModifyLicence(session, licence, products)
ExtendLicence(parameters)
ApplyGracePeriodChangeToLicence(parameters)
SuppressExpiringLicenceWarning(parameters)
DeleteLicence(SessionID, LicenceID)
AssociateClassWithLicence(session, LicenceID, ClassID)
AssociateClassWithLicence(session, licenceID, classID, conn)
AssociateMultipleClassesWithLicence(sessionID, licenceID, classes)
DisassociateClassWithLicence(sessionID, licenceID, classID)
DisassociateMultipleClassesWithLicence(sessionID, licenceID, classes)
MoveMultipleClassesToLicence(session, originalLicenceID, targetLicenceID, classesToMove)
GetFullClassDataAssociatedWithLicence(SessionID, LicenceID)
GetNumberOfUsersUsingLicence(SessionID, LicenceID)
GetCurrenciesWithReturnObject()
GetCurrencies()
GetCurrenciesFromDatabase()
GetAllProductDetailsForLicensing(session)
GetLicenceIDsFromClass(classID)
GetLicenceIDsFromClassesAsync(classes)
GetIndividualPaymentURLForUser(username, password)
DoesUserHaveActiveLicenceForTheirDepartments(userID, schoolID)
DoDepartmentsHaveActiveLicences(schoolID, departments)
IdentifyLicencesExpiringSoon()
GenerateWarningStringForSchool(userID, warning)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(creatorID, oldLicenceID, newLicenceID, userIDs, schoolID)
get_TransactionType()
ValidateItem()
.ctor()
.ctor(id, transactionDate, summary, users)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_IsCurrentlyActive()
set_IsCurrentlyActive(value)
get_InGracePeriod()
set_InGracePeriod(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_IsPartOfBatch()
get_Successful()
.ctor()
.ctor()
Serialise(request)
Deserialise(serialisedObject)
.ctor()
.ctor()
.ctor()
.ctor()
ExportAssessmentAttemptAsSpreadsheet(session, taskID, attemptID)
ExportAssessmentAttemptsForTasksAsSpreadsheet(session, taskID, targetClassIDs)
ExportAssessmentAttemptsAsSpreadsheetAfterValidation(taskID, testID, assessmentContextID, attemptIDs, singleAttemptOnly)
AddHeaderRows(worksheet)
AddAttemptToSpreadsheet(worksheet, attempt, className, rowNum)
.ctor()
ConvertCsvToExcelSpreadsheet(data, worksheetName, format)
ConvertCsvToExcelSpreadsheetWithURL(data, fileName, format)
UploadExcelSpreadsheetWithURL(spreadsheet, fileName)
.ctor()
GetNextQuestionNeedingThumbnailUpdate()
StoreQuestionThumbnail(questionID, urlFullSize, url300px)
.ctor()
SvgToPng(svgString)
SaveSvgStringAsPng(session, fileName, svgString)
SaveSvgStringAsPng(fileName, svgString)
.ctor()
ExportPDFOfAssessmentTaskAttempt(session, taskID, attemptID, notifyWhenDone)
ExportPDFOfAssessmentAttempt(session, attemptID, notifyWhenDone)
ExportPDFsOfAllAttemptsForAssessmentTask(session, taskID, targetClassIDs, notifyWhenDone)
AddAssessmentAttemptToPDFGenerationQueue(requestorID, task, attempt, batchID)
AddAssessmentAttemptToPDFGenerationQueue(requestorID, test, context, attempt, batchID, task)
GenerateAssessmentTaskAttemptURLForExport(taskID, attemptID)
GenerateAssessmentAttemptURLForExport(testID, attemptID)
ExportPDFPreviewOfAssessment(session, testID, enforceNewAttempt, notifyWhenDone)
AddAssessmentPreviewToPDFGenerationQueue(requestorID, viewerID, testID, attemptID, batchID)
GenerateAssessmentPreviewURLForExport(testID, attemptID)
.ctor()
GetPDFGenerationRequestFromDatabase(requestID)
GetPDFGenerationRequestsForBatchFromDatabase(batchID)
GetPDFGenerationRequest(requestID)
RemoveRequestStatusFromCache(requestID)
GenerateCacheKeyForPDFRequest(requestID)
AddPDFGenerationRequestToQueue(requestorID, viewerID, batchID, options)
RecordSuccess(requestID, fileDetails)
RecordBatchSuccess(batchID, fileDetails)
RecordFailure(requestID, faultMessage)
GetStatusForSinglePDFRequest(session, requestID)
GetStatusForSinglePDFRequestAfterValidation(requestID)
GetStatusForPDFBatchRequest(session, batchID)
GetPDFBatchDetailsAfterValidation(batchID)
GetStatusOfPDFBatchRequestsAfterValidation(batchID)
CreateBatch(requestorID)
StoreNotificationPreferenceForGenerationRequestWithReturnObject(session, singleRequestID, batchID, notify)
StoreNotificationPreferenceForGenerationRequest(session, singleRequestID, batchID, notify)
StoreNotificationPreferenceAfterValidation(batchJob, referencedID, notificationMethod)
GetNotificationPreference(singleRequestID, batchID)
SendNotificationForSinglePDF(request)
UpdateNotificationStatus(notificationID, newStatus)
SendEmailNotificationForPDFs(requests, batchDetails, notificationID)
CreateGenerationCompleteTemplateModel(user, generationDescription, batchDetails, pdfDetails)
SendNotificationForPDFBatch(batchID, batchFileDetails)
SendSlackNotificationForPDFs(requests, batchFileDetails, notificationID)
DescribeGenerationType(dataSource)
.ctor()
DownloadFile(fileName, data)
CreateRandomFolderName(fileName)
CreateRandomFolderInTempDirectory()
UploadContentFile(sessionID, inputStream, filename, uploadType, subFolderPath, tags, title, attribution, subjectID, mediaType, sharing, schoolOwner)
UploadFile(sessionID, inputStream, filename, uploadType, subFolderPath)
UploadFileAfterValidation(inputStream, filename, uploadType, subFolderPath)
SaveToS3(bucket, path, filename, fileStream, mimeType)
SaveToS3(bucket, path, filename, fileBytes, mimeType)
SaveToS3Async(bucket, path, filename, fileStream, mimeType)
SaveToS3Async(bucket, path, filename, fileBytes, mimeType)
CombineURLPathAndFilename(path, filename)
GetImages(session, searchTerm, subjectID)
ValidateFileName(fileName)
GenerateS3FileUploadDirective(session, uploadType, folderPath, filename, flashUpload)
GenerateS3StudentFileUploadDirective(session, isPrivateContent)
GenerateS3StudentFileUploadDirective(userID, isPrivateContent)
GenerateFolderPathForS3StudentFileUpload(userID, isPrivateContent)
GenerateS3FileUploadDirective(uploadURI, downloadURI, bucketName, folder, filename, flashUpload)
FormatDateForS3(date)
GenerateS3UploadPolicy(bucketName, key, mimeType, flashUpload, validityPeriod)
ValidateTextFileSafety(fileName, data)
ValidateFileStreamExtensionSafety(fileName)
ExtractFileExtensionFromFileName(fileName)
DetermineMIMETypeFromFileName(fileName)
DetermineMIMETypeForTextFile(fileName)
GenerateCloudfrontSignedURLForPrivateUserFileUpload(session, url)
MakeURLFriendlyFileName(fileName)
GenerateCloudfrontSignedURLForPrivateUserFileUpload(session, url, allowedPeriod)
ValidateThatSessionHasAccessToS3StudentFile(session, url, writeAccess)
GenerateCloudfrontSignedURLAfterValidation(url, allowedPeriod)
RemoveS3StudentFile(session, url)
RemoveS3StudentFileAfterValidation(url, maxAllowableAge)
GetS3FileMetadata(bucket, key)
DeleteS3Object(bucket, key)
.cctor()
.ctor()
.ctor()
.ctor(_Sender, _Priority, _DatabaseQueryString, _DatabaseQuerySenderColumn, _DatabaseQueryRecipientColumn, _DatabaseQueryEmailBodyColumn, _XSL)
.ctor(_Sender, _Priority, _DatabaseQueryString, _DatabaseQuerySenderColumn, _DatabaseQueryRecipientColumn, _DatabaseQueryEmailBodyColumn, _XSL, EmailBodyIsHTML, _DatabaseQueryCCAddress)
TransformEmails(Emails)
TransformEmails(Emails, XSL)
TransformEmail(Message, CompiledTransform)
CompileXSL(XSL)
FlushXslCache()
CleanUpXMLString(Input)
.cctor()
GetSenderAddresses()
InvalidateSenderAddressCache()
GetValidSenderAddressesFromDB()
.cctor()
.ctor()
.ctor(id, address)
ManageBouncedEmail(address, bounceType, bounceSubtype, errorMessage, timeBounced)
.ctor()
.ctor()
get_Instance()
AddMessageToQueue(Sender, Message)
AddMessageToQueue(Sender, Priority, Message)
AddMessageToQueue(Sender, Message)
AddMessageToQueue(Sender, Priority, Message)
AddMessagesToQueue(Sender, Messages)
AddMessagesToQueue(Sender, Priority, Messages)
AddMessagesToQueue(Sender, Messages)
AddMessagesToQueue(Sender, Priority, Messages)
IsSenderValid(address)
TestQueue()
SerializeMailMessageToString(Message)
SerializeMailMessageToString(Message)
.cctor()
.ctor(messageID, innerException)
RequestAccessToCheckMessages()
ReleaseAccessToCheckMessages()
.ctor()
get_Instance()
InitialiseMessagingQueues()
GetQueue(QueueID)
TimerTick(TimerInfo)
CheckAllQueues()
.cctor()
Activate()
get_Status()
set_Status(value)
ChangeStatusIfAppropriate(triggerStatus, newStatus)
.ctor(queueID, senderAddress, host, loginDetails, port, useSSL)
.ctor(Parameters)
Initialise(queueID, senderAddress, host, loginDetails, port, useSSL)
Activate()
StartGetNewMessagesThread()
GetNewMessages()
UpdateDBAboutEmailErrors(errors)
ShutDownAllIdleClients()
NewMessagesFetchedCallback(Result)
SpinUpClients(RequestedNumberOfClients)
LogMessageFailure(Message, ex)
EmailDeliveryCompleted(sender, e)
.cctor()
.ctor()
.ctor(queueID, senderAddress)
.ctor(queueID, senderAddress, host, port, useSSL, username, password, useSESAPI)
.ctor(messageID, senderID, rawEmailData)
.ctor(messageID, senderID, message)
.cctor()
.ctor()
BuildSenderQueueLookup()
GetSenderID(sender)
AddMessageToQueue(sender, priority, message)
AddMessageToQueueAsync(sender, priority, message)
AddMessageToQueue(sender, message)
AddMessageToQueueAsync(sender, message)
AddMessageToQueue(sender, message)
AddMessageToQueueAsync(sender, message)
AddMessageToQueue(sender, priority, message)
AddMessageToQueueAsync(sender, priority, message)
AddMessagesToQueue(sender, messages)
AddMessagesToQueueAsync(sender, messages)
GetSQSQueueEndpointForPriority(priority)
AddMessagesToQueue(sender, priority, messages)
AddMessagesToQueueAsync(sender, priority, messages)
AddMessagesToQueue(sender, messages)
AddMessagesToQueueAsync(sender, messages)
AddMessagesToQueue(sender, priority, messages)
AddMessagesToQueueAsync(sender, priority, messages)
IsSenderValid(sender)
IsSenderValid(address)
TestQueue()
TestQueueAsync()
BuildInvalidEmailAddressesMessage(messages)
.cctor()
ToXML(message)
ProvideSenderDisplayNames(multipleMessages)
ProvideSenderDisplayName(message)
.cctor()
add_TaskCompleted(value)
remove_TaskCompleted(value)
get_Status()
set_Status(value)
ChangeStatusIfAppropriate(triggerStatus, newStatus)
.ctor(host, loginDetails, port, usessl, targetQueue)
SendNextEmail()
EmailSendWork()
EmailSendCompleteCallback(Result)
getSleepDuration(currentTry, minSleepMillis, maxSleepMillis)
ShutDownIfAppropriate()
CreateErrorString(MessageID, Message, ex)
RebuildSmtpClient()
.cctor()
get_IsShuttingDown()
set_IsShuttingDown(value)
get_Status()
set_Status(value)
.ctor()
Start()
Stop()
GetSenderInfo()
ShutDownAllIdleClients()
SpinUpClients(numberOfClientsToAdd, activateNewClients)
ActivateOrSpinUpEmailClientsForThrottledPool()
EmailDeliveryCompleted(sender, e)
UpdateThrottledEmailPool()
FillWaitingMessagesQueueFromReaders()
MessageDeliverySucceeded(message)
MessageDeliveryFailed(message, retry)
DeleteSQSMessageFromQueue(message)
DiscardSQSMessage(message)
GetQueueForMessagePriority(priority)
Dispose()
.cctor()
.ctor(SQSQueueEndpoint, ResultsQueueTargetLength)
Start()
Stop()
get_NumberOfResults()
get_IsEmpty()
NextResult()
get_LastSQSQueryNumberOfResults()
CheckForMessagesCalled(stateInfo)
CheckForMessages()
DeleteMessageFromQueue(message)
ReturnMessageToQueue(message)
Dispose()
.cctor()
ResendAllMessagesInErrorQueue()
.ctor()
.ctor()
.ctor(senderID, priority, xmlSerializedMessage)
.ctor()
.cctor()
IsNet45OrNewer()
add_TaskCompleted(value)
remove_TaskCompleted(value)
get_Status()
set_Status(value)
ChangeStatusIfAppropriate(triggerStatus, newStatus)
.ctor(targetQueue, markMessageAsSentFunction, markMessageAsFailedFunction)
SendNextEmail()
EmailSendWork()
SerializeRecordForLogging(record)
UpdateDeliveryStatus(message, status)
EnsureThatMessageIsNotAlreadyingBeingSent(messageID)
UpdateMessageDeliverStatusInCache(messageID, status)
GenerateMessageDeliveryCacheKey(messageID)
EmailSendCompleteCallback(Result)
getSleepDuration(currentTry, minSleepMillis, maxSleepMillis)
ShutDownIfAppropriate()
CreateErrorString(MessageID, Message, ex)
ConvertMailMessageToMemoryStream(message)
.cctor()
.ctor(messageID, senderID, priority, receiptHandle, rawEmailData)
.ctor(message, receiptHandle)
DeserialiseXMLSafely(rawEmailData, autoHeal)
DeserialiseXML(rawEmailData)
.ctor(messageID, senderID, priority, receiptHandle, message)
.cctor()
.ctor()
get_Status()
set_Status(value)
ChangeStatusIfAppropriate(triggerStatus, newStatus)
.ctor(senders)
Initialise(senders)
Activate()
StartGetNewMessagesThread()
GetNewMessages()
UpdateDBAboutEmailErrors(errors)
ShutDownAllIdleClients()
NewMessagesFetchedCallback(Result)
SpinUpClients(RequestedNumberOfClients)
LogMessageFailure(Message, ex)
EmailDeliveryCompleted(sender, e)
UpdateThrottledEmailPoolTimerTick(TimerInfo)
UpdateThrottledEmailPool()
.cctor()
.ctor(messageID, senderID, rawEmailData)
.ctor(messageID, senderID, message)
.cctor()
IsNet45OrNewer()
add_TaskCompleted(value)
remove_TaskCompleted(value)
get_Status()
set_Status(value)
ChangeStatusIfAppropriate(triggerStatus, newStatus)
.ctor(targetQueue)
SendNextEmail()
EmailSendWork()
EmailSendCompleteCallback(Result)
getSleepDuration(currentTry, minSleepMillis, maxSleepMillis)
ShutDownIfAppropriate()
CreateErrorString(MessageID, Message, ex)
ConvertMailMessageToMemoryStream(message)
.cctor()
.ctor()
SendTemplatedEmail(sender, recipient, subject, contentModel, priority)
SendTemplatedEmailAsync(sender, recipient, subject, contentModel, priority)
SendTemplatedEmail(sender, contentModel, populateMessage, priority)
.ctor()
SendTemplatedEmail(sender, recipient, subject, contentModel, priority)
SendTemplatedEmailAsync(sender, recipient, subject, contentModel, priority)
SendTemplatedEmail(sender, contentModel, populateMessage, priority)
GenerateTemplatedMailMessage(senderEmail, recipient, subject, contentModel)
GenerateTemplateMailBody(contentModel)
GenerateDefaultEmailMessage()
GetAllRawDestinationAddresses(message)
GetAllCleanedDestinationAddresses(message)
CleanEmailAddress(address)
ValidateAllDestinationAddresses(message, cleanBeforeChecking, throwIfError)
GetInvalidDestinationEmailAddresses(message, cleanBeforeChecking)
.ctor()
IsValid(inEmail, inPattern)
.cctor()
FromAddress(plainEmailAddress, fallback)
.ctor(emailAddressIncludingDisplayName)
GetRegionalEmailAddressForSchool(schoolID)
.cctor()
Send(msg)
Send(msgs)
AddMessageToQueue(Sender, Message)
AddMessageToQueue(Sender, Message)
AddMessagesToQueue(Sender, Messages)
AddMessagesToQueue(Sender, Messages)
AddMessageToQueue(Sender, Priority, Message)
AddMessageToQueue(Sender, Priority, Message)
AddMessagesToQueue(Sender, Priority, Messages)
AddMessagesToQueue(Sender, Priority, Messages)
SendAsync(msg)
SendAsync(msgs)
AddMessageToQueueAsync(Sender, Message)
AddMessageToQueueAsync(Sender, Message)
AddMessagesToQueueAsync(Sender, Messages)
AddMessagesToQueueAsync(Sender, Messages)
AddMessageToQueueAsync(Sender, Priority, Message)
AddMessageToQueueAsync(Sender, Priority, Message)
AddMessagesToQueueAsync(Sender, Priority, Messages)
AddMessagesToQueueAsync(Sender, Priority, Messages)
IsSenderValid(address)
.ctor()
<Send>b__2_0(msg)
<SendAsync>b__12_0(msg)
AddMessageToQueueAsync(Sender, Message)
AddMessageToQueueAsync(Sender, Message)
AddMessagesToQueueAsync(Sender, Messages)
AddMessagesToQueueAsync(Sender, Messages)
AddMessageToQueueAsync(Sender, Priority, Message)
AddMessageToQueueAsync(Sender, Priority, Message)
AddMessagesToQueueAsync(Sender, Priority, Messages)
AddMessagesToQueueAsync(Sender, Priority, Messages)
IsSenderValid(address)
.cctor()
get_Instance()
get_AsyncInstance()
.ctor()
AddMessageToQueue(Sender, Message)
AddMessageToQueue(Sender, Message)
AddMessagesToQueue(Sender, Messages)
AddMessagesToQueue(Sender, Messages)
AddMessageToQueue(Sender, Priority, Message)
AddMessageToQueue(Sender, Priority, Message)
AddMessagesToQueue(Sender, Priority, Messages)
AddMessagesToQueue(Sender, Priority, Messages)
IsSenderValid(address)
.ctor()
get_Instance()
InitialiseMessagingQueues()
AddMessagesToQueue(Sender, Messages)
AddMessagesToQueue(Sender, Messages)
TestQueue()
RecordCampaignEmailSendToUsers(campaignEmailID, userIDs)
FindUsersWhoHaveReceivedCampaignEmailRecently(campaignEmailID, daysAgo)
FindUsersWhoHaveReceivedCampaignEmailRecently(campaignCode, daysAgo)
TimerTick(TimerInfo)
CheckAllQueues()
.cctor()
.ctor()
.ctor(senderAddress, host, loginDetails, queueAddress, errorLogName)
.ctor(senderAddress, host, loginDetails, queueAddress, errorLogName)
.ctor(Parameters)
Initialise(senderAddress, host, loginDetails, queueAddress, errorLogName)
CreateMailClient()
CheckMessageQueue()
NewMessageRecieved(source, asyncResult)
SendQueuedMessages()
LogMessageFailure(Message, ex)
.ctor()
get_Instance()
AddMessageToQueue(Sender, Message)
AddMessageToQueue(Sender, Priority, Message)
AddMessageToQueue(Sender, Message)
AddMessageToQueue(Sender, Priority, Message)
AddMessagesToQueue(Sender, Messages)
AddMessagesToQueue(Sender, Priority, Messages)
AddMessagesToQueue(Sender, Messages)
AddMessagesToQueue(Sender, Priority, Messages)
GetQueue(Sender)
IsSenderValid(address)
TestQueue()
.cctor()
get_Email()
set_Email(value)
.ctor()
.ctor(Message)
GetSchema()
ReadXml(reader)
WriteXml(writer)
GetConfigSection(xml, nodePath)
.ctor()
get_Instance()
.cctor()
UnsubscribeFromEmail(parameters)
UpdateNotificationFrequency(parameters)
UpdateSubscriptionPreferenceForEmailGroup(userID, groupID, subscribed)
UpdateSubscriptionPreferenceForAllEmails(userID, subscribed)
.ctor()
.ctor()
.ctor()
GenerateActionLinkWithReturnObject(session, LinkType, StartDate, ExpiryDate, MaxAllowedClicks, UserID, redirectURL, brand, enforceStartDate)
GenerateActionLink(LinkType, StartDate, ExpiryDate, MaxAllowedClicks, UserID, redirectURL, brand, enforceStartDate, clickNotificationRecipient, parameters)
GenerateActionLinkAsync(LinkType, StartDate, ExpiryDate, MaxAllowedClicks, UserID, redirectURL, brand, enforceStartDate, clickNotificationRecipient, parameters)
GenerateMultipleActionLinksWithDifferentRedirectsAsync(LinkType, StartDate, ExpiryDate, MaxAllowedClicks, userIDsAndRedirectURLs, enforceStartDate, clickNotificationRecipient, parameters)
GenerateNewActionLinkSQL(StartDate, enforceStartDate)
GenerateLinksForMultipleUsers(LinkType, StartDate, ExpiryDate, MaxAllowedClicks, redirectURL, brand, enforceStartDate, UserIDs, clickNotificationRecipient, parameters)
GenerateActionLinkURL(actionLink)
.ctor()
GetActionLink(ID)
IncrementLinkStats(ID)
ActOnLink(ID, context)
HandleLinkError(ex, context)
HandleExpiredLink(link, context)
LogUserInToControlPanel(info, context, targetPage, parameters)
GenerateLinkToLogUserInToControlPanel(info, context, targetPage, parameters)
LogUserInToTouchSite(info, context, targetPage, parameters)
GenerateLinkToLogUserInToTouchSite(info, context, targetPage, parameters)
LogUserInToRedirectURL(info, context)
GenerateRemoveParentEmailActionLinkURL(userID, brandID)
GenerateMultipleRemoveParentEmailActionLinkURLs(userIDs, brandID)
GenerateOneClickLoginLinkForTeacherFromCP(session, userID)
TrySendOneClickLoginLinkNotificationEmail(generatedBy, userID, linkURL, teacher)
SlackOneClickLoginLinkToCreator(generatedBy, linkURL, validEmail, teacherName)
GenerateLinkToLogUserInToCustomEPURL(info, context, targetURL)
HandleHomeworkManagerDirectLogin(info, context)
HandleCompetitionRequestAcceptance(info, context)
HandleEmailVerification(info, context)
HandleTeacherFirstLoginLink(info, context)
HandleStudentFirstLoginLink(info, context)
HandleAutoLoginLink(info, context)
HandleResetPasswordLink(info, context)
HandleRemoveParentEmailAddressRequest(info, context)
HandleApproveShoutoutLink(info, context)
HandleCompInvitationReleaseLink(link, context)
HandleExtendLicenceLink(info, context)
HandleSuppressLicenceReminderLink(info, context)
HandleRevenueSelfConfirmationLink(link, context)
HandleNewsFeedShowMoreLink(link, context)
HandleNewsFeedCTALink(link, context)
HandleUnsubscribeFromEmailLink(link, context)
HandleUpdateGroupFrequencyChangeLink(link, context)
ApplyGracePeriodChangeToLicence(link, context)
DownloadClassDetails(link, context)
DownloadVideoWhitelist(link, context)
DeleteVideoReference(link, context)
urlRequiresAuthentication(url)
GenerateHTMLResponse(documentTitle, pageTitle, body, headTags, brand)
GenerateRedirectMetadataTag(redirectURL, delayInSeconds)
.ctor()
.cctor()
.ctor()
.ctor()
get_URL()
.ctor()
PrepareWelcomeBackEmailData(country, states)
SendPregeneratedWelcomeBackEmails(numberOfEmails)
GetDepartmentsWithProjections(periodID, minLikelihood, country, states)
GenerateWelcomeBackEmailModel(teacherData)
StoreGeneratedEmailDataToDatabase(teacherData)
GetEmailsToSend(numberOfEmails)
.ctor()
.ctor()
.cctor()
ResolveToConnectionString(database)
GetConnection(database)
GetConnectionToNamedDatabaseAsync(database)
OpenConnection(connectionString, databaseName)
PerformConnectionAttempt(connectionString, databaseName)
OpenConnectionAsync(connectionString, databaseName)
PerformConnectionAttemptAsync(connectionString, databaseName)
GetDefaultConnectionString()
GetNewDefaultConnection()
GetNewDefaultConnectionAsync()
GetNewSettingsBasedConnection()
GetNewSettingsBasedConnectionAsync()
GetNewStatsDBConnection()
GetNewStatsDBConnectionAsync()
GetSettingsBasedDataWarehouseConnection()
GetSettingsBasedDataWarehouseConnectionAsync()
GetSettingsBasedArchivedStatsConnection()
GetSettingsBasedArchivedStatsConnectionAsync()
GetSettingsBasedAuotmatedEmailsUserConnection()
GetSettingsBasedAuotmatedEmailsUserConnectionAsync()
GetNewSettingsBasedLinqDB()
GetNewSettingsBasedStatsDB()
GetNewSettingsBasedTasksDB()
GetNewSettingsBasedUsersDB()
GetNewSettingsBasedCRMDB()
GetNewSettingsBasedReportsDB()
.ctor()
get_Text()
set_Text(value)
get_Comment()
set_Comment(value)
get_Language()
set_Language(value)
get_SoundFileURL()
set_SoundFileURL(value)
get_Romanisation()
set_Romanisation(value)
get_DisplayIndex()
set_DisplayIndex(value)
get_DisplayAsAnswer()
set_DisplayAsAnswer(value)
get_SoundFileID()
set_SoundFileID(value)
get_Speaker()
set_Speaker(value)
get_IsHumanVoice()
set_IsHumanVoice(value)
get_TypeCode()
set_TypeCode(value)
.ctor()
.ctor(connection)
.ctor(connection)
.ctor(connection, mappingSource)
.ctor(connection, mappingSource)
get_Settings()
get_DataTypes()
get_UserSettings()
get_UserSettingsGroups()
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Description()
set_Description(value)
get_DataTypeCode()
set_DataTypeCode(value)
get_UserSettings()
set_UserSettings(value)
get_DataType()
set_DataType(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_UserSettings(entity)
detach_UserSettings(entity)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Description()
set_Description(value)
get_DotNetDataType()
set_DotNetDataType(value)
get_Settings()
set_Settings(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Settings(entity)
detach_Settings(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SettingsGroupID()
set_SettingsGroupID(value)
get_SettingsCode()
set_SettingsCode(value)
get_Value()
set_Value(value)
get_DateCreated()
set_DateCreated(value)
get_DateModified()
set_DateModified(value)
get_Setting()
set_Setting(value)
get_UserSettingsGroup()
set_UserSettingsGroup(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_UserID()
set_UserID(value)
get_BaseLanguageID()
set_BaseLanguageID(value)
get_TargetLanguageID()
set_TargetLanguageID(value)
get_UserSettings()
set_UserSettings(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_UserSettings(entity)
detach_UserSettings(entity)
.cctor()
.ctor()
.ctor(connection)
.ctor(connection)
.ctor(connection, mappingSource)
.ctor(connection, mappingSource)
get_Classes()
get_ClassUserLookups()
get_Roles()
get_LanguageScriptLookups()
get_Scripts()
get_TranslationDefinitionLookups()
get_SoundFiles()
get_SoundFileFolders()
get_DefinitionSoundFileLookups()
get_Definitions()
get_Translations()
get_TranslationCompiledContents()
get_ModuleContentLists()
get_ContentTemplateModuleLookups()
get_TranslationTags()
get_Tags()
get_Contents()
get_ContentListPurposes()
get_ContentTypes()
get_ContentListCompiledContents()
get_ContentListContents()
get_SentenceStructureContents()
get_Sentences()
get_ContentListContributors()
get_SentenceStructures()
get_LPApps()
get_SharedModuleTypes()
get_SchoolTemplateModuleLookups()
get_UserModuleLookups()
get_Followups()
get_AddressVerifications()
get_ProblemTypes()
get_ProblemCategories()
get_ReportedContentProblemDefinitions()
get_ReportedContentProblems()
get_TextbookPublishers()
get_Contacts()
get_UserContactRoles()
get_Countries()
get_States()
get_Schools()
get_Currencies()
get_ReportedContents()
get_TranslationContents()
get_TranslationListContents()
get_Languages()
get_SchoolOwnedModulesLookups()
get_Users()
get_SharedModules()
get_Modules()
get_ContentLists()
get_InAppFeedbacks()
MergeTwoTranslations(keepTranslationID, discardTranslationID)
CreateRomanisationForDefinitions(romanisationData)
FindOrCreateDefinition(definitionData, creatorID, collation, contentType, creatorIsStudent)
UpdateModuleSharing(moduleID, userID, schoolID, newSharingLevel)
FindOrCreateTranslation(definitionData, baseLanguage, targetLanguage, creatorID, contentType)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_School()
set_School(value)
get_JoinCode()
set_JoinCode(value)
get_ClassUserLookups()
set_ClassUserLookups(value)
get_School1()
set_School1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ClassUserLookups(entity)
detach_ClassUserLookups(entity)
.cctor()
.ctor()
get_ClassID()
set_ClassID(value)
get_UserID()
set_UserID(value)
get_UserType()
set_UserType(value)
get_Class()
set_Class(value)
get_Role()
set_Role(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Description()
set_Description(value)
get_PrivilegesLevel()
set_PrivilegesLevel(value)
get_ClassUserLookups()
set_ClassUserLookups(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ClassUserLookups(entity)
detach_ClassUserLookups(entity)
.cctor()
.ctor()
get_LanguageID()
set_LanguageID(value)
get_ScriptID()
set_ScriptID(value)
get_Script()
set_Script(value)
get_Language()
set_Language(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_Description()
set_Description(value)
get_RequiresRomanisation()
set_RequiresRomanisation(value)
get_Collation()
set_Collation(value)
get_LanguageScriptLookups()
set_LanguageScriptLookups(value)
get_Definitions()
set_Definitions(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_LanguageScriptLookups(entity)
detach_LanguageScriptLookups(entity)
attach_Definitions(entity)
detach_Definitions(entity)
.cctor()
.ctor()
get_TranslationID()
set_TranslationID(value)
get_DefinitionID()
set_DefinitionID(value)
get_DisplayIndex()
set_DisplayIndex(value)
get_DisplayAsAnswer()
set_DisplayAsAnswer(value)
get_TypeCode()
set_TypeCode(value)
get_Definition()
set_Definition(value)
get_Translation()
set_Translation(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_FolderPath()
set_FolderPath(value)
get_FileName()
set_FileName(value)
get_Extension()
set_Extension(value)
get_FileExists()
set_FileExists(value)
get_DefinitionSoundFileLookups()
set_DefinitionSoundFileLookups(value)
get_SoundFileFolder()
set_SoundFileFolder(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_DefinitionSoundFileLookups(entity)
detach_DefinitionSoundFileLookups(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_FolderPath()
set_FolderPath(value)
get_Speaker()
set_Speaker(value)
get_WebFolderID()
set_WebFolderID(value)
get_SoundFiles()
set_SoundFiles(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_SoundFiles(entity)
detach_SoundFiles(entity)
.cctor()
.ctor()
get_Definition()
set_Definition(value)
get_SoundFile()
set_SoundFile(value)
get_SoundFile1()
set_SoundFile1(value)
get_Definition1()
set_Definition1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Language()
set_Language(value)
get_Text()
set_Text(value)
get_Comment()
set_Comment(value)
get_ScriptID()
set_ScriptID(value)
get_CreatorID()
set_CreatorID(value)
get_CreatedDate()
set_CreatedDate(value)
get_TranslationDefinitionLookups()
set_TranslationDefinitionLookups(value)
get_DefinitionSoundFileLookups()
set_DefinitionSoundFileLookups(value)
get_ReportedContentProblemDefinitions()
set_ReportedContentProblemDefinitions(value)
get_Script()
set_Script(value)
get_Language1()
set_Language1(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_TranslationDefinitionLookups(entity)
detach_TranslationDefinitionLookups(entity)
attach_DefinitionSoundFileLookups(entity)
detach_DefinitionSoundFileLookups(entity)
attach_ReportedContentProblemDefinitions(entity)
detach_ReportedContentProblemDefinitions(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_Comment()
set_Comment(value)
get_CreatorID()
set_CreatorID(value)
get_CreatedDate()
set_CreatedDate(value)
get_TranslationDefinitionLookups()
set_TranslationDefinitionLookups(value)
get_TranslationCompiledContent()
set_TranslationCompiledContent(value)
get_TranslationTags()
set_TranslationTags(value)
get_Content()
set_Content(value)
get_Language()
set_Language(value)
get_Language1()
set_Language1(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_TranslationDefinitionLookups(entity)
detach_TranslationDefinitionLookups(entity)
attach_TranslationTags(entity)
detach_TranslationTags(entity)
get_VisibleTargetLanguageDefinitionIDs()
get_VisibleBaseLanguageDefinitionIDs()
FindAllVisibleDefinitionsMatchingLanguage(language)
.cctor()
.ctor()
get_TranslationID()
set_TranslationID(value)
get_CompiledDefinitionsUpToDate()
set_CompiledDefinitionsUpToDate(value)
get_CompiledDefinitions()
set_CompiledDefinitions(value)
get_Translation()
set_Translation(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ModuleID()
set_ModuleID(value)
get_ListID()
set_ListID(value)
get_Folder()
set_Folder(value)
get_Module()
set_Module(value)
get_ContentList()
set_ContentList(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_TemplateID()
set_TemplateID(value)
get_ModuleID()
set_ModuleID(value)
get_Module()
set_Module(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_TranslationID()
set_TranslationID(value)
get_TagID()
set_TagID(value)
get_DateCreated()
set_DateCreated(value)
get_CreatorID()
set_CreatorID(value)
get_Translation()
set_Translation(value)
get_Tag()
set_Tag(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_CreatedDate()
set_CreatedDate(value)
get_LookupCode()
set_LookupCode(value)
get_MutexGroupCode()
set_MutexGroupCode(value)
get_MutexGroupWeighting()
set_MutexGroupWeighting(value)
get_TranslationTags()
set_TranslationTags(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_TranslationTags(entity)
detach_TranslationTags(entity)
GetContentTagForPrivilegesLevel(privilegesLevel)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Type()
set_Type(value)
get_Translation()
set_Translation(value)
get_ContentListContents()
set_ContentListContents(value)
get_Sentence()
set_Sentence(value)
get_ReportedContents()
set_ReportedContents(value)
get_ContentType()
set_ContentType(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ContentListContents(entity)
detach_ContentListContents(entity)
attach_ReportedContents(entity)
detach_ReportedContents(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_Description()
set_Description(value)
get_ContentLists()
set_ContentLists(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ContentLists(entity)
detach_ContentLists(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_Description()
set_Description(value)
get_Contents()
set_Contents(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Contents(entity)
detach_Contents(entity)
.cctor()
.ctor()
get_ListID()
set_ListID(value)
get_PrecompiledList()
set_PrecompiledList(value)
get_PrecompiledListUpToDate()
set_PrecompiledListUpToDate(value)
get_ContentList()
set_ContentList(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ListID()
set_ListID(value)
get_ContentID()
set_ContentID(value)
get_SortIndex()
set_SortIndex(value)
get_Content()
set_Content(value)
get_ContentList()
set_ContentList(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_StructureID()
set_StructureID(value)
get_Position()
set_Position(value)
get_ContentListID()
set_ContentListID(value)
get_SentenceStructure()
set_SentenceStructure(value)
get_ContentList()
set_ContentList(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
CreateFrom(newContent, creatorID)
get_UniqueKey()
UpdateFrom(newContent)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Creator()
set_Creator(value)
get_DateCreated()
set_DateCreated(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_BaseDescription()
set_BaseDescription(value)
get_TargetDescription()
set_TargetDescription(value)
get_SentenceStructures()
set_SentenceStructures(value)
get_Content()
set_Content(value)
get_Language()
set_Language(value)
get_Language1()
set_Language1(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_SentenceStructures(entity)
detach_SentenceStructures(entity)
CreateFrom(sentence, creatorID)
UpdateFrom(s)
.cctor()
.ctor()
get_TargetList()
set_TargetList(value)
get_ContributingList()
set_ContributingList(value)
get_ContentList()
set_ContentList(value)
get_ContentList1()
set_ContentList1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SentenceID()
set_SentenceID(value)
get_Language()
set_Language(value)
get_DisplayIndex()
set_DisplayIndex(value)
get_TemplateString()
set_TemplateString(value)
get_SentenceStructureContents()
set_SentenceStructureContents(value)
get_Sentence()
set_Sentence(value)
get_Language1()
set_Language1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_SentenceStructureContents(entity)
detach_SentenceStructureContents(entity)
get_UniqueKey()
CreateFrom(sentenceStructure, creatorID)
UpdateFrom(ss)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_FolderPath()
set_FolderPath(value)
get_FilePath()
set_FilePath(value)
get_MajorVersion()
set_MajorVersion(value)
get_MinorVersion()
set_MinorVersion(value)
get_BuildVersion()
set_BuildVersion(value)
get_ImageFolderPath()
set_ImageFolderPath(value)
get_ImageFilePath()
set_ImageFilePath(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_Environment()
set_Environment(value)
get_Modules()
set_Modules(value)
get_Language()
set_Language(value)
get_Language1()
set_Language1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Modules(entity)
detach_Modules(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Description()
set_Description(value)
get_SharedModules()
set_SharedModules(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_SharedModules(entity)
detach_SharedModules(entity)
.cctor()
.ctor()
get_SchoolID()
set_SchoolID(value)
get_ModuleID()
set_ModuleID(value)
get_School()
set_School(value)
get_Module()
set_Module(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_UserID()
set_UserID(value)
get_ModuleID()
set_ModuleID(value)
get_User()
set_User(value)
get_Module()
set_Module(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SchoolID()
set_SchoolID(value)
get_UserID()
set_UserID(value)
get_DateReceived()
set_DateReceived(value)
get_Phone1()
set_Phone1(value)
get_Phone2()
set_Phone2(value)
get_Phone3()
set_Phone3(value)
get_Date1()
set_Date1(value)
get_Date2()
set_Date2(value)
get_Date3()
set_Date3(value)
get_ContentRequirements()
set_ContentRequirements(value)
get_Declined()
set_Declined(value)
get_DeclinedReason()
set_DeclinedReason(value)
get_School()
set_School(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SchoolID()
set_SchoolID(value)
get_VerifyingUserID()
set_VerifyingUserID(value)
get_DateSubmitted()
set_DateSubmitted(value)
get_School()
set_School(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Description()
set_Description(value)
get_ProblemCategoryCode()
set_ProblemCategoryCode(value)
get_Sequence()
set_Sequence(value)
get_ReportedContentProblems()
set_ReportedContentProblems(value)
get_ProblemCategory()
set_ProblemCategory(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ReportedContentProblems(entity)
detach_ReportedContentProblems(entity)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Label()
set_Label(value)
get_Sequence()
set_Sequence(value)
get_ProblemTypes()
set_ProblemTypes(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ProblemTypes(entity)
detach_ProblemTypes(entity)
.cctor()
.ctor()
get_ReportedContentProblemID()
set_ReportedContentProblemID(value)
get_DefinitionID()
set_DefinitionID(value)
get_Definition()
set_Definition(value)
get_ReportedContentProblem()
set_ReportedContentProblem(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_ReportedContentID()
set_ReportedContentID(value)
get_ReportedDate()
set_ReportedDate(value)
get_ProblemTypeCode()
set_ProblemTypeCode(value)
get_LanguageID()
set_LanguageID(value)
get_ProblemText()
set_ProblemText(value)
get_ReportedContentProblemDefinitions()
set_ReportedContentProblemDefinitions(value)
get_ProblemType()
set_ProblemType(value)
get_ReportedContent()
set_ReportedContent(value)
get_Language()
set_Language(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ReportedContentProblemDefinitions(entity)
detach_ReportedContentProblemDefinitions(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_LogoImageUrl()
set_LogoImageUrl(value)
get_HomepageUrl()
set_HomepageUrl(value)
get_SharedModules()
set_SharedModules(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_SharedModules(entity)
detach_SharedModules(entity)
.cctor()
.ctor()
get_UserID()
set_UserID(value)
get_JobTitle()
set_JobTitle(value)
get_SecondaryEmail()
set_SecondaryEmail(value)
get_Notes()
set_Notes(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_UserID()
set_UserID(value)
get_ContactRoleID()
set_ContactRoleID(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_Abbreviation()
set_Abbreviation(value)
get_SmallFlagURL()
set_SmallFlagURL(value)
get_CurrencyID()
set_CurrencyID(value)
get_PhonePrefix()
set_PhonePrefix(value)
get_DefaultDataSetGroupID()
set_DefaultDataSetGroupID(value)
get_States()
set_States(value)
get_Schools()
set_Schools(value)
get_Currency()
set_Currency(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_States(entity)
detach_States(entity)
attach_Schools(entity)
detach_Schools(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_CountryID()
set_CountryID(value)
get_Name()
set_Name(value)
get_Abbreviation()
set_Abbreviation(value)
get_PhonePrefix()
set_PhonePrefix(value)
get_Schools()
set_Schools(value)
get_Country()
set_Country(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Schools(entity)
detach_Schools(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_Code()
set_Code(value)
get_Country()
set_Country(value)
get_State()
set_State(value)
get_City()
set_City(value)
get_Suburb()
set_Suburb(value)
get_Address1()
set_Address1(value)
get_Address2()
set_Address2(value)
get_Postcode()
set_Postcode(value)
get_Phone()
set_Phone(value)
get_PrincipalsName()
set_PrincipalsName(value)
get_NumberOfStudents()
set_NumberOfStudents(value)
get_WeightDivisionID()
set_WeightDivisionID(value)
get_StateID()
set_StateID(value)
get_PostalAddress1()
set_PostalAddress1(value)
get_PostalAddress2()
set_PostalAddress2(value)
get_PostalSuburb()
set_PostalSuburb(value)
get_PostalCity()
set_PostalCity(value)
get_PostalPostcode()
set_PostalPostcode(value)
get_PostalCareOf()
set_PostalCareOf(value)
get_CasualName()
set_CasualName(value)
get_UsernameTemplate()
set_UsernameTemplate(value)
get_Classes()
set_Classes(value)
get_SchoolTemplateModuleLookups()
set_SchoolTemplateModuleLookups(value)
get_Followups()
set_Followups(value)
get_AddressVerifications()
set_AddressVerifications(value)
get_SchoolOwnedModulesLookups()
set_SchoolOwnedModulesLookups(value)
get_SharedModules()
set_SharedModules(value)
get_Modules()
set_Modules(value)
get_Country1()
set_Country1(value)
get_State1()
set_State1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Classes(entity)
detach_Classes(entity)
attach_SchoolTemplateModuleLookups(entity)
detach_SchoolTemplateModuleLookups(entity)
attach_Followups(entity)
detach_Followups(entity)
attach_AddressVerifications(entity)
detach_AddressVerifications(entity)
attach_SchoolOwnedModulesLookups(entity)
detach_SchoolOwnedModulesLookups(entity)
attach_SharedModules(entity)
detach_SharedModules(entity)
attach_Modules(entity)
detach_Modules(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Symbol()
set_Symbol(value)
get_Description()
set_Description(value)
get_Countries()
set_Countries(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Countries(entity)
detach_Countries(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_ContentID()
set_ContentID(value)
get_ReporterUserID()
set_ReporterUserID(value)
get_Resolved()
set_Resolved(value)
get_ReportedContentProblems()
set_ReportedContentProblems(value)
get_Content()
set_Content(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ReportedContentProblems(entity)
detach_ReportedContentProblems(entity)
.cctor()
.ctor()
get_TranslationID()
set_TranslationID(value)
get_DisplayIndex()
set_DisplayIndex(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_DefinitionID()
set_DefinitionID(value)
get_Language()
set_Language(value)
get_Text()
set_Text(value)
get_Comment()
set_Comment(value)
get_SoundFileURL()
set_SoundFileURL(value)
get_Romanisation()
set_Romanisation(value)
get_CreatorID()
set_CreatorID(value)
get_DisplayAsAnswer()
set_DisplayAsAnswer(value)
get_SoundFileID()
set_SoundFileID(value)
get_Speaker()
set_Speaker(value)
get_IsHumanVoice()
set_IsHumanVoice(value)
get_TypeCode()
set_TypeCode(value)
.ctor()
get_ListID()
set_ListID(value)
get_Description()
set_Description(value)
get_Title()
set_Title(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_TranslationID()
set_TranslationID(value)
get_DefinitionID()
set_DefinitionID(value)
get_Text()
set_Text(value)
get_Comment()
set_Comment(value)
get_Language()
set_Language(value)
get_DisplayAsAnswer()
set_DisplayAsAnswer(value)
get_DisplayIndex()
set_DisplayIndex(value)
get_SoundFileURL()
set_SoundFileURL(value)
get_Romanisation()
set_Romanisation(value)
get_CreatorID()
set_CreatorID(value)
get_SoundFileID()
set_SoundFileID(value)
get_Speaker()
set_Speaker(value)
get_IsHumanVoice()
set_IsHumanVoice(value)
get_TypeCode()
set_TypeCode(value)
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_Abbreviation()
set_Abbreviation(value)
get_EP()
set_EP(value)
get_Scoreboard()
set_Scoreboard(value)
get_Department()
set_Department(value)
get_LanguageScriptLookups()
set_LanguageScriptLookups(value)
get_Definitions()
set_Definitions(value)
get_Translations()
set_Translations(value)
get_Translations1()
set_Translations1(value)
get_Sentences()
set_Sentences(value)
get_Sentences1()
set_Sentences1(value)
get_SentenceStructures()
set_SentenceStructures(value)
get_LPApps()
set_LPApps(value)
get_LPApps1()
set_LPApps1(value)
get_ReportedContentProblems()
set_ReportedContentProblems(value)
get_Modules()
set_Modules(value)
get_Modules1()
set_Modules1(value)
get_ContentLists()
set_ContentLists(value)
get_ContentLists1()
set_ContentLists1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_LanguageScriptLookups(entity)
detach_LanguageScriptLookups(entity)
attach_Definitions(entity)
detach_Definitions(entity)
attach_Translations(entity)
detach_Translations(entity)
attach_Translations1(entity)
detach_Translations1(entity)
attach_Sentences(entity)
detach_Sentences(entity)
attach_Sentences1(entity)
detach_Sentences1(entity)
attach_SentenceStructures(entity)
detach_SentenceStructures(entity)
attach_LPApps(entity)
detach_LPApps(entity)
attach_LPApps1(entity)
detach_LPApps1(entity)
attach_ReportedContentProblems(entity)
detach_ReportedContentProblems(entity)
attach_Modules(entity)
detach_Modules(entity)
attach_Modules1(entity)
detach_Modules1(entity)
attach_ContentLists(entity)
detach_ContentLists(entity)
attach_ContentLists1(entity)
detach_ContentLists1(entity)
.cctor()
.ctor()
get_SchoolID()
set_SchoolID(value)
get_ModuleID()
set_ModuleID(value)
get_School()
set_School(value)
get_Module()
set_Module(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_FirstName()
set_FirstName(value)
get_Surname()
set_Surname(value)
get_Title()
set_Title(value)
get_DefaultEmail()
set_DefaultEmail(value)
get_Gender()
set_Gender(value)
get_DateCreated()
set_DateCreated(value)
get_Username()
set_Username(value)
get_Password()
set_Password(value)
get_AcceptedEndUserAgreement()
set_AcceptedEndUserAgreement(value)
get_DateOfEUAAcceptance()
set_DateOfEUAAcceptance(value)
get_FacebookID()
set_FacebookID(value)
get_SelectedBaseLanguageID()
set_SelectedBaseLanguageID(value)
get_PasswordKind()
set_PasswordKind(value)
get_PermissionTemplateID()
set_PermissionTemplateID(value)
get_StudentID()
set_StudentID(value)
get_EmailVerified()
set_EmailVerified(value)
get_EnforcePasswordPolicy()
set_EnforcePasswordPolicy(value)
get_ParentEmailAddress()
set_ParentEmailAddress(value)
get_ClassUserLookups()
set_ClassUserLookups(value)
get_Definitions()
set_Definitions(value)
get_Translations()
set_Translations(value)
get_TranslationTags()
set_TranslationTags(value)
get_Sentences()
set_Sentences(value)
get_UserModuleLookups()
set_UserModuleLookups(value)
get_Followups()
set_Followups(value)
get_Contact()
set_Contact(value)
get_UserContactRoles()
set_UserContactRoles(value)
get_ReportedContents()
set_ReportedContents(value)
get_SharedModules()
set_SharedModules(value)
get_Modules()
set_Modules(value)
get_ContentLists()
set_ContentLists(value)
get_InAppFeedbacks()
set_InAppFeedbacks(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ClassUserLookups(entity)
detach_ClassUserLookups(entity)
attach_Definitions(entity)
detach_Definitions(entity)
attach_Translations(entity)
detach_Translations(entity)
attach_TranslationTags(entity)
detach_TranslationTags(entity)
attach_Sentences(entity)
detach_Sentences(entity)
attach_UserModuleLookups(entity)
detach_UserModuleLookups(entity)
attach_Followups(entity)
detach_Followups(entity)
attach_UserContactRoles(entity)
detach_UserContactRoles(entity)
attach_ReportedContents(entity)
detach_ReportedContents(entity)
attach_SharedModules(entity)
detach_SharedModules(entity)
attach_Modules(entity)
detach_Modules(entity)
attach_ContentLists(entity)
detach_ContentLists(entity)
attach_InAppFeedbacks(entity)
detach_InAppFeedbacks(entity)
.cctor()
.ctor()
get_ModuleID()
set_ModuleID(value)
get_SchoolID()
set_SchoolID(value)
get_CreatorID()
set_CreatorID(value)
get_TypeID()
set_TypeID(value)
get_DateShared()
set_DateShared(value)
get_DateLastUpdated()
set_DateLastUpdated(value)
get_RankingOrder()
set_RankingOrder(value)
get_NavigateUrl()
set_NavigateUrl(value)
get_ImageUrl()
set_ImageUrl(value)
get_TextbookPublisherID()
set_TextbookPublisherID(value)
get_School()
set_School(value)
get_SharedModuleType()
set_SharedModuleType(value)
get_TextbookPublisher()
set_TextbookPublisher(value)
get_User()
set_User(value)
get_Module()
set_Module(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Title()
set_Title(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_Creator()
set_Creator(value)
get_AppID()
set_AppID(value)
get_CoreTranslationList()
set_CoreTranslationList(value)
get_Sharing()
set_Sharing(value)
get_DateCreated()
set_DateCreated(value)
get_DateModified()
set_DateModified(value)
get_Ancestor()
set_Ancestor(value)
get_SelectedEnvironment()
set_SelectedEnvironment(value)
get_CascadeSourceModuleChanges()
set_CascadeSourceModuleChanges(value)
get_SchoolOwner()
set_SchoolOwner(value)
get_VisibleToStudents()
set_VisibleToStudents(value)
get_Description()
set_Description(value)
get_ModuleContentLists()
set_ModuleContentLists(value)
get_ContentTemplateModuleLookups()
set_ContentTemplateModuleLookups(value)
get_SchoolTemplateModuleLookups()
set_SchoolTemplateModuleLookups(value)
get_UserModuleLookups()
set_UserModuleLookups(value)
get_SchoolOwnedModulesLookups()
set_SchoolOwnedModulesLookups(value)
get_SharedModule()
set_SharedModule(value)
get_InAppFeedbacks()
set_InAppFeedbacks(value)
get_Language()
set_Language(value)
get_Language1()
set_Language1(value)
get_LPApp()
set_LPApp(value)
get_School()
set_School(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ModuleContentLists(entity)
detach_ModuleContentLists(entity)
attach_ContentTemplateModuleLookups(entity)
detach_ContentTemplateModuleLookups(entity)
attach_SchoolTemplateModuleLookups(entity)
detach_SchoolTemplateModuleLookups(entity)
attach_UserModuleLookups(entity)
detach_UserModuleLookups(entity)
attach_SchoolOwnedModulesLookups(entity)
detach_SchoolOwnedModulesLookups(entity)
attach_InAppFeedbacks(entity)
detach_InAppFeedbacks(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Title()
set_Title(value)
get_Description()
set_Description(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_Purpose()
set_Purpose(value)
get_Creator()
set_Creator(value)
get_DateCreated()
set_DateCreated(value)
get_Parent()
set_Parent(value)
get_BaseParent()
set_BaseParent(value)
get_Sharing()
set_Sharing(value)
get_Structure()
set_Structure(value)
get_DateLastUpdated()
set_DateLastUpdated(value)
get_DateTagsLastUpdated()
set_DateTagsLastUpdated(value)
get_SchoolOwner()
set_SchoolOwner(value)
get_VisibleToStudents()
set_VisibleToStudents(value)
get_Ancestor()
set_Ancestor(value)
get_ModuleContentLists()
set_ModuleContentLists(value)
get_ContentListCompiledContent()
set_ContentListCompiledContent(value)
get_ContentListContents()
set_ContentListContents(value)
get_SentenceStructureContents()
set_SentenceStructureContents(value)
get_ContentListContributors()
set_ContentListContributors(value)
get_ContentListContributors1()
set_ContentListContributors1(value)
get_ContentLists()
set_ContentLists(value)
get_Language()
set_Language(value)
get_Language1()
set_Language1(value)
get_ContentListPurpose()
set_ContentListPurpose(value)
get_ContentList1()
set_ContentList1(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ModuleContentLists(entity)
detach_ModuleContentLists(entity)
attach_ContentListContents(entity)
detach_ContentListContents(entity)
attach_SentenceStructureContents(entity)
detach_SentenceStructureContents(entity)
attach_ContentListContributors(entity)
detach_ContentListContributors(entity)
attach_ContentListContributors1(entity)
detach_ContentListContributors1(entity)
attach_ContentLists(entity)
detach_ContentLists(entity)
get_ParentList()
.cctor()
.ctor()
get_ID()
set_ID(value)
get_UserID()
set_UserID(value)
get_DateSubmitted()
set_DateSubmitted(value)
get_Comment()
set_Comment(value)
get_ModuleID()
set_ModuleID(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetSubject()
set_TargetSubject(value)
get_ClassID()
set_ClassID(value)
get_Email()
set_Email(value)
get_Context()
set_Context(value)
get_Archived()
set_Archived(value)
get_Rating()
set_Rating(value)
get_Suggestion()
set_Suggestion(value)
get_SuggestedRating()
set_SuggestedRating(value)
get_Module()
set_Module(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_CreationID()
set_CreationID(value)
get_DefinitionID()
set_DefinitionID(value)
get_NewDefinition()
set_NewDefinition(value)
.ctor()
get_TranslationID()
set_TranslationID(value)
.ctor()
.ctor(connection)
.ctor(connection)
.ctor(connection, mappingSource)
.ctor(connection, mappingSource)
get_DisplayedSchoolLanguageScores()
get_DisplayedSchoolOverallScores()
get_DisplayedSchoolWeightedLanguageScores()
get_DisplayedSchoolWeightedScores()
.cctor()
.ctor()
get_DataSet()
set_DataSet(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_SchoolID()
set_SchoolID(value)
get_Score()
set_Score(value)
get_Ranking()
set_Ranking(value)
get_QPS()
set_QPS(value)
get_QPSRanking()
set_QPSRanking(value)
get_Students()
set_Students(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_DataSet()
set_DataSet(value)
get_SchoolID()
set_SchoolID(value)
get_Score()
set_Score(value)
get_Ranking()
set_Ranking(value)
get_QPS()
set_QPS(value)
get_QPSRanking()
set_QPSRanking(value)
get_Students()
set_Students(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_DataSet()
set_DataSet(value)
get_BaseLanguage()
set_BaseLanguage(value)
get_TargetLanguage()
set_TargetLanguage(value)
get_WeightDivisionID()
set_WeightDivisionID(value)
get_SchoolID()
set_SchoolID(value)
get_Score()
set_Score(value)
get_Ranking()
set_Ranking(value)
get_QPS()
set_QPS(value)
get_QPSRanking()
set_QPSRanking(value)
get_Students()
set_Students(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_DataSet()
set_DataSet(value)
get_WeightDivisionID()
set_WeightDivisionID(value)
get_SchoolID()
set_SchoolID(value)
get_Score()
set_Score(value)
get_Ranking()
set_Ranking(value)
get_QPS()
set_QPS(value)
get_QPSRanking()
set_QPSRanking(value)
get_Students()
set_Students(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
.ctor(connection)
.ctor(connection)
.ctor(connection, mappingSource)
.ctor(connection, mappingSource)
get_SQLEmailTasks()
get_TaskTypes()
get_SQLTasks()
get_TaskHistories()
get_Tasks()
get_TaskSchedules()
get_TaskStatusOptions()
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SQL()
set_SQL(value)
get_XSL()
set_XSL(value)
get_Sender()
set_Sender(value)
get_RecipientEmailColumn()
set_RecipientEmailColumn(value)
get_EmailBodyColumn()
set_EmailBodyColumn(value)
get_isEmailBodyHTML()
set_isEmailBodyHTML(value)
get_CCEmailAddress()
set_CCEmailAddress(value)
get_SenderEmailColumn()
set_SenderEmailColumn(value)
get_Task()
set_Task(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
ConvertToBusinessObject()
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_StorageTable()
set_StorageTable(value)
get_Tasks()
set_Tasks(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Tasks(entity)
detach_Tasks(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SQL()
set_SQL(value)
get_Task()
set_Task(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_ScheduleID()
set_ScheduleID(value)
get_Status()
set_Status(value)
get_DateStarted()
set_DateStarted(value)
get_DateLastUpdated()
set_DateLastUpdated(value)
get_DateCompleted()
set_DateCompleted(value)
get_FaultDetails()
set_FaultDetails(value)
get_TaskStatusOption()
set_TaskStatusOption(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_TaskType()
set_TaskType(value)
get_Name()
set_Name(value)
get_Description()
set_Description(value)
get_SQLEmailTask()
set_SQLEmailTask(value)
get_SQLTask()
set_SQLTask(value)
get_TaskSchedules()
set_TaskSchedules(value)
get_TaskType1()
set_TaskType1(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_TaskSchedules(entity)
detach_TaskSchedules(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_TaskID()
set_TaskID(value)
get_Frequency()
set_Frequency(value)
get_StartDate()
set_StartDate(value)
get_EndDate()
set_EndDate(value)
get_Timeout()
set_Timeout(value)
get_Enabled()
set_Enabled(value)
get_NextTime()
set_NextTime(value)
get_LastTime()
set_LastTime(value)
get_Task()
set_Task(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_TaskHistories()
set_TaskHistories(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_TaskHistories(entity)
detach_TaskHistories(entity)
.cctor()
ToGenerationInfo()
.ctor()
get_ID()
set_ID(value)
get_ReportDefinitionID()
set_ReportDefinitionID(value)
get_ParameterKey()
set_ParameterKey(value)
get_OutputTableName()
set_OutputTableName(value)
get_RunDate()
set_RunDate(value)
get_RunBy()
set_RunBy(value)
get_StatusCode()
set_StatusCode(value)
get_GenerationDate()
set_GenerationDate(value)
get_RecordCount()
set_RecordCount(value)
get_GenerationStatus()
set_GenerationStatus(value)
get_ReportDefinition()
set_ReportDefinition(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
.ctor(connection)
.ctor(connection)
.ctor(connection, mappingSource)
.ctor(connection, mappingSource)
get_GeneratedReports()
get_ReportTypes()
get_GenerationStatus()
get_ReportDefinitions()
get_ReportGroups()
get_ReportParameters()
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Name()
set_Name(value)
get_ReportDefinitions()
set_ReportDefinitions(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ReportDefinitions(entity)
detach_ReportDefinitions(entity)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Description()
set_Description(value)
get_GeneratedReports()
set_GeneratedReports(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_GeneratedReports(entity)
detach_GeneratedReports(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Title()
set_Title(value)
get_Description()
set_Description(value)
get_GroupID()
set_GroupID(value)
get_TypeCode()
set_TypeCode(value)
get_SQLCommandTypeCode()
set_SQLCommandTypeCode(value)
get_SQLCommandText()
set_SQLCommandText(value)
get_GeneratedReports()
set_GeneratedReports(value)
get_ReportParameters()
set_ReportParameters(value)
get_ReportType()
set_ReportType(value)
get_ReportGroup()
set_ReportGroup(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_GeneratedReports(entity)
detach_GeneratedReports(entity)
attach_ReportParameters(entity)
detach_ReportParameters(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_PermissionCode()
set_PermissionCode(value)
get_ReportDefinitions()
set_ReportDefinitions(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ReportDefinitions(entity)
detach_ReportDefinitions(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_ReportDefinitionID()
set_ReportDefinitionID(value)
get_Name()
set_Name(value)
get_DataTypeCode()
set_DataTypeCode(value)
get_Sequence()
set_Sequence(value)
get_Value()
set_Value(value)
get_ReportDefinition()
set_ReportDefinition(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
SetValue(newValue)
.ctor()
get_ID()
set_ID(value)
get_SchoolID()
set_SchoolID(value)
get_AttributeCode()
set_AttributeCode(value)
get_Sequence()
set_Sequence(value)
get_Value()
set_Value(value)
get_MemoValue()
set_MemoValue(value)
get_CreatedBy()
set_CreatedBy(value)
get_CreatedDate()
set_CreatedDate(value)
get_ModifiedBy()
set_ModifiedBy(value)
get_ModifiedDate()
set_ModifiedDate(value)
get_ConcurrencyTimestamp()
set_ConcurrencyTimestamp(value)
get_Attribute()
set_Attribute(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
.ctor(connection)
.ctor(connection)
.ctor(connection, mappingSource)
.ctor(connection, mappingSource)
get_CommentAreas()
get_CommentContactsLookups()
get_ClassUserLookups()
get_DataTypes()
get_AttributeCategories()
get_SchoolAttributeValues()
get_ItemPrices()
get_Items()
get_Periods()
get_RevenueDetailTypes()
get_RevenueDetailsLinesViews()
get_SchoolPeriods()
get_Attributes()
get_AttributeListOptions()
get_Users()
get_Currencies()
get_Comments()
get_CommentsViews()
get_RevenueDetails()
get_RevenueLogs()
get_NextActions()
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Description()
set_Description(value)
get_Comments()
set_Comments(value)
get_NextActions()
set_NextActions(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Comments(entity)
detach_Comments(entity)
attach_NextActions(entity)
detach_NextActions(entity)
.cctor()
.ctor()
get_CommentID()
set_CommentID(value)
get_UserID()
set_UserID(value)
get_User()
set_User(value)
get_Comment()
set_Comment(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ClassID()
set_ClassID(value)
get_UserID()
set_UserID(value)
get_UserType()
set_UserType(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Description()
set_Description(value)
get_DotNetDataType()
set_DotNetDataType(value)
get_Attributes()
set_Attributes(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Attributes(entity)
detach_Attributes(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_Sequence()
set_Sequence(value)
get_SystemManaged()
set_SystemManaged(value)
get_Archived()
set_Archived(value)
get_CreatedBy()
set_CreatedBy(value)
get_CreatedDate()
set_CreatedDate(value)
get_Attributes()
set_Attributes(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_Attributes(entity)
detach_Attributes(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_ItemCode()
set_ItemCode(value)
get_CurrencyID()
set_CurrencyID(value)
get_StartDate()
set_StartDate(value)
get_EndDate()
set_EndDate(value)
get_Price()
set_Price(value)
get_Item()
set_Item(value)
get_Currency()
set_Currency(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Name()
set_Name(value)
get_RevenueTypeCode()
set_RevenueTypeCode(value)
get_ItemPrices()
set_ItemPrices(value)
get_RevenueDetails()
set_RevenueDetails(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ItemPrices(entity)
detach_ItemPrices(entity)
attach_RevenueDetails(entity)
detach_RevenueDetails(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Name()
set_Name(value)
get_PeriodNumber()
set_PeriodNumber(value)
get_StartDate()
set_StartDate(value)
get_EndDate()
set_EndDate(value)
get_DefaultSelfConfirmationStartDate()
set_DefaultSelfConfirmationStartDate(value)
get_DefaultSelfConfirmationEndDate()
set_DefaultSelfConfirmationEndDate(value)
get_SchoolPeriods()
set_SchoolPeriods(value)
get_RevenueLogs()
set_RevenueLogs(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_SchoolPeriods(entity)
detach_SchoolPeriods(entity)
attach_RevenueLogs(entity)
detach_RevenueLogs(entity)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_Description()
set_Description(value)
get_RevenueDetails()
set_RevenueDetails(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_RevenueDetails(entity)
detach_RevenueDetails(entity)
.cctor()
.ctor()
get_SchoolID()
set_SchoolID(value)
get_PeriodID()
set_PeriodID(value)
get_PeriodNumber()
set_PeriodNumber(value)
get_PeriodName()
set_PeriodName(value)
get_BasePrice()
set_BasePrice(value)
get_Price()
set_Price(value)
get_Quantity()
set_Quantity(value)
get_TypeCode()
set_TypeCode(value)
get_CurrencySymbol()
set_CurrencySymbol(value)
.ctor()
get_SchoolID()
set_SchoolID(value)
get_PeriodID()
set_PeriodID(value)
get_BasePrice()
set_BasePrice(value)
get_CurrencyID()
set_CurrencyID(value)
get_ActualTotal()
set_ActualTotal(value)
get_ProjectedTotal()
set_ProjectedTotal(value)
get_ConcurrencyTimestamp()
set_ConcurrencyTimestamp(value)
get_CreatedBy()
set_CreatedBy(value)
get_CreatedDate()
set_CreatedDate(value)
get_ModifiedBy()
set_ModifiedBy(value)
get_ModifiedDate()
set_ModifiedDate(value)
get_LikelyTotal()
set_LikelyTotal(value)
get_RevenueDetails()
set_RevenueDetails(value)
get_Period()
set_Period(value)
get_Currency()
set_Currency(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_RevenueDetails(entity)
detach_RevenueDetails(entity)
.cctor()
.ctor()
get_Code()
set_Code(value)
get_DataTypeCode()
set_DataTypeCode(value)
get_CategoryID()
set_CategoryID(value)
get_Name()
set_Name(value)
get_Description()
set_Description(value)
get_Sequence()
set_Sequence(value)
get_Archived()
set_Archived(value)
get_CreatedBy()
set_CreatedBy(value)
get_CreatedDate()
set_CreatedDate(value)
get_ListCode()
set_ListCode(value)
get_SchoolAttributeValues()
set_SchoolAttributeValues(value)
get_AttributeCategory()
set_AttributeCategory(value)
get_DataType()
set_DataType(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_SchoolAttributeValues(entity)
detach_SchoolAttributeValues(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_ListCode()
set_ListCode(value)
get_OptionText()
set_OptionText(value)
get_Sequence()
set_Sequence(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_FirstName()
set_FirstName(value)
get_Surname()
set_Surname(value)
get_Title()
set_Title(value)
get_DefaultEmail()
set_DefaultEmail(value)
get_Gender()
set_Gender(value)
get_DateCreated()
set_DateCreated(value)
get_Username()
set_Username(value)
get_Password()
set_Password(value)
get_AcceptedEndUserAgreement()
set_AcceptedEndUserAgreement(value)
get_DateOfEUAAcceptance()
set_DateOfEUAAcceptance(value)
get_FacebookID()
set_FacebookID(value)
get_SelectedBaseLanguageID()
set_SelectedBaseLanguageID(value)
get_PasswordKind()
set_PasswordKind(value)
get_CommentContactsLookups()
set_CommentContactsLookups(value)
get_ClassUserLookups()
set_ClassUserLookups(value)
get_Comments()
set_Comments(value)
get_NextActions()
set_NextActions(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_CommentContactsLookups(entity)
detach_CommentContactsLookups(entity)
attach_ClassUserLookups(entity)
detach_ClassUserLookups(entity)
attach_Comments(entity)
detach_Comments(entity)
attach_NextActions(entity)
detach_NextActions(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_Symbol()
set_Symbol(value)
get_Description()
set_Description(value)
get_ApproxExchangeRate()
set_ApproxExchangeRate(value)
get_TaxPercent()
set_TaxPercent(value)
get_ItemPrices()
set_ItemPrices(value)
get_SchoolPeriods()
set_SchoolPeriods(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_ItemPrices(entity)
detach_ItemPrices(entity)
attach_SchoolPeriods(entity)
detach_SchoolPeriods(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SchoolID()
set_SchoolID(value)
get_LogDate()
set_LogDate(value)
get_AuthorUserID()
set_AuthorUserID(value)
get_CommentAreaID()
set_CommentAreaID(value)
get_Text()
set_Text(value)
get_OtherContactName()
set_OtherContactName(value)
get_Starred()
set_Starred(value)
get_CreatedBy()
set_CreatedBy(value)
get_CreatedDate()
set_CreatedDate(value)
get_ModifiedBy()
set_ModifiedBy(value)
get_ModifiedDate()
set_ModifiedDate(value)
get_ExpiryDate()
set_ExpiryDate(value)
get_DepartmentRoleID()
set_DepartmentRoleID(value)
get_TeacherVisible()
set_TeacherVisible(value)
get_CommentContactsLookups()
set_CommentContactsLookups(value)
get_CommentArea()
set_CommentArea(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
attach_CommentContactsLookups(entity)
detach_CommentContactsLookups(entity)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SchoolID()
set_SchoolID(value)
get_LogDate()
set_LogDate(value)
get_ModifiedDate()
set_ModifiedDate(value)
get_CommentAreaID()
set_CommentAreaID(value)
get_Text()
set_Text(value)
get_OtherContactName()
set_OtherContactName(value)
get_ContactUserID()
set_ContactUserID(value)
get_AuthorUserID()
set_AuthorUserID(value)
get_AuthorName()
set_AuthorName(value)
get_CommentAreaName()
set_CommentAreaName(value)
get_CreatedDate()
set_CreatedDate(value)
get_Starred()
set_Starred(value)
get_DepartmentRoleID()
set_DepartmentRoleID(value)
get_DepartmentName()
set_DepartmentName(value)
get_TeacherVisible()
set_TeacherVisible(value)
.ctor()
get_ID()
set_ID(value)
get_SchoolID()
set_SchoolID(value)
get_PeriodID()
set_PeriodID(value)
get_ItemCode()
set_ItemCode(value)
get_Price()
set_Price(value)
get_Quantity()
set_Quantity(value)
get_TypeCode()
set_TypeCode(value)
get_CreatedBy()
set_CreatedBy(value)
get_CreatedDate()
set_CreatedDate(value)
get_ModifiedBy()
set_ModifiedBy(value)
get_ModifiedDate()
set_ModifiedDate(value)
get_LikelihoodPercent()
set_LikelihoodPercent(value)
get_Note()
set_Note(value)
get_DepartmentID()
set_DepartmentID(value)
get_CreditedTo()
set_CreditedTo(value)
get_SaleKind()
set_SaleKind(value)
get_Item()
set_Item(value)
get_RevenueDetailType()
set_RevenueDetailType(value)
get_SchoolPeriod()
set_SchoolPeriod(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
get_ExtendedPrice()
get_ExpectedPrice()
.cctor()
.ctor()
get_ID()
set_ID(value)
get_AuditDateTime()
set_AuditDateTime(value)
get_AuditUserID()
set_AuditUserID(value)
get_SchoolID()
set_SchoolID(value)
get_PeriodID()
set_PeriodID(value)
get_ActualDelta()
set_ActualDelta(value)
get_ProjectedDelta()
set_ProjectedDelta(value)
get_ActualDeltaNZD()
set_ActualDeltaNZD(value)
get_ProjectedDeltaNZD()
set_ProjectedDeltaNZD(value)
get_Description()
set_Description(value)
get_LikelyDelta()
set_LikelyDelta(value)
get_LikelyDeltaNZD()
set_LikelyDeltaNZD(value)
get_Period()
set_Period(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
.ctor()
get_ID()
set_ID(value)
get_SchoolID()
set_SchoolID(value)
get_AreaID()
set_AreaID(value)
get_DepartmentRoleID()
set_DepartmentRoleID(value)
get_Priority()
set_Priority(value)
get_NextActionDate()
set_NextActionDate(value)
get_CreatedBy()
set_CreatedBy(value)
get_CreatedDate()
set_CreatedDate(value)
get_ModifiedBy()
set_ModifiedBy(value)
get_ModifiedDate()
set_ModifiedDate(value)
get_ConcurrencyTimestamp()
set_ConcurrencyTimestamp(value)
get_LeadOwnerID()
set_LeadOwnerID(value)
get_CommentArea()
set_CommentArea(value)
get_User()
set_User(value)
add_PropertyChanging(value)
remove_PropertyChanging(value)
add_PropertyChanged(value)
remove_PropertyChanged(value)
SendPropertyChanging()
SendPropertyChanged(propertyName)
.cctor()
CreateListOfIntDataTable(ids)
.ctor()
.ctor()
SetInt32OrNull(record, columnIndex, value)
SetInt64OrNull(record, columnIndex, value)
SetInt16OrNull(record, columnIndex, value)
SetStringOrNull(record, columnIndex, value)
SetDateTimeOrNull(record, columnIndex, value)
SetGuidOrNull(record, columnIndex, value)
.ctor()
GetDatabaseDateTime()
GetDatabaseDateTime(conn)
EscapeLikeClause(clause)
.ctor()
get_RunDateParsed()
.ctor()
get_PercentUsed()
get_PercentRemaining()
.ctor()
IdentifyFailedSQLAgentTasks(windowInMinutes)
GetFailedSQLAgentJobHistory(windowInMinutes)
SendAlertForFailedSQLAgentSteps(failedSteps)
CheckAllSQLServerDatabaseDiskSpace()
CheckSQLServerDiskSpace(targetDB)
StoreSQLDiskSpaceMetrics(diskSpace)
SendAlertForLowSQLServerDiskSpace(diskSpace)
.ctor()
.cctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
.ctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
GetHashCode(item)
Equals(pair1, pair2)
.ctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values, testID)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values, storeOrdering)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
.ctor(item1, item2)
GetHashCode(item)
Equals(pair1, pair2)
.ctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
.ctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor(parameterName, values, storeOrdering)
GenerateDBRecords()
.ctor(parameterName, values)
GenerateDBRecords()
.ctor()
.ctor(lists)
Dapper.SqlMapper.IDynamicParameters.AddParameters(command, identity)
.ctor(dataType, parameterName)
Dapper.SqlMapper.IDynamicParameters.AddParameters(command, identity)
GenerateDBRecords()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(userID, commentAreaID)
.ctor()
CleanData()
set_ConcurrencyTimestampBytes(value)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(attributeCode, newValues, oldValues)
get_OldHasSingle()
get_NewHasSingle()
get_HasOneOrMoreOldValues()
get_NewValue()
get_OldRecord()
get_AttributeCodes()
.ctor(schoolID, changeSet, db)
GetEnumerator()
System.Collections.IEnumerable.GetEnumerator()
CreateEnumerator()
SequenceNewValues(newValuesForCode)
.ctor()
.ctor()
.ctor()
.ctor()
ToAttributeValue(schoolID, sequenceNumber, now, creatorID)
.ctor()
.ctor()
AddContactUserID(userID)
ParseSpreadsheet(fileName)
StoreProcessingResults(fileName, successfulForms, failedForms)
PopulateOutcomeWorksheet(worksheet, formAndMessage, includeFailureReason)
ProcessConferenceForm(session, form)
UpdateContactRolesForUser(userID, codes)
UpdateContactInfoForUser(userID, jobTitle, conferenceCode)
DoesSchoolAlreadyContainPhoneNumber(school, phoneNumber)
ConvertPhoneNumberToRegexPattern(input)
AddPhoneNumberToSchool(schoolID, phoneNumber, firstName, surname)
.ctor()
RemoveDepartmentFromSchool(session, schoolID, departmentID)
.ctor()
.ctor(sessionID)
ClearCache()
.ctor(sessionID)
StoreNextAction(schoolID, nextAction)
SLOChangePermitted(userID, newData, existingData)
DeleteNextAction(schoolID, nextActionID, concurrencyTimestamp)
GetNextActionsForSchool(schoolID)
CreateIntegerValue(attributeCode, value)
CreateDateValue(attributeCode, dateValue)
CreateStringValue(attributeCode, value)
CreateBooleanValue(attributeCode, value)
.ctor(sessionID)
ClearCache()
GetReferenceData()
LoadAreasFromDatabase()
LoadCallGoalOptionsFromDatabase()
ArchiveComment(commentID)
StarComment(schoolID, commentID)
ShowTeacherComment(schoolID, commentID)
StoreComment(schoolID, comment)
StoreCommentInDatabaseAfterValidation(userID, schoolID, comment)
InsertNewCommentIntoDB(userID, comment)
UpdateCommentInDB(userID, comment)
UpdateCommentCallGoalsInDatabase(commentID, goals)
GenerateCommentCallGoalsDataTable(records)
DeleteAllCallGoalsFromCommentInDatabase(commentID)
UpdateCommentContactUserIDsInDatabase(commentID, contactIDs)
DeleteAllContactUserIDsFromCommentInDatabase(commentID)
SendSupportTeamNotificationEmailAboutNewComment(userID, schoolID, comment)
GetCommentsAndConversationsForSchool(schoolID)
CheckForNewCommentsAndConversationsForSchool(schoolID, lastKnownCommentID, lastKnownMessageID)
GetCommentsForSchool(schoolID)
GetCommentsForSchoolFromDatabaseAfterValidation(schoolID, isTeacher, lastKnownCommentID)
AddCommentFromMatilda(commentFromMatilda, schoolID, department, starred)
AddCommentFromMatildaAsync(commentFromMatilda, schoolID, department, starred)
AddCommentFromMatildaAsync(commentFromMatilda, schoolID, departments, starred)
AddCommentFromMatildaIfNonExistent(commentFromMatilda, schoolID, department, daysAgo, starred)
AddCommentFromMatildaIfNonExistent(commentFromMatilda, schoolID, departments, daysAgo, starred)
CheckForNewCommentsInSchool(schoolID, lastKnownCommentID)
CheckForNewCommentsInSchoolAfterValidation(schoolID, lastKnownCommentID)
GetIDOfLastCommentInSchoolFromDatabase(schoolID)
GetLastCommentIDForSchool(schoolID)
GenerateCacheKeyForSchoolLastCommentID(schoolID)
UpdateLastCommentIDForSchool(schoolID, commentID)
UpdateLastCommentIDForSchoolAsync(schoolID, commentID)
<GetReferenceData>b__7_0()
<GetReferenceData>b__7_1()
ClearCache()
.ctor(sessionID)
GetStaffMembers()
LoadCommentAreaUserLinksFromDB()
LoadStaffMembersFromDatabase()
<GetStaffMembers>b__4_0()
<GetStaffMembers>b__4_1()
.ctor(sessionID)
.ctor()
get_DB()
CreateDatabaseContext()
.ctor(sessionID)
ClearCache()
GetAttributeReferenceData(includeArchived)
LoadSingleAttribute(attribCode)
LoadAttributeSetFromDatabase(includeArchived)
GetSingleAttributeValueForSchool(schoolID, attributeCode, allowTeacher)
CreateNewAttributeValue(attributeCode, value)
GetAttributeValuesForSchool(schoolID)
GetAttributeValuesForSchool(schoolID, newUniqueCodes)
GetAttributeValueForSchool(schoolID, code)
GetSalesLeadOwnerForSchoolAsync(schoolID, departmentID)
GetSalesLeadOwnerForSchoolAfterValidationAsync(schoolID, departmentID)
GetSalesLeadOwnerForSchool(session, schoolID, departmentIDs)
GetSalesLeadOwnerForUser(userID, schoolID)
GetAllSalesLeadOwnersForDepartments(schoolID, departmentIDs, defaultToMatilda)
StoreAttributeValuesChangeSet(schoolID, changeSet, allowTeacher)
UpsertAttributeValues(schoolID, item, now)
ValidateValueConcurrencyOrThrow(oldRecord, newValue)
StoreAttributeValue(schoolID, value, allowTeacher)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(translationList, options)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_IsReadonly()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.set_IsReadonly(value)
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_SchoolName()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.set_SchoolName(value)
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_CreatorName()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.set_CreatorName(value)
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_Creator()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_SchoolOwner()
.ctor()
.ctor()
GetClassesLicencedForContent(session, classes, content)
.ctor()
.ctor()
TagTheseTranslations(translationIDs, lookupCodes, creatorID)
TagTheseTranslations(db, translationIDs, singleLookupCode, creatorID)
TagTheseTranslations(db, translationIDs, lookupCodes, creatorID)
AddTagsToTranslation(creatorID, newTags, translation)
.ctor()
GetSubjectModuleHierarchy(session, schoolID, subjectIDs, baseLanguageID)
IsSchoolEPContentSource(schoolID)
GetAllTranslationListsForMultipleModules(session, schoolID, moduleIDs, limit)
GetAllTranslationListsForModule(session, schoolID, moduleID, excludePersonalLists, limitToTests)
GetAllTranslationListsForModuleAfterValidation(session, schoolID, moduleID, excludePersonalLists, limitToTests)
SetSessionAccessForListResults(session, schoolID, results)
GetFolderPresenceForModules(session, moduleIDs)
SubstituteTranslationListsWithFactListsWherePossible(lists)
GetAllDefinitionsForTranslationList(sessionID, transListID)
ChangeContentListStructure(sessionID, listID, structure)
SearchForDefinitions(session, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
SearchForDefinitionsInSpecificList(session, listID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
SearchForTranslations(session, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
SearchForTranslationsInSpecificList(session, listID, keyword, contentType, typeCode, definitionLanguage, targetLanguage, baseLanguage, count)
GetLinkedDefinitions(session, translationID, typeCode)
EditTranslation(sessionID, translationID, baseDefinitionsCombined, targetDefinitionsCombined, removeDuplicates, removeHidden)
MergeDuplicatesForTranslation(db, existingTranslationWithUnsavedChanges)
EnsureKeeperHasAllHiddenDefinitions(keeperTranslation, translationCopies)
AddNewTranslationStructured(sessionID, baseLang, targetLang, contentType, definitions)
AddNewTranslation(sessionID, baseLang, targetLang, baseDefinitionsCombined, targetDefinitionsCombined)
ChooseBaseAndTargetLanguageForDefinitions(translationBaseLanguageID, translationTargetLanguageID, contentType)
ParseDefinitionsForCreation(session, translationBaseLanguageID, translationTargetLanguageID, baseDefinitionsCombined, targetDefinitionsCombined, translationContentType)
PopulateContentDefinitions(translation, db)
ParseDefinitions(session, definitionsSeparatedByEOL, languageID, allowComments, typeCode)
GetAllScriptsByLanguage(sessionID)
CopyTranslations(sessionID, schoolID, srcTranslationListID, destTranslationListID)
LoadContentSet(db, contentListIDs, includeContributingLists, userID)
LoadSingleTranslation(db, translationID, userID, excludeHiddenDefinitions)
LoadTranslations(db, translationIDs, userID, excludeHiddenDefinitions)
PopulateTranslationDefinitions(definitionID, currentTranslation, currentDefinition, soundfilesLookup, romanisationsLookup, item)
LoadContentListsAndTranslations(db, allContentListIDs, userID, excludeHiddenDefinitions)
CreateCompositeList(db, baseLanguage, targetLanguage, creatorID, compositeList)
UpdateCompositeList(db, compositeList)
RebuildCompositeList(db, compositeListRecord, compositeList)
DeleteCompositeList(db, compositeListID, submitChanges)
GetTranslationByID(sessionID, translationID, excludeHiddenDefinitions)
GetSharedModuleDetails(sessionID, moduleID)
GetContentDescriptionsForModule(session, moduleID)
GetContentDescriptionsForContentList(session, listID)
GetContentDescriptionsForSpecificContentIDs(session, contentIDs)
GetContentDescriptionsForSpecificContentIDs(contentIDs)
GetContentDescriptionsForSpecificContentIDsAsync(contentIDs)
GetContentDescriptionsForCachedResultAsync(cachedResultID)
GetFactListDisplayOptions(session, contentListID)
StoreFactListDisplayOptions(session, contentListID, options)
GetContentSharingStats(session, month, student, subject, orderByHours)
GetContentSharingStatsFromDB(month, student, subject, orderByHours)
CreateContentSharingStatsCacheKey(month, student, subject, orderByHours)
GetActivityTypeAndContentTypeFromListPurpose(listPurpose)
ChangeMilestoneRule(session, contentID, milestoneRuleID)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor(activityType, contentType)
get_IsReadonly()
set_IsReadonly(value)
get_SchoolName()
set_SchoolName(value)
get_CreatorName()
set_CreatorName(value)
get_Creator()
get_SchoolOwner()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_UniqueText()
CompileForDisplay()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor(source)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ToString()
ToDefinitionForCreation(creationID)
.ctor()
ToString()
.ctor()
.ctor(message)
get_DuplicatesFound()
set_DuplicatesFound(value)
get_TranslationToKeep()
set_TranslationToKeep(value)
get_TranslationsToMerge()
set_TranslationsToMerge(value)
.ctor()
.ctor()
.ctor(ContentLists, Translations)
.ctor()
.ctor()
.ctor()
ToString()
.ctor()
Start()
Stop()
CheckForNewSharedContentUpdates()
CheckForNewSharedContentDeletes()
CheckForNewSubscribedContentUpdates()
CheckForNewSubscribedContentDeletes()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
CreateSharedContentCloudSearchClient()
CreateSubscribedContentCloudSearchClient()
.ctor()
.cctor()
RunTestSearch()
SearchForCurriculumStandardInSpecificSubject(searchText, selectedSubject, selectedCurricula, selectedCurriculumLevels, numberOfResults)
GetCurriculumStandardsInSpecificSubjectFromDatabase(selectedSubject, selectedCurricula, selectedCurriculumLevels, numberOfResults)
SearchForSharedModules(session, baseLanguage, targetLanguage, searchTerms, firstResultIndex, numberOfResults, publicOnly)
SearchForSpecificContentWithReturnObject(session, request)
SearchForSpecificContent(session, request)
SearchForSpecificContentWithSearchTerms(session, request)
GenerateCurriculumStandardSearchResults(standards)
GenerateSharedContentListSearchResults(lists, schoolID)
GenerateSchoolSubscribedContentListSearchResults(session, lists, schoolID, isTeacher)
GenerateUserSubscribedContentListSearchResults(session, lists, userID, schoolID)
GenerateSharedModuleSearchResults(modules, schoolID)
GenerateSubscribedModuleSearchResults(schoolID, moduleIDs, isTeacher)
NormaliseOfficialResults(results, normaliseAllLPSchoolResults)
ProcessCurriculumStandardSearchFacetResults(facetResultSet)
ProcessCurriculumSubjectSearchFacetResults(facetResultSet)
ProcessCurriculumLevelSearchFacetResults(facetResultSet)
ProcessCurriculumSearchFacetResults(facetResultSet)
ProcessTagSearchFacetResults(facetResultSet)
SearchForSpecificContentWithoutSearchTerms(session, request)
ReduceSearchTermToNextMorePermissiveValue(searchTerm, minimalSearchLength)
RemoveLastWordFromSearchTerm(searchTerm, minimalSearchLength)
BuildSearchQueryFromSearchTerms(searchTerms, searchForPrefixesOfFinalTerm)
LogSearchRequest(userID, applicationID, baseLanguage, targetSubject, searchString, filterString, numberOfResults)
.ctor()
.cctor()
GetAllCurriculumStandardsWithTags()
GetSpecificCurriculumStandardsWithTags(standardIDs)
GetCurriculaWithAllLevels(CurriculumIDs)
GetMultipleCurriculaWithAllLevels(IDs)
GetCurriculumWithAllLevels(ID)
GenerateHashKeyForCurriculumWithAllLevels(ID)
GetCurriculumWithAllLevelsFromDatabase(ID)
GetAllCurriculaWithAllLevels()
GenerateAllCurriculaWithAllLevelsCacheKey()
GetAllCurriculWithAllLevelsFromDatabase()
RemoveCurriculumFromCache(ID)
GetMultipleCurriculumStandards(IDs)
GenerateHashKeyForCurriculumStandard(ID)
GetTagSetForList(session, listID)
GetTagSetForModule(session, moduleID)
GetTagSetForMultipleLists(listIDs)
GetTagSetForMultipleModules(moduleIDs)
GetTagSetForMultipleReferencedItems(itemType, itemIDs)
CleanUpKeyValueTags(tags)
CleanUpListOfTags(tags)
CleanUpTag(tag)
UpdateContentListTagsAfterValidation(ListID, tags, conn)
UpdateContentListSearchMetadata(session, schoolID, listID, metadata)
UpdateContentListCurriculumStandardAssociationsAfterValidation(listID, curriculumStandards, conn)
UpdateCascadedCurriculumStandardsForContentListsAfterValidation(listIDs)
UpdateCascadedCurriculumStandardsForContentListsAfterValidation(listIDs, conn)
UpdateCurriculumStandardsAndTagsForModuleSubscribedChildren(ancestorModuleID, updateTags, updateCurriculumStandards)
CopyContentListSearchMetadataAfterValidation(donorListID, targetListID)
UpdateModuleSearchMetadata(session, SchoolID, ModuleID, metadata)
UpdateModuleCurriculumStandardAssociationsAfterValidation(moduleID, curriculumStandards, conn)
UpdateModuleTagsAfterValidation(ModuleID, tags, conn)
AddCurriculum(session, Name, ShortName)
AddCurriculumLevel(session, curriculum, name)
AddCurriculumSubject(session, curriculum, name, linkedSubjects)
AddCurriculumStandard(session, curriculumLevel, curriculumSubject, name, curriculumIdentifier, subjects, searchTerms)
UpdateCurriculumStandard(session, curriculumStandard, curriculumSubject, name, curriculumIdentifier, Subjects, searchTerms)
GetAllCurriculumSubjects()
GenerateCacheKeyForAllCurriculumSubjects()
GetAllCurriculumSubjectsFromDatabase()
RemoveAllCurriculumSubjectsObjectFromCache()
GetAllCurriculumLevels()
GenerateCacheKeyForAllCurriculumLevels()
GetAllCurriculumLevelsFromDatabase()
RemoveAllCurriculumLevelsObjectFromCache()
RemoveAllCurriculaWithAllLevelsObjectFromCache()
RemoveAllCurriculaFromCache()
RemoveCurriculumStandardFromCache(ID)
.ctor()
SuggestSpelling(subject, searchTerm, tagSuggestions)
SuggestSpellingFromSuggestor(suggestor, searchTerm, tagSuggestions)
GetSuggestor(subject)
GetWordFrequenciesForSubject(subject)
GenerateCacheKeyForWordFrequenciesForSubject(subject)
GetWordFrequenciesForSubjectFromDatabase(subject)
GetWordPairFrequenciesForSubject(subject)
GenerateCacheKeyForWordPairFrequenciesForSubject(subject)
GetWordPairFrequenciesForSubjectFromDatabase(subject)
GenerateWordPairAffinities(wordPairs, wordFrequencies)
GetRawTermFrequenciesFromDatabase(subject)
.ctor()
.cctor()
CreateSerializationSettings()
GenerateSearchKeyForItem(ownerType, schoolID, userID, itemType, moduleID, listID)
ValidateSearchItem(ownerType, schoolID, userID, itemType, moduleID, listID)
ValidateSearchItem(item)
GenerateSearchKeyForItem(item)
GenerateSearchKeyForSchoolModule(schoolID, moduleID)
GenerateSearchKeyForSchoolContentList(schoolID, moduleID, listID)
GenerateSearchKeyForUserModule(userID, moduleID)
GenerateSearchKeyForUserContentList(userID, moduleID, listID)
GenerateSearchDocumentsForSubscribedContentLists(targetItems)
GenerateSearchDocumentsForSubscribedModules(targetItems)
GetModuleSpecificInfoForContentLists(targetItems)
GetModuleSchoolSpecificInfoForContentLists(targetItems)
GetModulePersonalContentListSpecificInfoForContentLists(targetItems)
UploadSearchDocuments(documents)
GetContentListAuthorInfo(listIDs)
GetModuleAuthorInfo(moduleIDs)
DeleteSearchDocuments(searchDocumentReferences)
GenerateAndUploadReferencedItems(items)
GenerateSearchDocumentsForReferencedItems(items)
HandleUpdateQueueItems(NumberOfRecordsToProcess, CooldownMinutes)
HandleDeleteQueueItems(NumberOfRecordsToProcess, CooldownMinutes)
GenerateSubscribedReferencedItemsForContentLists(targetLists)
FlagContentListsForSearchUpdate(targetLists)
FlagContentListsForSearchDelete(targetLists)
GenerateSubscribedReferencedItemsForContentLists(targetLinks)
GenerateSubscribedReferencedItemsForContentLists(targetLinks)
FlagContentListsForSearchUpdate(targetLinks)
FlagContentListsForSearchUpdate(targetLinks)
FlagContentListsForSearchDelete(targetLinks)
FlagContentListsForSearchDelete(targetLinks)
GenerateSubscribedReferencedItemsForSchoolModulePairs(targetPairs, alsoIncludeAttachedContentLists)
GenerateSubscribedReferencedItemsForModules(targetModules, alsoIncludeAttachedContentLists)
FlagSchoolModulePairsForSearchUpdate(targetModules, alsoUpdateAttachedContentLists)
FlagModulesForSearchUpdate(targetModules, alsoUpdateAttachedContentLists)
FlagSchoolModulePairsForSearchDelete(targetPairs, alsoUpdateAttachedContentLists)
FlagModulesForSearchDelete(targetModules, alsoRemoveAttachedContentLists)
FlagSubscribedSearchDocumentsForSearchUpdate(itemReferences)
FlagSubscribedSearchDocumentsForSearchDelete(itemReferences)
GetLicenceStatusForSpecificSchools(schoolIDs)
DeleteAllItemsOnSearchServer(client)
UploadFirstXUsersPrivateContent(offset, size)
FlagAllModulesAndContentListsForSearchUpdates()
FlagAllSchoolModulesForSearchUpdates()
FlagAllSchoolContentListsForSearchUpdates(activityType)
FlagAllPersonalModulesAndContentListsForSearchUpdates()
FlagAllSmartLessonsForSearchUpdates()
ReIndexSpecificSchoolsContentForSearch(schoolID)
FlagSpecificSchoolsModulesAndContentListsForSearchUpdates(schoolIDs)
FlagSpecificSchoolModulesForSearchUpdates(schoolIDs)
FlagSpecificSchoolsContentListsForSearchUpdates(schoolIDs, activityType)
TestBreakingTheory()
.ctor()
CreateSerializationSettings()
GenerateSearchKeyForItem(itemType, ID)
GenerateSearchKeyForContentList(ID)
GenerateSearchKeyForModule(ID)
GenerateSearchKeyForCurriculumStandard(ID)
GenerateSearchDocumentsForReferencedItems(items, timestamp)
GenerateSearchDocumentsForContentLists(listIDs, timestamp)
GenerateSearchDocumentsForModules(moduleIDs, timestamp)
GenerateSearchDocumentsForCurriculumStandards(standardIDs, timestamp)
GenerateSearchTagsForSpecificCurriculumStandards(standardIDs)
GetModuleSearchIndexingInfo(moduleIDs)
GetContentListSearchIndexingInfo(listIDs)
GenerateUsageScoreForSearchItem(HoursSpentThisYear, HoursSpentThisMonth, StudentsUsedThisYear, StudentsUsedThisMonth)
UploadSearchDocuments(documents, markChangesInDatabase, timestamp)
DeleteSearchDocuments(searchDocumentReferences, markChangesInDatabase, timestamp)
GenerateAndUploadReferencedItems(items)
GenerateAndUploadReferencedItems(items, timestamp)
FlagSearchDocumentsForDeletion(items)
FlagSearchDocumentForDeletion(itemType, itemID)
FlagSearchDocumentsForUpdate(items, createSearchDocumentsIfNotPresent)
FlagSearchDocumentForUpdate(itemType, itemID, createSearchDocumentsIfNotPresent)
FlagContentListForSearchUpdate(ID, createSearchDocumentsIfNotPresent)
FlagContentListsForSearchUpdate(IDs, createSearchDocumentsIfNotPresent)
FlagContentListForSearchDeletion(ID)
FlagContentListsForSearchDeletion(IDs)
FlagModuleForSearchUpdate(ID, createSearchDocumentsIfNotPresent)
FlagModulesForSearchUpdate(moduleIDs, createSearchDocumentsIfNotPresent)
FlagModuleForSearchDeletion(ID)
FlagModulesForSearchDeletion(IDs)
FlagCurriculumStandardForSearchUpdate(ID, createSearchDocumentsIfNotPresent)
FlagCurriculumStandardsForSearchUpdate(IDs, createSearchDocumentsIfNotPresent)
FlagCurriculumStandardForSearchDeletion(ID)
FlagCurriculumStandardsForSearchDeletion(IDs)
FlagAllCurriculumStandardsForUpdate()
UploadFirstXSharedContentLists(num, offset, markInDatabase)
UploadFirstXSharedModules(num, offset, markChangesInDatabase)
UploadFirstXSharedCurriculumStandards(num, offset, markChangesInDatabase)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_IsReadonly()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.set_IsReadonly(value)
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_SchoolName()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.set_SchoolName(value)
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_CreatorName()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.set_CreatorName(value)
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_Creator()
nz.co.LanguagePerfect.Services.Content.BusinessObjects.IContentListAccessResult.get_SchoolOwner()
.ctor()
.ctor()
get_system()
set_system(value)
get_contenttype()
set_contenttype(value)
get_ownertype()
set_ownertype(value)
get_module()
set_module(value)
get_list()
set_list(value)
get_title()
set_title(value)
get_description()
set_description(value)
get_school()
set_school(value)
get_user()
set_user(value)
get_tags()
set_tags(value)
get_contexttags()
set_contexttags(value)
get_authortags()
set_authortags(value)
get_sections()
set_sections(value)
get_baselanguage()
set_baselanguage(value)
get_subject()
set_subject(value)
get_curriculum()
set_curriculum(value)
get_curriculumlevel()
set_curriculumlevel(value)
get_curriculumsubject()
set_curriculumsubject(value)
get_curriculumstandard()
set_curriculumstandard(value)
get_featured()
set_featured(value)
ShouldSerializetitle()
ShouldSerializedescription()
ShouldSerializelist()
ShouldSerializeschool()
ShouldSerializeuser()
ShouldSerializebaselanguage()
ShouldSerializetags()
ShouldSerializecontexttags()
ShouldSerializeauthortags()
ShouldSerializesubject()
ShouldSerializecurriculum()
ShouldSerializecurriculumlevel()
ShouldSerializecurriculumsubject()
ShouldSerializecurriculumstandard()
ShouldSerializesections()
.ctor()
.ctor()
get_TypeCode()
.ctor()
.ctor()
.ctor()
.ctor()
CloneProperties()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
Clone()
GetHashCode()
Equals(obj)
.ctor()
.ctor()
.ctor()
.ctor()
NameContentSearchItemType(itemType)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_system()
set_system(value)
get_itemid()
set_itemid(value)
get_type()
set_type(value)
get_title()
set_title(value)
get_description()
set_description(value)
get_creator()
set_creator(value)
get_school()
set_school(value)
get_tags()
set_tags(value)
get_contexttags()
set_contexttags(value)
get_authortags()
set_authortags(value)
get_sections()
set_sections(value)
get_baselanguage()
set_baselanguage(value)
get_subject()
set_subject(value)
get_curriculum()
set_curriculum(value)
get_curriculumlevel()
set_curriculumlevel(value)
get_curriculumsubject()
set_curriculumsubject(value)
get_curriculumstandard()
set_curriculumstandard(value)
get_usage()
set_usage(value)
get_featured()
set_featured(value)
ShouldSerializetitle()
ShouldSerializedescription()
ShouldSerializecreator()
ShouldSerializeschool()
ShouldSerializebaselanguage()
ShouldSerializetags()
ShouldSerializecontexttags()
ShouldSerializeauthortags()
ShouldSerializesubject()
ShouldSerializecurriculum()
ShouldSerializecurriculumlevel()
ShouldSerializecurriculumsubject()
ShouldSerializecurriculumstandard()
ShouldSerializesections()
.ctor()
GetClassesInSchool(SessionID, SchoolID, LimitTeacherToClassesSheTeaches, IncludeNumberOfUsers)
GetMyClassesInSchool(session, SchoolID, minPrivilegesLevel)
GetClassesInSchool(schoolID, includeUnlicencedUsers)
GetClassesInSchoolWithAccessToSelectedContent(session, schoolID, limitToTeachersClass, contentFilter, includeNumberOfUsers)
GetUnlicencedUsersClassInSchool(sessionID, schoolID)
GetStaffClassInSchool(sessionID, schoolID)
FindOrCreateUnlicencedUsersClassInSchoolAfterValidation(schoolID)
GetClassesInSchoolWithUserAndLicenceIDs(SessionID, SchoolID)
GetUsersInClasses(session, classIDs, minPrivileges, maxPrivileges)
GetUsersInClasses(schoolID, classIDs, minPrivileges, maxPrivileges)
ValidateThatITeachThisClass(UserID, ClassID, conn)
GetClassesITeach(session)
GetClassesUserTeaches(userID)
GetClassIDsForUser(userID)
RenameClass(SessionID, ClassID, NewName)
DeleteClass(SessionID, ClassID)
ArchiveClasses(session, targetClasses)
UndoClassArchive(session, classesToRestore)
CreateNewClass(session, Name, SchoolID)
CreateNewClass(session, Name, SchoolID, RequestedJoinCode)
CreateUnlicencedUsersClassForSchool(SessionID, SchoolID)
GenerateUniqueJoinCodeForClass(conn, requestedJoinCode)
ValidateThatUserIsAbleToEditClassesInSchool(Session, SchoolID, conn)
GenerateCode(CodeLength)
GenerateClassCodesForAllClasses(SessionID)
GetClassFromJoinCode(Code)
GetClassAndSchoolDetails(Session, conn, ClassID)
GetClassAndSchoolDetailsAfterValidation(ClassID)
GetClassAndSchoolDetails(Session, conn, ClassID, authorize)
OutputClassDataWithReturnObject(ClassID)
OutputClassData(ClassID)
GetClassAndSchoolDataFromDatabase(classID)
GetClassData(classIDs)
GetArchivedClassAndSchoolDataFromDatabase(classIDs)
GenerateCacheKeyForClassAndSchoolData(classID)
OutputMockClassDataForSchoolSelection(schoolID)
GetMockClassAndSchoolDataForSchoolFromDatabase(schoolID)
GenerateCacheKeyForMockClassAndSchoolData(schoolID)
EnsureClassesExist(session, schoolID, classNames, licenceID)
GetLicencedClassesAndSchoolsForUserAtPointInTime(userID, startDate, endDate)
GetCurrentLicencedClassesForUser(userID)
GetMultipleClassesWithSchoolInfoAsync(classIDs)
GetSchoolIDFromClass(classID)
GetSchoolIDFromClassAsync(classID)
SetClassSubjectNameMatches(classes)
SetClassSubjectNameMatchForClass(targetClass)
FindBestSubjectMatchesForClass(className, subjectKeywords)
PrepareClassNameForSubjectMatching(className)
ExtractCoreClassName(className)
MatchAllClassesToSuggestedSubjects()
CountUsersInClasses(classIDs, minPrivileges, maxPrivileges)
GetClassesForUsers(userIDs, filterToClasses)
GetClassesForUsers(userIDs)
DownloadClassListDetails(session, schoolID, classIDs)
SendClassListDetailsToTeachers(session, teachersAndClasses, templateData)
PostClassListsSentComment(session, teachersAndClasses, templateData)
CreateClassListsSentComment(authorID, users, emailedIDs, departmentID, teachersAndClasses, templateData)
PreviewClassListDetailsEmail(sampleTeacher, templateData)
GenerateClassListDetailsModel(teachersAndClasses, templateData)
BuildSpreadsheetOfClassDetails(classes, includeUsernameAndPasswordDetails)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ConvertRawDetailsToUser()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
GetDynamoInTestUserAnswersTable()
GetDynamoUserAnswerHistoryTable()
GetAllUserAnswersForAttempt(attemptID, strongConsistency)
StoreMultipleUserAnswerRecords(answers, storeHistoryRecords, synchronisedTimeNow)
InsertUserAnswerRecords(attemptID, answers, synchonisedTimeNow)
UpdateMultipleUserAnswerRecords(questionStates, synchonisedTimeNow)
UpdateUserAnswerRecord(questionState, synchonisedTimeNow)
UpdateUserAnswerRecordDocumentInDynamo(attemptID, questionIndex, doc, expectedValues)
DeleteUserAnswerRecordsForAttempt(attemptID)
GetAllUserAnswerRecordsGlobally()
GetAllUserAnswerHistoryRecordsForAttempt(attemptID, strongConsistency)
RecordMultipleUserAnswerUpdatesInHistoryTable(historyRecords, throwException)
RecordUserAnswerUpdateInHistoryTable(questionState, mostRecentValue, synchronisedTimeNow, throwException)
RecordUserAnswerUpdateInHistoryTable(historyRecord, throwException)
DeleteUserAnswerHistoryRecordsForAttempt(attemptID)
.ctor()
.cctor()
GetAllUserAnswersForAttempt(attemptID, strongConsistency)
StoreMultipleUserAnswerRecords(answers, storeHistoryRecords, synchonisedTimeNow)
DeleteUserAnswerRecordsForAttempt(attemptID)
GetAllUserAnswerRecordsGlobally()
GetAllUserAnswersForAttempt(attemptID, strongConsistency)
StoreMultipleUserAnswerRecords(answers, storeHistoryRecords, synchronisedTimeNow)
DeleteUserAnswerRecordsForAttempt(attemptID)
GetAllUserAnswerRecordsGlobally()
.ctor()
GetMockMCATTest()
GetLiveMCATTest()
.ctor()
GetFirstScienceExam()
GetQueensYear13PhysicsMockExam()
GetQueensYear12PhysicsMockExam()
.ctor()
PerformUpdateOfUsersProgressForAnalysis()
GetUserIDsInAnalysisSet(analysisGroup)
GenerateAndSaveUsersProgressForAnalysis(userIDs, activityIDs)
PerformUpdateOfFrenchOPEStats()
GetStatsForUsersForModule(moduleID, dataSetID, userIDs)
.ctor()
CreateAlgebraPracticeTestForSpecificSchool(adminSession, schoolID, classIDs, isSAC)
CreateEMCATTaskForSpecificSchool(adminSession, schoolID, classIDs, isSAC, day, startTime, duration, nameOverride)
CreateBrainBeeTaskForSpecificSchool(adminSession, schoolID, classIDs, startTime, duration, nameOverride)
GeteMCATClasses(day1, day2)
GetBrainBeeClasses()
AssignPracticeAssessmentToAlleMCATClasses(adminSession)
AssignEMCATToAlleMCATClasses(adminSession, day)
.ctor()
GetAssessmentEventsTable()
SaveMultipleAssessmentEvents(newEvents, overflowToSQS)
SaveAssessmentEvent(newEvent, overflowToSQS)
GetEventsForAttempt(attemptID, eventsSince, strongConsistency)
GetEventsForAssessmentContext(assessmentContextID, testID, eventsSince, eventualConsistency)
GetEventsForAssessmentContext(assessmentContextID, testID, lastKnownDateUpdated, eventualConsistency)
DeleteEventsForAttempt(attemptID)
.ctor()
.cctor()
get_InTestDataProvider()
CreateSerializationSettings()
StartNewAssessmentAttemptForRevisionTest(session, testID, resumeIncompletePreviousAttempt)
StartNewAssessmentAttemptForAssessmentTask(session, assessmentTaskID, accessCode, resumeIncompletePreviousAttempt)
StartNewAssessmentAttempt(session, testID, assessmentContextID, resumeIncompletePreviousAttempt)
CheckForExistingUnderwayAttemptForUser(testID, assessmentContextID, userID)
SeedNewAssessmentAttemptInternal(session, testID, assessmentContextID, queueStartAction)
AddStartAssessmentMessageToQueue(attemptID)
AddFinaliseAssessmentMessageToQueue(attemptID)
ResumeAssessmentAttemptInternal(session, attempt)
RecordAssessmentAttemptClientStart(session, attemptID)
RecordAssessmentAttemptClientStartAfterSessionValidation(attempt)
GetTestStartQueueEstimatedWaitTime()
DetermineTotalTimeForTest(testID, assessmentContextID, includeDisconnectedTime)
DetermineTotalTimeForTest(test, context, includeDisconnectedTime)
DetermineExpiryDateForNewAssessmentAttempt(test, context, startTime)
PerformServerInitialisationOfAssessmentAttempt(attemptID)
GenerateAndSaveSectionMarkingInfoForFinalisedAssessmentAttempt(attemptID)
GenerateAndSaveSectionMarkingInfoForAssessmentAttempt(attemptID, testID, questionStates)
InsertAttemptGradingStepsForAssessmentAttempt(attempt)
GetAssessmentAttemptDetailsForClient(session, attemptID)
GetAssessmentAttemptDetailsForClientAfterValidation(attemptStatus)
ObfuscateAssessmentAttemptClientDetails(details)
StartNewTestAttemptForRevisionTest(session, testID, warnAboutIncompletePreviousAttempts)
StartNewTestAttemptForAssessmentTask(session, assessmentTaskID, accessCode, warnAboutIncompletePreviousAttempts)
StartNewTestAttempt(session, testID, assessmentContextID, warnAboutIncompletePreviousAttempts)
ResumeIncompleteTestAttempt(session, attemptID)
RecordAssessmentExitWithoutSubmission(session, attemptID)
CompleteTestAttempt(session, attemptID, clientTimezoneOffsetMinutes)
CompleteTestAttempt(attemptID, queueAction)
PerformQueuedAssessmentAttemptFinalisation(attemptID)
CompleteTestAttemptAfterValidation(attemptStatus)
RecordAttemptUnusualActivity(attemptID)
ValidateAnswersForTestAttempt(test, answers)
GenerateStatsUpdates(test, answers)
ProcessAndSaveTestAttemptUserAnswers(attempt, answers, firstAttemptAtCompletion)
ProcessAndSaveTestAttemptUserAnswerHistoryRecords(attempt, records, firstAttemptAtCompletion)
TransferAssessmentAttemptEventsToDatabase(attempt, firstAttemptAtCompletion)
RecordAssessmentAttemptFocusEvents(session, attemptID, clientEvents, focusStatus)
UpdateTestUserAnswersAndEvents(session, requestObjectEncrypted)
UpdateTestUserAnswersAndEvents(session, attemptID, answersToUpdate, clientEvents, timeStatus, useQuestionVersionTags, allowQuestionStateUpdates)
GetFinalUserAnswersForAttempt(attemptID)
GetFinalUserAnswersForMultipleAttempts(attemptIDs)
FillInMissingQuestionNames(questions, test)
GetAllAttemptIDsForTask(testID, assessmentContextID, includeCompletelyMarkedAttempts)
GetMarkedAttemptIDsForTask(testID, assessmentContextID, finalGradeAttemptsOnly)
GetAllFinalisedTestAttemptsForTest(testID)
DoesTestHaveAnyAttempts(testID)
DoesTestHaveAnyAttempts(session, testID)
RemoveAttemptDynamoRecords(attemptID)
GetFinalisedAssessmentAttemptEventsFromDatabase(attemptID, excludeQuestionViewedEvents)
GetFinalisedAssessmentAttemptEventsFromDatabase(attemptIDs, excludeQuestionViewedEvents)
SelectSampleQuestionsForTest(testID, assessmentContextID)
TransferAllInTestUserAnswers()
FinaliseAllAssessmentAttempts()
GetAllAssessmentEventsAndStatusesForContext(testID, assessmentContextID, targetUserIDs)
GetUpdatedAssessmentEventsAndStatusesForContext(testID, assessmentContextID, lastKnownKey, targetUserIDs)
GenerateAssessmentEventsAndStatusReturnObject(attempts, events, timeFetched, recentEventCutoff)
GetAllAssessmentEventsAndStatusForUser(testID, assessmentContextID, targetUserID)
UpdateActivityStatusOfAttemptsWithoutRecentUpdate()
MarkStatusAsDisconnectedAfterValidation(attempt, synchronisedTime)
MakeAttemptEditable(session, attemptID)
NotifySupportAboutNewAttemptsOnImportantAssessments(minutesOffset)
AddSectionInfoToAllAssessments()
FindAllAttemptIDsWithoutSectionInfo()
GetMarkedAttemptIDsWithoutRecommendationsSinceDate(startDate)
TransferAttemptsToDifferentAssessmentContext(targetAttemptIDs, oldAssessmentContextID, newAssessmentContextID, testID, recalculateFinalGrade)
.ctor()
.cctor()
GetDynamoAttemptStatusesTable()
GetAssessmentAttemptFromDatabase(attemptID)
GetAssessmentAttemptsFromDatabase(attemptIDs)
GetAssessmentAttemptsForTestFromDatabase(testID, assessmentContextID)
GetAssessmentAttemptsForTestFromDatabase(testID, assessmentContextID, userID)
GetAssessmentAttemptsForTestFromDatabase(testID, assessmentContextID, targetUserIDs)
ApplyDynamoStatusesToTestAttempts(attempts)
UpgradeDatabaseTestAttemptsWithDynamoDataAttemptStatus(attempts)
GetAssessmentAttemptStatusFromDynamo(attemptID)
GetAssessmentAttemptStatusesFromDynamo(attemptIDs, allowDirtyReads)
UpdateAttemptStatusInDynamo(status, attributesToUpdate, maxRetries)
UpdateAttemptStatusDocumentInDynamo(attemptID, doc, expectedValues)
UpdateTestAttemptLastUpdated(attemptID)
GetAssessmentAttempt(attemptID)
GetLiveAssessmentAttemptStatus(attemptID)
AddNewAssessmentAttemptToDynamo(attempt)
UpdateAssessmentAttemptSessionIDAfterValidation(attempt, newSessionID)
UpdateAssessmentAttemptSessionIDInDatabase(attempt, newSessionID)
UpdateAssessmentAttemptSessionIDInDynamo(attempt, newSessionID)
ValidateAndReturnLiveAssessmentAttemptStatus(attemptID, sessionID, throwIfNotMatched)
GetTestAttemptsForUserForTest(userID, testID, assessmentContextID)
GetAssessmentAttemptStatusesForUserForTest(userID, testID, assessmentContextID)
GetAllAssessmentAttemptStatusesForTest(testID, assessmentContextID)
GetTestAttemptsForTest(testID, assessmentContextID)
GetTestAttemptsForTestForSpecificUsers(testID, assessmentContextID, targetUserIDs)
GetAssessmentAttemptStatusesForTestForSpecificUsers(testID, assessmentContextID, targetUserIDs)
GetSpecificTestAttempts(attemptIDs)
GetStatusOfMostRecentTestAttemptForUser(UserID, TestID, AssessmentContextID)
UpdateTestAttemptStatus(attempt, newStatus, newStepStarted, checkBeforeSet)
UpdateTestAttemptStatus(attempt, newStatus, newStepStarted, checkBeforeSet)
UpdateTestAttemptStatusInDatabase(attempt, newStatus, newStepStarted, checkBeforeSet)
UpdateTestAttemptStatusInDynamo(attempt, newStatus, newStepStarted, checkBeforeSet)
UpdateTestAttemptStatusForAttemptStart(attempt, startDate, expiryDate)
UpdateTestAttemptStatusForAttemptResume(attempt)
UpdateTestAttemptStatusForAttemptEarlyExitWithoutSubmit(attempt)
UpdateTestAttemptStatusForAttemptFinalisation(attempt)
UpdateTestAttemptFocusStatus(attempt, focussed, fullScreen, clientUpdateDate)
UpdateTestAttemptTimeUsed(attempt, timeUsed, currentQuestionGroup, currentQuestion)
MarkAttemptAsDisconnected(attempt)
MoveFinalAttemptStatusBackToDatabase(attempt)
DeleteAttemptStatusFromDynamo(attemptID)
GetAttemptsOverdueForExpiryFromDynamo()
GetAttemptsDueForDeletionFromDynamo(lengthOfTime)
GetAttemptsWhichWereNeverStartedFromDynamo()
GetAttemptsStuckInFinalisationFromDynamo()
GetLiveAttemptsWhichHaveLostConnection()
GetAllLiveAssessmentAttemptStatusesFromDynamo()
.ctor()
.cctor()
UpdateTestOverallScoreForUser(test, context, userID)
DetermineAttemptGradeStatus(context, fullyMarked, hasGradingErrors)
GetGradingStepStatusesForAttempt(attemptID)
GetGradingStepStatusesForMultipleAttempts(attemptIDs)
GetSpecificStepGradingResultsForAttempt(Attempt, GradingStep, Version)
GetCurrentGradingStepResultsForAttempt(Attempt, sectionID)
GetCurrentGradingStepResultsForMultipleAttempts(AttemptIDs)
ContinueAttemptGrading(attemptID, startingStep)
ContinueAttemptGrading(test, attempt, context, userAnswers, startingStep)
DetermineAppropriateActionForAttemptGradingStep(step)
BeginAttemptGradingStepInDB(attemptID, step, gradingUserID)
UpdateAttemptGradingStepProgressInDB(attemptID, step, status)
SaveGradingStepResults(attemptID, stepID, version, results)
ApplyGradingStep(test, attempt, context, step, previousResults, userAnswers)
DetermineMarkingSectionVariantInfoForAttempt(attemptID, test, questionStates)
GroupQuestionsByMarkingSection(test, questionStates)
SuggestGradesForTestAttempt(test, attempt, context, step, answers)
ApplyMarkingScheduleRuleAutoSuggestionToQuestion(rule, targetResult, questionAttempted, questionAttemptGrade)
PrepareForTeacherQuestionGradingStep(test, attempt, context, step, previousResults, userAnswers)
ApplyGradeAggregationStep(test, attempt, context, step, previousResults, userAnswers)
SaveOutputGradeFromMarkingProcess(test, attempt, context, markingStepResults, userAnswers)
RecalculateAnalysisGroupScoresForAttempt(attemptID)
SaveAnalysisGroupScoresForAttempt(test, attempt, context, gradingSteps, userAnswers)
DetermineAnalysisGroupScoresForAttempt(test, attempt, context, gradingSteps, userAnswers)
GetTestAttemptMarkingData(session, testID, assessmentContextID, attemptID, includeCompletelyMarkedAttempts)
GetAssessmentTaskAttemptsMarkingData(session, taskID, includeCompletelyMarkedAttempts)
GetAttemptMarkingData(attemptID, sectionID)
GetAttemptMarkingData(attempt, sectionID)
CompileAttemptMarkingData(attemptID, attemptResults, userAnswers)
GetMultipleAttemptsMarkingData(testID, assessmentContextID, includeCompletelyMarkedAttempts, attemptIDs)
FillInMissingQuestionNames(questions, test)
SanitiseAttemptGradingStepResultsForClient(results)
GetGradingMethod(ID)
GenerateCacheKeyForGradingMethod(ID)
GetGradingMethod(session, id)
GetGradingMethods()
GetGradingMethodFromDatabase(ID)
CopyEmptyGradingStepResultsToStep(attempt, oldStep, oldVersion, newStep, newVersion, calculatedUpdate, updatedBy)
SaveAssessorQuestionGradesForAttempt(session, attemptID, version, grades)
FinaliseAssessorQuestionGradesForAttempt(session, attemptID, version)
FinaliseAssessorQuestionGradesForAttemptAfterValidation(attempt, version)
ValidateThatUserCanMarkAssessmentAttempt(session, attempt)
ValidateThatUserCanViewAssessmentAttemptMarks(session, attempt)
ValidateThatUserCanMarkAttemptViaMarkingSet(userID, attemptID)
GetAllVersionIDsForAttemptGradingStep(attemptID, step)
FinaliseAssessorAggregatedGradeForAttempt(session, attemptID, grade)
CheckOutNextAssessmentAttemptForMarking(session, filter, lastAttemptID, lastSequenceString)
CheckOutSpecificAssessmentAttemptForMarking(session, attemptID, filter, overrideExistingCheckout)
GetSpecificAssessmentAttempt(session, attemptID, filter)
CheckOutNextAssessmentAttemptIDForMarkingAfterValidation(session, filter, lastAttemptID, lastSequenceString, sectionID, variant)
CheckOutSpecificAssessmentAttemptIDForMarkingAfterValidation(session, attemptID, sectionID, overrideExistingCheckout)
FindNextUnmarkedAssessmentAttemptID(filter, lastAttemptID, lastSequenceString, sectionID, variant, userID)
RunQueryForFindNextUnmarkedAssessmentAttemptID(filter, lastAttemptID, lastSequenceString, sectionID, variant, allowCheckedOutAttempts, userID, conn)
GetCurrentMarkingEpisodeForAttempt(attemptID)
CheckOutAssessmentAttemptForMarking(session, attemptID, sectionID)
CheckBackInSpecificAssessmentAttemptForMarking(session, attemptID)
CheckBackInSpecificAssessmentAttemptForMarking(sessionID, attemptID)
FlagSectionMarkingStatusAsComplete(session, attemptID, sectionID)
GetSectionMarkingInfoForAttempt(attemptID)
AreAllAttemptMarkingSectionsCompleted(attemptID)
isNextStepForAttemptAManualAggregationStep(attempt)
UpdateSectionMarkingStatusAfterValidation(markerID, attemptID, sectionID, status)
GetMarkerHistory(session, filter, markerUserID, offset, pageSize)
GetMarkerHistory(filter, markerUserID, deduplicateEpisodes, offset, pageSize)
ValidateThatUserHasPermissionsToMarkAssessmentTask(session, task, throwIfNot)
ValidateAccessToMarkingFilter(session, filter)
ValidateAccessToMarkingSet(session, markingSet, throwIfNot)
ConvertMarkingFilterToMarkingSetContents(session, filter)
GetMarkingSetWithPrivilages(session, markingSetID)
GetMarkingSet(markingSetID)
GenerateCacheKeyForMarkingSet(markingSetID)
GetMarkingSetFromDatabase(markingSetID)
GetMarkingSetPrivilages(markingSetID, userID)
GetTestMarkers(session, filter)
GetTestMarkers(filter, sectionID, variant)
GetMarkingSetMarkers(markingSetID)
GenerateCacheKeyForMarkingSetMarkers(markingSetID)
GetMarkingSetMarkersFromDatabase(markingSetID)
GetMarkingProgressStatus(session, filter)
GetMarkingProgressStatus(filter)
GetAssessmentMarkingSectionVariantOptions(session, filter)
GetAssessmentMarkingSectionVariantOptions(filter)
UpdateMarkingCheckoutLastUsed(session, attemptID)
GetAttemptsForMarkingFilterAfterValidation(filter)
GenerateSQLForMarkingFilter(filter)
GetAllAttemptIDsForMarkingSet(markingSetID)
GetAnalysisGroupResultsForAttempt(attemptID)
GetAnalysisGroupResultsForMultipleAttempts(attemptIDs)
RecommendRemediationActivitiesForAssessmentAttempt(attemptID, saveRecommendations)
RecommendRemediationActivitiesForAssessmentAttempt(assessment, attempt, context, analysisGroupResults)
SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt(assessment, attempt, context, analysisGroupResults, analysisGroupAverageStudentScoresForThisAssessmentContext, analysisGroupAverageStudentScoresOverall, activityProgress)
GetAverageScoresForAnalysisGroups(testID, assessmentContext)
EmailStudentWithAssessmentResultsAndRecommendations(attemptID)
SaveRecommendationRecordsForAttempt(attempt, records)
GetAllRecommendationsForMultipleAttempts(attemptIDs)
EmailStudentWithAssessmentResultsAndRecommendations(assessment, attempt, context, analysisGroupResults, recommendations)
EmailStudentWithAssessmentResultsAndRecommendations(assessment, attempt, context, analysisGroups, recommendations)
GenerateResultsAndRecommendationsEmailTemplateModel(user, assessment, attempt, context, analysisGroups, recommendations)
EmailStudentWithAssessmentResultsAndRecommendations_Old(assessment, attempt, context, analysisGroups, recommendations)
UpdateMarkedAttemptsToMatchNewResultPublicationStatus(task, newResultPublicationStatus)
ApplyAllGradingStepsToTestAttempt(test, attempt, context, usersAnswers)
CreateAttemptStepStatusesFromTest(test, attemptID)
FinaliseAllAttemptsStuckPriorToAggregation()
GetAttemptsStuckPriorToAggregation()
.ctor()
.cctor()
.ctor(test)
Clean()
CleanSuggestFlag()
PruneMarkingItemsWithNoElement(elementsByID)
Validate()
ValidateTimeAllowed(errors, timeAllowedSeconds)
ValidateTitleDescription(errors, title, description)
ValidateAnswerDisplayType(errors, answerDisplayType)
ValidateGradingMethod(errors, gradingMethodID, type)
ValidateRules(errors, rules, questionScoringMethod)
ValidateScoreRule(errors, rule, questionScoringMethod)
ValidateGradeRule(errors, rule, questionScoringMethod)
ValidateUniqueRuleIDs(errors, rules)
ValidateMarkedItemsReferenceRule(errors, markedElements)
ValidateAtLeastOneSection(errors)
ValidateMarkedItemsReferenceSection(errors, markedElements)
ValidateAtLeastOneMarkedItem(errors, markedElements)
ValidateUniqueElementIDs(errors, flattenedElements)
ValidateUniqueMarkingItemIDs(errors, markingItems)
ValidateUniqueAnalysisGroupIDs(errors, groups)
ValidateUniqueAnalysisGroupRecommendationIDs(errors, groups)
ValidateThatAnalysisGroupRecommendationsReferenceValidContentLists(errors, groups)
ValidateThatAllQuestionsHaveValidContentTypes(errors, flattenedElements)
AddElement(element)
ParsePruneRecursive(testQuestionGroup, flattenedElements)
ReorderMarkingItemsToMatchElementStructure(flattenedElements)
FindMarkedUnmarked(testQuestionGroup)
FindMarkedUnmarkedRecursive(group)
CreateAssessment(session, NewTest, SchoolToShareWith)
CreateAssessment(assessment, schoolToShareWith)
SaveAssessmentGradingSteps(testID, gradingSteps)
SaveAssessmentAnalysisGroups(testID, analysisGroups)
ModifyAssessment(session, test)
ModifyAssessmentAfterValidation(assessment)
ChangeAssessmentVisibilityToStudentsForRevision(session, AssessmentID, ContainingModuleID, NewVisibility)
DeleteAssessment(session, testID)
GetAssessment(session, TestID)
GetAssessment(TestID)
GetAssessmentFromDatabase(TestID)
NormaliseAllAnalysisGroupRecommendationsInAssessment(assessment)
NormaliseAnalysisGroupRecommendation(recommendation)
AddAssessmentToCache(test)
AddAssessmentSummaryToCache(test)
RemoveAssessmentFromCache(TestID)
GenerateCacheKeyForAssessment(TestID)
GenerateCacheKeyForAssessmentSummary(TestID)
GetRelevantAssessmentsInModuleForUser(UserID, ModuleID)
GetRelevantAssessmentIDsInModuleForUser(UserID, ModuleID)
GetAssessmentSummary(TestID)
GetAssessmentSummaryForAssessmentTask(session, assessmentTaskID)
GetMultipleAssessments(testIDs)
EstimateTimeForAssessment(assessment)
GetSampleQuestionSetForAssessment(session, testID)
GetSampleQuestionSetForAssessmentAfterValidation(assessment)
HasAssessmentBeenAttempted(testID)
GetGradingMethod(ID)
GenerateCacheKeyForGradingMethod(ID)
GetGradingMethod(session, id)
GetGradingMethods()
GetGradingMethodFromDatabase(ID)
GetDraftAssessment(testID)
BeginDraftTest(session, testID)
UpdateDraftTest(session, test)
CommitDraftTest(session, test)
GetAssessmentContext(ID)
GetAssessmentContextFromDatabase(ID)
GenerateCacheKeyForAssessmentContext(ID)
RemoveAssessmentContextFromCache(ID)
ValidateAssessmentTaskAccessCode(task, accessCode)
ReMapAssessmentQuestions(assessmentID, questionMappings)
FindOrCreateBlankTestAttempt(testID, enforceNewAttempt)
GenerateBlankAttemptForTest(userID, schoolID, testID)
GetAllAssessmentTemplates(session)
RemoveAssessmentTemplatesFromCache()
GetAllAssessmentTemplatesFromDatabase()
CreateTestTemplateFromDonorExam(testID, name, description, sortOrder)
RemoveAllAssessmentsFromCache()
UpdateContentTypeOfAllAssessments()
ValidateAllExams()
SelectSampleQuestionsForTest(testID, assessmentContextID)
.ctor()
.cctor()
GetAssessmentTaskReportingData(session, assessmentTaskID, excludeTeachers, filteredClassIDs)
GetUserAssessmentReportingData(session, userID, testID, assessmentContextID)
GetAssessmentReportingContext(assessmentTask, excludeTeachers, filteredClassIDs)
GetAssessmentReportingContext(userID, testID, assessmentContextID)
GetAssessmentReportingData(context)
SummariseQuestionScores(context, markingGroupIndex)
AggregateAndFlattenMarkingItems(sectionMarkingItems, grades)
SummariseMarkingItemGrades(context, markingGroupIndex)
GradeAttributeName(name)
GetAnalysisGroupsForUser(userID, testID, assessmentContextID)
GetAnalysisGroupsForUser(test, assessmentContextID, userID)
GetAnalysisGroups(context)
GetAnalysisGroupStudentResults(context)
AttachGradeAndAttemptsToUsers(context, userIndex)
ReadAttempts(attemptRecords, userIndex)
ReadGrades(gradeRecords, userElementIndex)
GetUsers(userIDs)
AttachRecommenations(context, userIndex)
GenerateReportRecommendationsFromWorkingData(assessment, userID, assessmentContextID, recommendationRecords, analysisGroupResults)
GenerateReportRecommendations(assessment, recommendationRecords, analysisGroupResults, referencedActivities, updatedActivityAttemptsByActivity)
GenerateReportGroupRecommendations(context, userIndex)
GenerateReportAnalysisGroupsFromAnalysisGroupResults(assessment, analysisGroupResults)
GetUserAssessmentResultSummaries(session, userID, testID, assessmentContextID)
GetUserAssessmentResultSummaryForAttempt(session, userID, attemptID)
AssignAppropriateRemediationTasksToAllUsersInAssessmentTask(session, assessmentTaskID, filterRecommendations, filteredRecommendations, filterClasses, filteredClassIDs, DueDate, maxTimeToAssign, maxSmartLessonsToAssign, activityLastAttemptedCutoff, emailStudents, emailParents, emailTeacherReport, notifyTeacher)
CreateSmartLessonTaskForRecommendations(session, assessmentTask, baseLanguage, targetSubject, mostCommonModuleID, assignedActivityIDs, assignedUserIDs, userActivitiesMap, dueDate, activityLastAttemptedCutoff, emailStudents, emailParents, emailTeacherReport, notifyTeacher)
CreateLearnContentTasksForRecommendations(session, assessmentTask, baseLanguage, targetSubject, mostCommonModuleID, assignedActivityIDs, assignedUserIDs, userActivitiesMap, dueDate, activityLastAttemptedCutoff, emailStudents, emailParents, emailTeacherReport, notifyTeacher)
.ctor()
CreateQuickTest(session, NewTestParameters, SchoolToShareWith)
CreateQuickTest(newTestParameters, creator, schoolToShareWith)
ModifyQuickTest(session, newTestParameters)
ModifyQuickTest(newTestParameters, ignorePreviousAttemptsWarning, cleanUpClientParametersForComparison)
GetQuickTestParameters(session, testID)
GetQuickTestParameters(testID)
EstimateMaxNumberOfQuestionsForQuickTestContentSelectionWithReturnObject(parameters)
EstimateMaxNumberOfQuestionsForQuickTestContentSelection(parameters)
CreateNewTestObjectFromQuickTestParameters(parameters, creatorID, schoolOwner)
GenerateAutoMarkedGradingSteps()
GenerateManuallyMarkedGradingSteps()
ApplySafeChangesFromQuickTestParametersToTest(test, parameters)
ApplyQuickTestParametersToTest(test, parameters)
ApplyQuickTestParametersForSimpleLists(test, parameters)
ApplyQuickTestParametersForSmartLessons(test, parameters)
SetUpTestStructureForSingleListTest(test, translationDirection, list, filteredContentIDs, numberOfQuestions, askIdenticalQuestions)
SetUpTestStructureForMultipleListsTest(test, translationDirection, lists, filteredContentIDs, numberOfQuestions, askIdenticalQuestions)
SetUpTestStructureForSmartLessonsTest(test, translationDirection, smartLessons, indexedSectionsBySmartLessonID, indexedSmartLessonSectionQuestions, allContentIDs, numberOfQuestions, manualMarkingRequired, askIdenticalQuestions)
ChooseTestIDForSection(lessonID, sectionID, takenIDs)
UpgradeAllLegacyTestsToQuickTests()
UpgradeLegacyTestObjectToQuickTestObject(oldTest, associatedTask)
UpgradeOldStyleTestInDB(test)
RebuildAllQuickTests(startingID)
RebuildQuickTestFromParameters(ID, overrideQuestionSelection)
.ctor()
.ctor(targetTest, targetContext)
SelectQuestions()
SelectQuestionsFromGroup(group, path, questionLimit, parentSelectingInOrder)
AddLevelToPath(path, newLevel)
.cctor()
.ctor()
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
Execute(test, attempt, context, step, mappings, previousResults, lastResult, userAnswers)
.ctor()
.ctor()
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
CalculateFinalGrade(sectionGrades)
DoListValuesMatch(list1, list2, partialMatch)
PerformTests()
.ctor()
.cctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
Execute(test, attempt, context, step, cutScores, previousResults, lastResult, userAnswers)
GenerateDefaultCutScores(maxScore)
.ctor()
.cctor()
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
.cctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
DoListValuesMatch(list1, list2, partialMatch)
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
Execute(test, attempt, context, step, previousResults, lastResult, userAnswers)
.ctor()
CreateItem(objectType, jObject)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_ID()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
Clone()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
FromTestAttempt(attempt)
ApplyDataToTestAttempt(attempt)
FromDynamoDocument(doc)
ToDynamoDocument(status)
.ctor()
SetEndDate(endDate)
ApplyAttemptData(attempt)
IncrementVersion()
FromAttempt(attempt, startDate, now, EventType, EventTrigger, eventComplete)
FromClientSideEvent(attempt, ev, now)
ToDynamoDocument(ev)
GenerateEventID(startDate, EventType, EventTrigger)
GenerateGSIHashKey(TestID, AssessmentContextID)
FromDynamoDocument(doc)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_RangeKey()
FromTestAttemptQuestionState(questionState, mostRecentItem, dateSaved)
FromDynamoDocument(doc)
TransferDataFromDynamoDocument(doc)
ToDynamoDocument(answer)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ScorePercentage()
.ctor()
.ctor()
.ctor()
CompareAllEditableProperties(test1, test2)
CompareReferencedContentIDs(test1, test2)
CompareBaseListEditableProperties(test1, test2)
CompareTestSpecificEditableProperties(test1, test2)
CompareGradingSteps(test1, test2)
CopyAllProperties(donor, recipient)
CompareAnalysisGroupsDBProperties(test1, test2)
.ctor()
OutputAllLists()
.ctor()
.ctor()
.ctor()
.ctor()
get_Flag()
.ctor()
Compare(gs1, gs2)
.ctor()
CleanUpClientData()
.ctor()
FromAttemptGradingStepStatus(input)
.ctor()
.ctor()
CompareDBProperties(group1, group2)
.ctor()
.ctor()
GetMaxAnalysisGroupValue()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
ShallowCopy()
Compare(t1, t2)
ParameterChangesDoNotRequireRecompilation(existingTest, newTest)
FromTest(test)
.ctor()
.ctor()
.ctor()
CopyAllProperties(donor, recipient)
get_GradingMethodInfo()
get_QuestionScoringMethodInfo()
get_MaxQuestionGradingStage()
GetID()
GetReferencedContentIDsByType()
GetAllReferencedContentIDs()
GetAllAnalysisGroups()
DetermineContentTypeBasedOnQuestions()
CreateJSONSerializationSettings()
OutputSerializedData()
CloneTestViaSerialization(test)
ApplyTestSerializedDataToTest(test, data)
DeserializeTestDataJSONString(data)
SerializeTestDataToJSON(test)
SerializeTestDataToProtobuf(test)
.ctor()
<get_GradingMethodInfo>b__8_0(g)
<get_QuestionScoringMethodInfo>b__10_0(g)
.ctor()
.ctor()
.ctor()
get_Type()
HasChildren()
HasQuestions(cascade)
DetermineCommonTranslationDirection()
GetAllQuestionGroups(includeSelf)
GetAllContentIDs(includeChildren)
GetAllContentIDs(resultSet, includeChildren)
GetAllContentIDsGroupedByType(workingDict)
EstimateNumberOfQuestionsInTest(maxValue)
GenerateContentIDQuestionGroupLookups()
.ctor()
.ctor()
toTest()
.ctor()
.ctor()
get_Type()
.ctor()
FromTest(test)
.ctor()
get_HashKey()
CopyDataFrom(from)
CleanUpClientData()
FromDynamoDocument(doc)
TransferDataFromDynamoDocument(doc)
ToDynamoDocument(answer)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
CreateItem(objectType, jObject)
.ctor()
RequestAnswerReview(session, attemptID, contentID, section, questionAttemptNumber, questionAttemptSet)
IsAnswerReviewAlreadyRequested(attemptID, contentID, section, questionAttemptNumber)
RequestAnswerReviewAfterValidation(userID, attemptID, contentID, section, questionAttemptNumber, questionAttemptSet, requiresTeacherInput, numberOfReviews)
FindAnswersToReview()
SaveTeacherAnswerReview(session, review)
SaveStudentAnswerReview(session, review)
UpdateStudentCountsForReviewRequest(reviewDetails)
UpdateTeacherCompletionFlagForReviewRequest(reviewDetails, complete)
MarkAnswerReviewAsSeenByUser(session, attemptID, section, contentID, questionAttemptNumber, reviewer)
MarkAnswerReviewAsSeenByUserAfterValidation(attemptID, section, contentID, questionAttemptNumber, reviewer)
SaveFinalisedAnswerReview(review)
SaveDraftAnswerReview(review)
SaveAnswerReviewRecord(review)
DeleteAnswerReviewDraft(attemptID, section, contentID, questionAttemptNumber, reviewer, isTeacherReview)
GetReviewsForAnswer(attemptID, section, contentID, questionAttemptNumber, selectionType, reviewer)
GetReviewDraftsForAnswer(attemptID, section, contentID, questionAttemptNumber, reviewer)
SerialiseAnnotationData(annotations)
DeserialiseAnnotationData(data)
GetAnswerReviewsForMultipleAttempts(attemptIDs, sectionID, multipleSectionIDs, contentID)
GetAnswerReviewsForAttempt(attemptID, sectionID, contentID)
SendTeacherAnswerReviewNotificationEmailToStudent(review)
ExtractComponentAnswerStateFromStudentAnswer(question, questionState, usersAnswer)
ExtractLongAnswerTextFromStudentAnswer(question, questionState, usersAnswer)
GenerateSmartLessonAnswerReviewReport(task, activityID, usersFilterID, showOnlineStatus)
GenerateSmartLessonAnswerReviewReport(task, activityID, users, showOnlineStatus, currentSessions)
GenerateSmartLessonAnswerReviewReport(activity, attemptIDs, users, showOnlineStatus, filteredSections, currentSessions)
TaskHasSmartLessonExtendedResponseSections(session, taskID)
TaskHasSmartLessonExtendedResponseSections(task)
GetSelfMarkedSectionsFromSmartLesson(activity)
.ctor()
GetActivityDataProvider()
StartNewActivityAttempt(session, activityID, taskID)
StartNewActivityAttemptAfterValidation(userID, activityID, taskID)
AssociateActivityAttemptWithTask(attempt, taskID)
AssociateActivityAttemptWithAnyRelevantTasks(userID, attempt)
FinaliseActivityAttempt(session, attemptID, saveIncompleteAnswers)
FinaliseActivityAttemptAfterValidation(attemptID, saveIncompleteAnswers)
GetActivityAttempt(attemptID)
GetActivityAttempts(attemptIDs)
GetAllCurrentDataForActivityAttempt(session, attemptID)
ValidateThatAttemptIsCurrentAttemptForUser(attemptID, userID)
GetAllActivityTaskAttemptLinksForMultipleTasks(taskIDs)
GetActivityTaskAttemptLinksForTask(taskID, activityID)
GetActivityAttemptIDsAssociatedWithTask(taskID, activityID)
GetActivityAttemptIDsAssociatedWithTaskForSpecificUser(taskID, userID, activityID)
GetSectionCompletionStatsForMultipleAttempts(attemptIDs)
GetCurrentAnswersForActivityAttempt(session, attemptID)
SaveIncompleteAnswer(session, attemptID, answer)
SaveIncompleteAnswerAfterValidation(attemptID, answer)
SaveFinalAnswers(session, answers)
MoveAllFinalAnswersToAttempt(donorAttemptID, targetAttemptID, overwriteCurrentQuestionAttempts)
SaveFinalAnswersAfterValidation(attemptID, answers)
GetUsersAttemptsForActivity(session, activityID, taskID)
GetUsersAttemptsForSpecificActivities(userID, activityIDs)
GetMultipleUsersAttemptsForSpecificActivities(userIDs, activityIDs)
GetUsersAttemptsForTaskAndSpecificActivities(userID, taskID, activityIDs)
GetUsersAttemptsWhichCouldBeAssociatedWithTask(userID, task)
GetAttemptIDsCurrentlyAssociatedWithTask(userID, taskID, activityIDs)
RecordAdditionalAnswerReviewTime(session, attemptID, contentID, section, questionAttemptNumber, additionalReviewTime)
UpdateSmartLessonUsage()
TransferAllAttemptsToDynamo(startPoint, batchSize)
TransferRecentAttemptsToDynamo(batchSize)
GetAttemptsUpdatedSince(startPoint, numberToGet)
GetNextXAttemptIDs(startPoint, numberToGet)
TransferSpecificActivityAttemptsToDynamo(attemptIDs)
GetDetailsOfSmartLessonAttemptsForTask(userID, taskID)
TraceOutActivityAttemptDetails(attempt, isCurrentSelectedAttempt)
RollUpMultipleSmartLessonTaskAttemptsIntoMostRecentOne(userID, taskID)
RollUpMultipleSmartLessonAttemptsIntoOne(targetAttemptID, donorAttempts)
FlagAllRecentAttemptsForStatsRecalculation(lastUpdatedCutoffDate)
FlagAttemptsForStatsRecalculation(attemptIDs, recalculationDate)
FlagAttemptForStatsRecalculation(attemptID, recalculationDate)
ZeroAllNegativeTimeTakenValues()
.ctor()
.cctor()
GenerateSmartLessonProgressReport(task, activityID, usersFilterID, showOnlineStatus)
GenerateSmartLessonProgressReport(task, activityID, users, showOnlineStatus, currentSessions)
GenerateSmartLessonProgressReportForSpecificUser(task, activityID, userID, showOnlineStatus)
GenerateSmartLessonProgressReport(activityID, schoolID, usersFilterID, periodStartDate, periodEndDate, showOnlineStatus)
GenerateSmartLessonProgressReportForSpecificUser(activityID, userID, periodStartDate, periodEndDate, showOnlineStatus)
GenerateSmartLessonProgressReport(activity, attemptIDs, users, showOnlineStatus, filteredSections, timeSeriesStart, timeSeriesEnd, currentSessions)
SetAlertLevelForStudentSectionProgress(userSectionProgress, sectionMedianIncorrectAnswers, warningDueToRelativeStudentNumbers)
DetermineAlertLevelFromAttemptSectionCompletionStat(userSectionProgress, sectionMedianIncorrectAnswers, warningDueToRelativeStudentNumbers)
GenerateAutomaticInsightStatementsForSmartLessonProgressReport(percentStarted, percentCompleted, usersData, sectionData)
GenerateAutomaticInsightStatementsForSingleUserSmartLessonProgressReport(user, usersData, sectionData)
GenerateTimeSeriesProgressDataForSmartLessonReport(periodStartDate, periodEndDate, rawUserCompletionData, smartLessonSections, numberOfUsers, timeSliceSize)
GenerateTimeSeriesUsageDataForSmartLessonReport(periodStartDate, periodEndDate, rawAnswerTimingInfo, smartLessonSections, numberOfUsers, timeSliceSize)
DetermineOptimalTimeSlicingForTimePeriod(periodStartDate, periodEndDate, maxNumberOfTimeGroupings, minimumTimeGrouping, maximumTimeGrouping)
GetCommonMistakesForSmartLessonProgressReport(taskID, activityID, usersFilterID, sectionID, contentID)
GetCommonMistakesForSmartLessonProgressReportForSpecificUser(taskID, activityID, userID, sectionID, contentID)
GetCommonMistakesForSmartLessonProgressReport(activityID, usersFilterID, periodStartDate, periodEndDate, sectionID, contentID)
GetCommonMistakesForSmartLessonProgressReportForSpecificUser(activityID, userID, periodStartDate, periodEndDate, sectionID, contentID)
GetCommonMistakesForSmartLessonProgressReport(activity, attemptIDs, users, sectionID, contentID)
GetUserAnswersForSmartLessonProgressReport(taskID, activityID, usersFilterID, sectionID, contentID, mostRecentOnly)
GetUserAnswersForSmartLessonProgressReport(activityID, usersFilterID, periodStartDate, periodEndDate, sectionID, contentID, mostRecentOnly)
GetUserAnswersForSmartLessonProgressReportForSpecificUser(taskID, activityID, userID, sectionID, contentID, mostRecentOnly)
GetUserAnswersForSmartLessonProgressReportForSpecificUser(activityID, userID, periodStartDate, periodEndDate, sectionID, contentID, mostRecentOnly)
GetUserAnswersForSmartLessonProgressReport(activity, attemptIDs, users, sectionID, contentID, mostRecentOnly)
GetAggregateProgressMultipleActivitiesForUser(userID, activityIDs)
GetAggregateProgressMultipleActivitiesForMultipleUsers(userIDs, activityIDs)
DetermineAlertLevelForStudentsInSmartLesson(task, activityID, userIDs)
.ctor()
.cctor()
RequestNewSectionCompletionScoreUpdates(newScores)
SaveNewSectionCompletionScores(newScores)
DeduplicateAndCombinePrecalculatedUserScoreUpdates(updates)
DetermineTargetDataSetsForStatsSave(newScore)
GetAppropriateDataSetsForStatsSaveAfterFirstFilter(userID, baseLanguage, targetLanguage, activityID, saveDate)
.ctor()
GetDynamoActivityAttemptsTable()
GetDynamoActivityAttemptAnswersTable()
GetDynamoActivityAttemptQuestionCompletionStatsTable()
GetDynamoActivityAttemptSectionCompletionStatsTable()
CreateNewActivityAttempt(userID, activityID, taskID)
SaveMultipleActivityAttempts(attempts)
GetActivityAttempt(attemptID)
GetActivityAttempts(attemptIDs)
GetActivityAttempts(attemptIDs, stronglyConsistentReads)
GetUsersAttemptsForActivity(userID, activityID, taskID)
GetUsersAttemptsForSpecificActivities(userID, activityIDs, taskID)
GetMultipleUsersAttemptsForSpecificActivities(userIDs, activityIDs, taskID, maxProportionOfReadsToConsume)
GetMultipleUsersAttemptsForSpecificActivities(userActivityMap, taskID, maxProportionOfReadsToConsume)
GetUsersAttemptsBasicDetailsForSpecificActivitiesAsync(userID, activityIDs, taskID)
GetMultipleUsersAttemptsInfoForSpecificActivities(userIDs, activityIDs, taskID)
GetMultipleUsersAttemptsInfoForSpecificActivities(userActivitiesMap, taskID)
FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod(userIDs, activityIDs, periodStartDate, periodEndDate)
FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod(userActivitiesMapItems, periodStartDate, periodEndDate)
UpdateActivityAttemptDocumentInDynamo(ID, doc, expectedValues)
UpdateAttemptProgress(attempt)
GetAllAttemptBasicDetailsForActivity(activityID)
GetAllAttemptIDsForActivity(activityID)
MarkCompleteAnswerAsNotMostRecent(attemptID, contentID, section, questionAttemptNumberLessThan)
GetNextQuestionAttemptNumberForAnswer(attemptID, contentID, section, numberOfNewAttempts)
GetMostRecentAnswerQuestionAttemptNumbers(attemptID, section, contentID)
UpdateActivityAttemptAnswerDocumentInDynamo(AttemptID, Section, ContentID, QuestionAttemptNumber, doc, expectedValues)
GetAnswersForActivityAttempt(attemptID, answerType, section, contentID)
GetAllMostRecentAnswersForActivityAttempt(attemptID, answerType, section, contentID)
GetAllAnswersForActivityAttempt(attemptID, answerType, section, contentID)
GetAnswersForMultipleActivityAttempts(attemptIDs, answerType, section, contentID)
GetAnswerTimingInfoForActivityAttempt(attemptID, section)
GetAnswerTimingInfoForMultipleActivityAttemptsAsync(attemptIDs, section)
GetSpecificActivityAttemptAnswer(attemptID, section, contentID, questionAttemptNumber)
GetSpecificAnswer(attemptID, section, contentID, questionAttemptNumber)
GetAllMostRecentAnswersForActivityAttempt(attemptID)
GetFinalAnswer(attemptID, contentID, section, questionAttemptNumber)
GetQuestionAttemptNumbersForAnswer(attemptID, contentID, section)
CheckForExistanceOfAnswer(attemptID, contentID, section, answerType, questionAttemptNumber)
CheckForExistanceOfFinalAnswer(attemptID, contentID, section, questionAttemptNumber)
GetFinalisedAnswersForActivityAttempt(attemptID, mostRecentAnswersOnly)
SaveFinalAnswer(answer)
SaveMultipleAnswers(answers)
GetIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
CheckForExistanceOfIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
GetIncompleteAnswersForActivityAttempt(attemptID)
InsertNewIncompleteAnswer(answer)
UpdateIncompleteAnswer(answer)
RemoveIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
GenerateQuestionProgressItemsForActivityAttempt(attemptID)
GetAttemptSectionCompletionStats(attemptID)
GetAttemptSectionCompletionStats(attemptID, sections)
GetSectionCompletionStatsForMultipleAttempts(attemptIDs)
GetAttemptSectionCompletionStatsAsync(attemptID, stronglyConsistentRead)
GetAttemptQuestionCompletionStats(attemptID)
GetAttemptQuestionCompletionStatsAsync(attemptID, stronglyConsistentRead)
GetAttemptQuestionCompletionStats(attemptID, itemReferences)
UpdateAttemptProgress(attempt, sectionCompletionUpdates, questionCompletionUpdates)
UpdateSectionCompletionStats(attemptID, stats)
UpdateQuestionCompletionStats(attemptID, stats)
GetAllProgressDataForAttempt(attemptID)
GetAllProgressDataForMultipleAttempts(attemptIDs)
AddProgressDataToAttempts(attempts)
AddProgressDataToAttempt(attempt)
RecordAdditionalAnswerReviewTime(attemptID, contentID, section, questionAttemptNumber, additionalReviewTime)
BulkInsertAttempts(answers)
BulkInsertAnswers(answers)
BulkInsertSectionCompletionStats(answers)
BulkInsertQuestionCompletionStats(answers)
UpdateApproxLastUpdatedForAllAttempts(startID)
GetAllAttemptIDs()
GetAllAttempts()
GetAllAttemptsStartedSinceDate(Cutoff)
GetAllAttemptIDsUpdatedSinceDate(Cutoff)
ZeroAnswersWithNegativeTimes(maxItems, paginationToken)
TestConditionalExpression()
.ctor()
.cctor()
<GetSectionCompletionStatsForMultipleAttempts>b__62_0(attemptID)
CreateNewActivityAttempt(userID, activityID, taskID)
GetActivityAttempt(attemptID)
GetActivityAttempts(attemptIDs)
GetUsersAttemptsForActivity(userID, activityID, taskID)
GetUsersAttemptsForSpecificActivities(userID, activityIDs, taskID)
GetMultipleUsersAttemptsForSpecificActivities(userIDs, activityIDs, taskID, maxProportionOfReadsToConsume)
GetMultipleUsersAttemptsForSpecificActivities(userActivitiesMap, taskID, maxProportionOfReadsToConsume)
FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod(userIDs, activityIDs, periodStartDate, periodEndDate)
FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod(userActivitiesMap, periodStartDate, periodEndDate)
GetAllAttemptIDs()
GetAllAttempts()
GetAllAttemptIDsForActivity(activityID)
GetAllAttemptBasicDetailsForActivity(activityID)
GetAllAttemptIDsUpdatedSinceDate(Cutoff)
GetAllAttemptsStartedSinceDate(Cutoff)
MarkCompleteAnswerAsNotMostRecent(attemptID, contentID, section, questionAttemptNumberLessThan)
GetNextQuestionAttemptNumberForAnswer(attemptID, contentID, section, numberOfNewAttempts)
GetSpecificActivityAttemptAnswer(attemptID, section, contentID, questionAttemptNumber)
GetAnswersForActivityAttempt(attemptID, answerType, section, contentID)
GetAnswersForMultipleActivityAttempts(attemptIDs, answerType, section, contentID)
GetAnswerTimingInfoForMultipleActivityAttemptsAsync(attemptIDs, section)
GetQuestionAttemptNumbersForAnswer(attemptID, contentID, section)
CheckForExistanceOfFinalAnswer(attemptID, contentID, section, questionAttemptNumber)
SaveFinalAnswer(answer)
RecordAdditionalAnswerReviewTime(attemptID, contentID, section, questionAttemptNumber, additionalReviewTime)
CheckForExistanceOfIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
InsertNewIncompleteAnswer(answer)
UpdateIncompleteAnswer(answer)
RemoveIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
GenerateQuestionProgressItemsForActivityAttempt(attemptID)
GetAttemptSectionCompletionStats(attemptID)
GetAttemptSectionCompletionStats(attemptID, sections)
GetSectionCompletionStatsForMultipleAttempts(attemptIDs)
GetAttemptQuestionCompletionStats(attemptID)
GetAttemptQuestionCompletionStats(attemptID, itemReferences)
UpdateAttemptProgress(attempt, sectionCompletionUpdates, questionCompletionUpdates)
UpdateSectionCompletionStats(attemptID, stats)
UpdateQuestionCompletionStats(attemptID, stats)
UpdateAttemptProgress(attempt)
GetAllProgressDataForAttempt(attemptID)
GetAllProgressDataForMultipleAttempts(attemptIDs)
CreateNewActivityAttempt(userID, activityID, taskID)
GetActivityAttempt(attemptID)
GetActivityAttempts(attemptIDs)
GetUsersAttemptsForActivity(userID, activityID, taskID)
GetUsersAttemptsForSpecificActivities(userID, activityIDs, taskID)
GetMultipleUsersAttemptsForSpecificActivities(userIDs, activityIDs, taskID, maxProportionOfReadsToConsume)
GetMultipleUsersAttemptsForSpecificActivities(userActivitiesMap, taskID, maxProportionOfReadsToConsume)
FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod(userIDs, activityIDs, periodStartDate, periodEndDate)
FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod(userActivitiesMapItems, periodStartDate, periodEndDate)
GetAllAttemptIDs()
GetAllAttempts()
GetAllAttemptBasicDetailsForActivity(activityID)
GetAllAttemptIDsForActivity(activityID)
GetAllAttemptIDsUpdatedSinceDate(Cutoff)
GetAllAttemptsStartedSinceDate(Cutoff)
MarkCompleteAnswerAsNotMostRecent(attemptID, contentID, section, questionAttemptNumberLessThan)
GetNextQuestionAttemptNumberForAnswer(attemptID, contentID, section, numberOfNewAttempts)
GetAnswersForActivityAttempt(attemptID, answerType, section, contentID)
GetAnswersForMultipleActivityAttempts(attemptIDs, answerType, section, contentID)
GetMultipleUsersAttemptsInfoForSpecificActivities(userActivitiesMap, taskID)
GetAnswerTimingInfoForMultipleActivityAttemptsAsync(attemptIDs, section)
GetSpecificActivityAttemptAnswer(attemptID, section, contentID, questionAttemptNumber)
GetFinalAnswer(attemptID, contentID, section, questionAttemptNumber)
GetFinalisedAnswersForActivityAttempt(attemptID, mostRecentAnswersOnly)
GetQuestionAttemptNumbersForAnswer(attemptID, contentID, section)
CheckForExistanceOfFinalAnswer(attemptID, contentID, section, questionAttemptNumber)
SaveFinalAnswer(answer)
GetIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
CheckForExistanceOfIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
GetIncompleteAnswersForActivityAttempt(attemptID)
InsertNewIncompleteAnswer(answer)
UpdateIncompleteAnswer(answer)
RemoveIncompleteAnswer(attemptID, contentID, section, questionAttemptNumber)
GenerateQuestionProgressItemsForActivityAttempt(attemptID)
GetAttemptSectionCompletionStats(attemptID)
GetAttemptSectionCompletionStats(attemptID, sectionIDs)
GetSectionCompletionStatsForMultipleAttempts(attemptIDs)
GetAttemptQuestionCompletionStats(attemptID)
GetAttemptQuestionCompletionStats(attemptID, itemReferences)
UpdateAttemptProgress(attempt, sectionCompletionUpdates, questionCompletionUpdates)
UpdateSectionCompletionStats(attemptID, stats)
UpdateSectionCompletionStats(attemptID, stats, conn, tran)
UpdateQuestionCompletionStats(attemptID, stats)
UpdateQuestionCompletionStats(attemptID, stats, conn, tran)
UpdateAttemptProgress(attempt)
UpdateAttemptProgress(attempt, conn, tran)
RecordAdditionalAnswerReviewTime(attemptID, contentID, section, questionAttemptNumber, additionalReviewTime)
GetAllProgressDataForAttempt(attemptID)
GetAllProgressDataForMultipleAttempts(attemptIDs)
.ctor()
CreateStructuredActivity(session, schoolID, title, description, ancestor, baseLanguage, targetSubject, moduleToAddTo, addAsPersonalList, folderPath, template)
ModifyStructuredActivity(session, activity)
CleanUpStructuredActivityFromClient(activity)
ModifyStructuredActivityAfterValidation(activity)
MarkStructuredActivityAsRequiringProgressUpdates(ActivityID, conn)
RemoveAllTaskReferencesToDeletedSections(activityID, deletedSectionIDs, conn)
DeleteStructuredActivity(session, activityID)
GetStructuredActivityAsync(ActivityID)
GetStructuredActivityFromDatabaseAsync(ActivityID)
GetMultipleStructuredActivitiesFromDatabaseAsync(ActivityIDs)
SafelyGetStructuredActivityOrNull(activityID)
GetMultipleStructuredActivities(activityIDs)
AddStructuredActivityToCache(activity)
RemoveStructuredActivityFromCache(activityID)
RemoveAllStructuredActivitiesFromCache()
GenerateCacheKeyForStructuredActivity(activityID)
GenerateCacheKeyForIsActivityStructured(activityID)
GetStructuredActivityWithContentForCP(session, activityID)
GetContentForCustomStructuredActivity(session, activity)
GetStructuredActivityContent(session, activity)
IsItemStructuredActivity(activityID)
CheckIfItemIsStructuredActivity(activityID)
CommitDraftStructuredActivity(activityID, draft)
DiscardDraft(session, activityID)
HasDraft(session, activityID)
GetDraft(activityID)
DeleteDraft(draft)
UpdateDraft(draft)
SubmitSmartLessonFeedback(session, activityID, attemptID, completedActivity, starRating, studentConfidence, message)
SubmitSmartLessonFeedbackAfterValidation(userID, userType, activityID, attemptID, completedActivity, starRating, studentConfidence, message)
GetUserFeedbackForAttemptIDs(attemptIDs)
GetGlobalUserFeedbackForActivity(activityID)
IsLessonFeedbackInappropriate(message)
ConvertContentListToStructuredActivity(session, schoolID, listID, createAsNewList, moduleToAddTo, folderPath)
CreateStructuredActivityConversionTemplate(list)
ConvertContentListToStructuredActivityAfterValidation(list)
UpdateStructuredActivitySectionPointsValues(activity)
DeterminePointValueForActivitySection(group)
ReMapStructuredActivityQuestions(activityID, questionMappings)
GetAllContentListIDsOfExerciseModeLists()
ConvertAllExerciseModeListsToStructuredActivities()
ConvertSpecificExerciseModeListToStructuredActivity(listID)
GetAllStructuredActivityIDs()
CleanUpAllStructuredActivities()
UpdateAllStructuredActivitiesSectionPointsValues()
SetDefaultThumbnailForAllStructuredActivities()
.ctor()
RecalculateAttemptProgress(attemptID)
UpdateAttemptProgress(attemptID, newAnswers)
SaveAttemptProgressItems(attempt, progressItems, fullRefresh)
CreateNewAttemptProgressPlaceholders(attempt)
ConvertActivityAttemptAnswersToProgressItems(answers)
GroupProgressItemsByContentIDAndSection(items)
GroupProgressItemsBySection(items)
DetermineContentIDStatsUpdates(activity, attempt, progressItems, fullRefresh)
DetermineSectionStatsUpdates(activity, attempt, progressItems, questionStatChanges, fullRefresh)
DetermineOverallStatsUpdateChangeForStructuredActivity(activity, attempt, sectionChanges, fullRefresh)
DetermineOverallStatsUpdateChangeForNonStructuredActivity(attempt, questionStatChanges, fullRefresh)
DetermineNewSectionCompletionScores(activity, attempt, sectionStatChanges)
DetermineCompletionEndpointForNonStructuredActivity(activityID)
RecalculateAllAttemptsProgress()
RecalculateAllAttemptsProgressLinkedToHomeworkTasks()
DetermineAttemptCompletionFromFilteredSections(sectionStats, allLessonSectionIDs, optionalSectionIDs, filteredSections)
DetermineAttemptCompletionFromFilteredSections(sectionStats, validSectionIDs)
RecalculateProgressForAllAttemptsForSmartLesson(activityID, ignoreCompletedAttempts, maxAttemptsPerSecond)
RecalculateProgressForAllAttemptsForSmartLesson(activity, ignoreCompletedAttempts, maxAttemptsPerSecond)
.ctor()
.cctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
Clone()
ValueEquals(filter2)
CompareLists(list1, list2)
.ctor()
.ctor()
.ctor()
get_PercentageComplete()
get_TotalTimeTaken()
get_isComplete()
Clone()
FromDynamoDocument(doc)
ToDynamoDocument(attempt)
.ctor()
CopyDataFrom(from)
CleanUpClientData()
FromDynamoDocument(doc)
ToDynamoDocument(answer)
GenerateDynamoPrimaryRangeKey(section, contentID, questionAttemptNumber)
GenerateDynamoPrimaryRangeKeyStub(section, contentID)
GenerateDynamoPrimaryRangeKeyStub(section)
GenerateDynamoLSIMostRecentAnswersRangeKey(section, contentID)
GenerateDynamoLSIMostRecentAnswersRangeKeyStub(section)
.ctor()
FromDynamoDocument(doc)
.ctor()
FromActivityAttempt(attempt)
.ctor()
Clone()
.ctor()
.ctor()
FinaliseAggregatedValues()
get_NumberOfUniqueStudents()
get_MedianTimeTaken()
get_TimeTaken20thPercentile()
get_TimeTaken80thPercentile()
get_TotalSeconds()
calculateTimeTakenCentile(centile)
calculateMedianTimeTaken()
AddAttempt(attempt)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_NumberOfAnswers()
get_Started()
get_TotalTimeTaken()
Clone()
CalculateCompletionScore()
AddData(newData, numberOfAnswers, newNumberRight, newNumberWrong, additionalTimeTaken, additionalTimeTakenForReview)
get_MostRecentAnswerCorrect()
get_isComplete()
FromDynamoDocument(doc)
ToDynamoDocument(stat)
CompareProgress(oldStat, newStat)
.ctor()
get_NumberOfAnswers()
get_TotalTimeTaken()
Clone()
isMostRecenttAnswerCorrect()
AddData(newData, numberOfAnswers, additionalTimeTaken, additionalTimeTakenForReview)
isLearnt(masteryRule)
FromDynamoDocument(doc)
ToDynamoDocument(stat)
GenerateDynamoPrimaryRangeKey(section, contentID)
GenerateDynamoPrimaryRangeKeyStub(section)
CompareProgress(oldStat, newStat)
.ctor()
get_NumberOfNewAnswers()
AddResult(correct)
Clone()
.ctor()
.ctor()
.ctor()
CopyDataFrom(from)
CleanUpClientData()
StripTempVariablesFromQuestionState()
NormaliseQuestionStateAndUsersAnswer()
.ctor()
.ctor()
DeepCopyAllProperties(recipientElement)
FromDynamoDocument(doc)
.ctor()
.ctor()
GetHighestValues()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
CreateDeepCopy()
Clone()
FromUserAndActivitiesLists(userIDs, activityIDs)
ValueEquals(map2)
CompareLists(list1, list2)
.ctor()
.ctor()
.ctor()
.ctor()
CreateJSONSerializationSettings()
Deserialize()
Serialize(activity)
.ctor()
.ctor()
.ctor()
CreateDeepCopy()
DeepCopyAllProperties(recipientElement)
isLearnt(data, numberOfAnswers, questionMasteryRule)
.ctor()
.ctor()
CreateDeepCopy()
.ctor()
CreateDeepCopy()
.ctor()
.ctor()
GetAllReferencedContentIDs()
GetReferencedContentIDsByType(resultsContainer)
DeepCopyAllProperties(recipientElement)
get_NumberOfQuestions()
isAppropriateForAssessment(manualMarking)
DetermineAssessmentSuitabilityBasedOnDefaultRules(manualMarking)
isAppropriateForReviewQuiz()
DetermineReviewQuizSuitabilityBasedOnDefaultRules()
get_isSelfMarked()
get_isValidForUserLearningAlerts()
get_TypeCode()
GetAllReferencedContentIDs()
GetReferencedContentIDsByType(resultsContainer)
DeepCopyAllProperties(recipientElement)
CreateDeepCopy()
GetElementWithID(targetID)
.ctor()
.ctor()
GetAllReferencedContentIDs()
GetReferencedContentIDsByType(resultsContainer)
DeepCopyAllProperties(recipientElement)
CreateDeepCopy()
GetElementWithID(targetID)
GetAllActivityGroups()
GetActivityGroupWithID(ID)
Clone()
Compare(a, b)
.ctor()
.ctor()
CreateDeepCopy()
DeepCopyAllProperties(recipientElement)
GetAllReferencedContentIDs()
get_TotalNumberOfQuestions()
GetAllActivityGroups()
GetAllActivityGroupIDs()
GetActivityGroupWithID(ID)
GetAllOptionalActivityGroups()
GetAllOptionalActivityGroupIDs()
GetTemplateStructuredActivity()
GetID()
GetReferencedContentIDsByType()
CompareSerializedData(a1, a2)
CompareContentIDs(a1, a2)
FindAnyRemovedSectionIDsFromChangedStructure(newActivity, oldActivity)
AreSectionNamesIdentical(newActivity, oldActivity)
DoesChangedStructureRequireStatsUpdates(newActivity, oldActivity)
CreateDeepCopy()
CopyAllProperties(donor, recipient)
CreateJSONSerializationSettings()
OutputSerializedData()
ApplySerializedDataToActivity(activity, data)
DeserializeDataJSONString(data)
SerializeDataToJSON(activity)
SerializeDataToProtobuf(activity)
.ctor()
toStructuredActivity()
.ctor()
Clone()
ValueEquals(filter2)
CompareLists(list1, list2)
.ctor()
get_Items()
set_Items(value)
.ctor()
.ctor(items)
QueryForListOf(sql, parameters, database)
QueryForSingleOrDefault(sql, parameters, database)
QueryForFirstOrDefault(sql, parameters, database)
ExecuteQuery(sql, parameters, database)
Execute(action, name)
Db(database)
.ctor()
GetTask(taskId)
ValidateThatUserHasPrivilegesToEditTask(session, task)
ValidateThatSessionCanMonitorTasks(session, taskIds)
GetTask(taskId)
ValidateThatUserHasPrivilegesToEditTask(session, task)
ValidateThatSessionCanMonitorTasks(session, taskIds)
.ctor()
get_SessionID()
ComputeStringHash(s)
.ctor()
get_Preformatted()
set_Preformatted(value)
Clear()
Write(s)
Write(c)
FlushCurrLine()
ToString()
.ctor()
Equals(obj)
GetHashCode()
.ctor()
.cctor()
.ctor()
<parseWords>b__6_0(m)
<Lookup>b__12_0(x, y)
<Lookup>b__12_1(x, y)
.cctor()
.ctor()
<CompareStrings2>b__1_0(char1, char2)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<Translate>b__0(i)
.cctor()
.ctor()
<Translate>b__3_1(i)
<Translate>b__3_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<Load>b__0_0(context)
<Load>b__0_1(context)
.ctor(<>1__state)
System.IDisposable.Dispose()
MoveNext()
System.Collections.Generic.IEnumerator<T>.get_Current()
System.Collections.IEnumerator.Reset()
System.Collections.IEnumerator.get_Current()
System.Collections.Generic.IEnumerable<T>.GetEnumerator()
System.Collections.IEnumerable.GetEnumerator()
.cctor()
.ctor()
<Median>b__1_0(x)
<Median>b__1_1(n)
.ctor()
<StandardDeviation>b__0(d)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<MarkMultipleNoncesAsConsumed>b__4_0(i)
<MarkMultipleNoncesAsConsumed>b__4_1(i)
.ctor()
<RemoveMultipleNonceRecords>b__0(i)
.ctor(<>1__state)
System.IDisposable.Dispose()
MoveNext()
<>m__Finally1()
System.Collections.Generic.IEnumerator<T>.get_Current()
System.Collections.IEnumerator.Reset()
System.Collections.IEnumerator.get_Current()
System.Collections.Generic.IEnumerable<T>.GetEnumerator()
System.Collections.IEnumerable.GetEnumerator()
.ctor(<>1__state)
System.IDisposable.Dispose()
MoveNext()
System.Collections.Generic.IEnumerator<System.Collections.Generic.IEnumerable<T>>.get_Current()
System.Collections.IEnumerator.Reset()
System.Collections.IEnumerator.get_Current()
System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>.GetEnumerator()
System.Collections.IEnumerable.GetEnumerator()
.ctor(<>1__state)
System.IDisposable.Dispose()
MoveNext()
System.Collections.Generic.IEnumerator<T>.get_Current()
System.Collections.IEnumerator.Reset()
System.Collections.IEnumerator.get_Current()
System.Collections.Generic.IEnumerable<T>.GetEnumerator()
System.Collections.IEnumerable.GetEnumerator()
.cctor()
.ctor()
<Batch>b__15_0(x)
.cctor()
.ctor()
<BatchImpl>b__18_0(x)
.ctor(<>1__state)
System.IDisposable.Dispose()
MoveNext()
<>m__Finally1()
System.Collections.Generic.IEnumerator<TResult>.get_Current()
System.Collections.IEnumerator.Reset()
System.Collections.IEnumerator.get_Current()
System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
System.Collections.IEnumerable.GetEnumerator()
.ctor()
.ctor()
<ExecuteMethodSafely>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ExecuteAsyncMethod>b__0()
.ctor()
<ExecuteAsyncMethod>b__0()
.ctor()
<ExecuteAsyncMethod>b__0()
.ctor()
<ExecuteAsyncMethod>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<StartSTATask>b__0()
.ctor()
<ReadRowsXml>b__0(row)
.ctor(name)
AddConstraint(constraint)
.cctor()
.ctor()
<MergeFacetResults>b__0_0(i)
<MergeFacetResults>b__0_1(i)
.cctor()
.ctor()
<PrimeLookaheads>b__14_0(i)
<SuggestCorrection>b__15_0(x)
<SuggestCorrection>b__15_1(x)
.cctor()
.ctor()
<SortPropertiesAlphabetically>b__1_0(p)
.cctor()
.ctor()
<.ctor>b__2_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<TransferAllMessages>b__1_0(i)
<TransferAllMessages>b__1_1(i)
<AddMessagesToQueueAsync>b__3_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ExecuteQueuedRequests>b__0()
.ctor()
<ExecuteQueuedRequestsAsync>b__0(ex)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ExecuteQueuedRequests>b__0()
.ctor()
<ExecuteQueuedRequestsAsync>b__0(ex)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCurrentNews>b__0()
.cctor()
.ctor()
<InternalExecuteSQLEmailTask>b__7_0(message)
.ctor(object, method)
Invoke()
BeginInvoke(callback, object)
EndInvoke(result)
.ctor(object, method)
Invoke(sender, e)
BeginInvoke(sender, e, callback, object)
EndInvoke(result)
.ctor()
.ctor()
.ctor()
.cctor()
.ctor()
<StoreSQLEmailTask>b__19_0(ts)
<GetAllSQLEmailTasks>b__21_0(task)
<GetAllSQLEmailTasks>b__21_1(task)
<GetValidSenders>b__27_0(q)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetOverallAwards>b__0()
.cctor()
.ctor()
<GetWorldChampsPartners>b__0_0()
<GetAssociationPartners>b__1_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetFilteredAssociationPartners>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
<GetReportDefinitionsForUser>b__1(id)
.cctor()
.ctor()
<GetReportDefinitionsForUser>b__9_0(def)
<GroupReportDefinitionsWithRecordCounts>b__13_0(count)
.ctor()
<GetReportDefinition>b__0(def)
.ctor()
.ctor()
.cctor()
.ctor()
<AttachProblemToReportedContent>b__2_0(id)
<GetReportedFlags>b__3_0(f)
.ctor()
<LoadContentTranslationsAsReportedTranslations>b__0(t)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SetEnvironmentsWhetherModuleOnly>b__11_0(e)
<SetEnvironmentsWhetherModuleOnly>b__11_1(e)
<SetEnvironmentsWhetherModuleOnly>b__11_2(e)
<SetEnvironmentsWhetherModuleOnly>b__11_3(e)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ExtractCompositeListsFromThisContentSet>b__2(list)
<ExtractCompositeListsFromThisContentSet>b__4(list)
.cctor()
.ctor()
<ExtractCompositeListsFromThisContentSet>b__5_0(structures)
<ExtractCompositeListsFromThisContentSet>b__5_1(structures, contents)
<ExtractCompositeListsFromThisContentSet>b__5_3(compList)
<ExtractCompositeListsFromThisContentSet>b__5_5(list)
<LoadSourceListsForModule>b__6_0(result)
<LoadSourceListsForModule>b__6_1(result)
<LoadContentSetForSentence>b__7_0(structure)
<LoadContentSetForSentence>b__7_1(structure, contents)
<CompileSpecificSentenceLists>b__16_0(i)
<CompileSpecificSentenceLists>b__16_1(i)
<CompileSpecificSentenceLists>b__16_2(i)
<CompileSpecificSentenceLists>b__16_3(i)
<CompileSpecificSentenceLists>b__16_4(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSpecificSentenceLists>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
get_IsValid()
get_ValidationErrors()
AddValidationError(error)
.ctor()
.ctor(message, missingListIDs)
.cctor()
.ctor()
<get_ContributingContentListsDictionary>b__15_0(l)
<get_CompositeListsDictionary>b__17_0(list)
<ValidateStructuresReferenceTheSameCompositeLists>b__20_0(structure)
<ValidateSentenceStructuresAreUnique>b__22_0(ss)
<ValidateSentenceStructuresAreUnique>b__22_1(item)
<ValidateSentenceStructuresAreUnique>b__22_2(structures)
<ValidateAllPositionsAreUtilisedByAllStructures>b__24_0(structure)
<ValidateAllPositionsAreUtilisedByAllStructures>b__24_1(structure, content)
<ValidateAllPositionsAreUtilisedByAllStructures>b__24_2(c)
<ValidateAllPositionsAreUtilisedByAllStructures>b__24_3(c)
<ValidateAllPositionsAreUtilisedByAllStructures>b__24_4(grp)
<ValidateAllPositionsAreUtilisedByAllStructures>b__24_5(grp)
<ValidateSentenceStructuresExcludeOtherLanguages>b__26_1(s)
<ValidateSentenceUsesProvidedCompositeListsOnly>b__27_0(list)
<get_SentenceStructureContentsFlattened>b__29_0(structure)
<get_SentenceStructureContentsFlattened>b__29_1(structure, content)
<get_UniqueCompositeListIDs>b__33_0(content)
<get_RealCompositeListIDs>b__35_0(id)
<get_NewCompositeListIDs>b__37_0(id)
<InsertOrUpdateSentenceStructures>b__40_0(oldSS)
<InsertOrUpdateSentenceStructures>b__40_1(newSS)
<InsertOrUpdateSentenceStructures>b__40_2(structure)
<InsertOrUpdateSentenceStructures>b__40_3(structure, content)
<InsertOrUpdateSentenceStructureContents>b__41_0(oldSSC)
<InsertOrUpdateSentenceStructureContents>b__41_1(newSSC)
<IDsToCommaSeparatedString>b__50_0(id)
.ctor()
<ValidateAllCompositeListsReferenceValidTranslationListsOrTranslations>b__0(id)
.ctor()
.cctor()
.ctor()
<GetAllCompositeListIDs>b__10_0(i)
.cctor()
.ctor()
<get_CompositeListsKey>b__11_0(content)
<get_CompositeListsKey>b__11_1(content)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetAllLanguages>b__8_0()
<GetAllLanguages>b__8_1(i)
<GetLanguagesForScoreboard>b__10_0()
<GetLanguagesForScoreboard>b__10_1(language)
<GetLanguagesDictionary>b__12_0()
<GetLanguagesDictionary>b__12_1(lang)
<GetLanguagesDictionaryAsync>b__13_0()
<GetLanguagesDictionaryAsync>b__13_1(lang)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<IsValidBaseLanguage>b__0(language)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetBaseLanguageOptions>b__0(lang)
.ctor()
<GetScriptCollationsDictionary>b__0()
.cctor()
.ctor()
<GetScriptCollationsDictionaryFromServer>b__4_0(script)
<GetScriptCollationsDictionaryFromServer>b__4_1(script)
.ctor(brandName, domainName, logoUrl)
get_DomainName()
set_DomainName(value)
get_BrandName()
set_BrandName(value)
get_BaseUrl()
set_BaseUrl(value)
get_LogoUrl()
set_LogoUrl(value)
get_HomePageUrl()
set_HomePageUrl(value)
.ctor()
<GetBrandIDFromSubject>b__0(i)
.cctor()
.ctor()
<GetBrandIDFromSubject>b__15_1(i)
<GetBrandIDFromDepartment>b__16_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetBrandIDFromDepartment>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetSummary>b__4_0(t)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ResumeIncompleteTestAttempt>b__4_0(i)
<ResumeIncompleteTestAttempt>b__4_1(i)
<ResumeIncompleteTestAttempt>b__4_2(i)
<SpoofCompiledTestFromNewSchemaTestInfo>b__7_0(i)
<UpdateTestAnswers>b__8_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetTest>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<OutputRelevantListsForTests>b__32_0(i)
<CompileTest>b__35_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCompiledTest>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCurrentModuleEnvironment>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SendAlertToTeachersInSchools>b__0(item)
.ctor()
<SendAlertToTeachersInSchools>b__1(user)
.cctor()
.ctor()
<SendAlertToTeachersInSchools>b__5_2(item)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<EnsureThatBackgroundCheckerIsRunning>b__13_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
get_TaskId()
set_TaskId(value)
get_MonitoringEventsArchivalStatus()
set_MonitoringEventsArchivalStatus(value)
get_MonitoringEventsStorageLocation()
set_MonitoringEventsStorageLocation(value)
.ctor()
.ctor()
<GetStatuses>b__0(entity)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
<SubmitStatusUpdate>b__0(ev, sequenceID)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<RemoveDuplicateEvents>b__22_0(ev)
<CleanUpTaskMonitoringForExpiredTasks>b__25_0(i)
<IdentifyAndApplyMissingEvents>b__32_0(e)
<IdentifyAndApplyMissingEvents>b__32_2(e)
<IdentifyAndApplyMissingEvents>b__32_3(e)
<.cctor>b__35_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<IdentifyAndApplyMissingEvents>b__1(e, i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<RemoveDuplicateEventEntities>b__0_0(ev)
get_MaxResultCount()
set_MaxResultCount(value)
.ctor()
.ctor(taskId, laterThan, userId, sessionId, lastN)
.ctor(taskId)
.ctor(status)
.ctor()
<GetEvents>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetStatuses>b__0(status)
.cctor()
.ctor()
<GetStatuses>b__5_1(doc)
<SubmitEvents>b__7_0(i)
<DeleteEvents>b__8_0(e)
<DeleteStatuses>b__9_0(s)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SubmitEvents>b__1(e)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetEvents>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DeleteExistingAndAddEventsForTask>b__0(e)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
toMetrics()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateCheatingMetricsForList>b__2_0(i)
<GenerateCheatingMetricsForList>b__2_1(i)
<GenerateLanguageSpecificMetrics>b__3_0(i)
<CalculateAverageDifferenceBetweenListOfWords>b__4_0(i)
<GetCheatingMetricsFromDB>b__8_0(i)
<GenerateCheatingDistribution>b__14_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
<PopulateModuleContentContainer>b__0(i)
<PopulateModuleContentContainer>b__1(i)
.cctor()
.ctor()
<PopulateModuleContentContainer>b__0_2(i)
<CompileSpecificContentLists>b__4_0(i)
<CompileSpecificContentLists>b__4_1(i)
<CompileSpecificContentLists>b__4_2(i)
<CompileSpecificContentLists>b__4_3(i)
<CompileSpecificContentLists>b__4_4(i)
<CompileSpecificTranslationLists>b__5_0(t)
<CompileSpecificTranslationLists>b__5_1(i)
<CompileSpecificTranslationLists>b__5_2(l)
<CompileSpecificTranslationLists>b__5_4(s)
<RetrieveContentIDsForSpecificContentLists>b__11_0(i)
<RetrieveContentIDsForSpecificContentLists>b__11_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CompileSpecificTranslationLists>b__3(i)
<CompileSpecificTranslationLists>b__5(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor(object, method)
Invoke(listID)
BeginInvoke(listID, callback, object)
EndInvoke(result)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<UpdateContentList>b__6_0(s)
<ValidateThatSessionCanModifySpecificContentLists>b__24_0(r)
<ValidateThatSessionCanModifySpecificContentListsAsync>b__26_0(r)
<ModifyTranslationListContent>b__36_0(t)
<ModifyTranslationListContent>b__36_1(t)
<IdentifyDirtyTranslations>b__37_0(def, index)
<IdentifyDirtyTranslations>b__37_1(indexedDef)
<GetSpecificContentLists>b__72_1(i)
<RemoveMultipleContentListsFromCache>b__78_0(listID)
<RemoveMultipleContentListsFromCacheAsync>b__79_0(listID)
<GetEstimatedTimesForMultipleContentLists>b__93_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<RenameContentListInModule>b__0(m)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CreateTranslationListsFromTranslationsForCreation>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetContentList>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSpecificContentLists>b__0(i)
<GetSpecificContentLists>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetEstimatedTimesForMultipleContentLists>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetLTIProviderIDForSchool>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetLTIProviderByConsumerKey>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetAllSchoolSSODetailsInternal>b__10_0()
<GetSearchableSchoolSSODetails>b__21_0()
<GenerateSearchableSchoolDetails>b__22_0(i)
<GenerateSearchableSchoolDetails>b__22_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAuthenticationProviderID>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.cctor()
.ctor()
<.cctor>b__1_0()
<CompileSoundFileDataForSpecificDefinitions>b__5_0(i)
<CompileSoundFileDataForSpecificDefinitions>b__5_1(i)
<GetIDsOfRomajiDefinitionsWithElectronicSoundFiles>b__29_0(i)
<GetIDsOfRomajiDefinitionsWithElectronicSoundFiles>b__29_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<StoreSpeaker>b__0(d)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<DeleteAllExpiredPromises>b__7_0(i)
<GetAllExpiredPromiseIDs>b__8_0(doc)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetMultipleSessions>b__10_0(i)
<GetMultipleSessions>b__10_1(doc)
<SaveMultipleSessions>b__12_0(i)
<DeleteSessions>b__21_0(i)
<GetAllCurrentSessions>b__23_0(doc)
<GetAllCurrentLPSessions>b__24_0(i)
<GetAllCurrentLPSessionsForSchool>b__25_0(i)
<GetAllSessionIDsForUser>b__29_0(result)
<GetAllCurrentLPSessionsForUser>b__32_0(i)
<GetUserSessionCounts>b__33_1(i)
<GetUserSessionCounts>b__33_2(i)
<GetUserSessionCounts>b__33_3(i)
<GetExpiredSessionIDs>b__34_0(i)
<GetExpiredSessionIDs>b__34_1(i)
<GetExpiredSessionIDs>b__34_2(doc)
<MigrateAllRecordsFromOldTable>b__36_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserSessionCounts>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetUserSessionCounts>b__20_0(i)
<GetUserSessionCounts>b__20_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
<StoreUserPermissions>b__0(code)
.cctor()
.ctor()
<GetPermissionTemplatesFromDatabase>b__2_0(t)
<GetPermissionTemplatesFromDatabase>b__2_1(t)
.ctor()
<GetPermissionTemplateDescriptionForUser>b__0(t)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetAllCurrentLPSessionsAfterValidation>b__1_0()
<GetCurrentLPSessionCount>b__9_0()
<GetCurrentLPSessionCountForAdmins>b__10_0(i)
<GetCurrentLPSessionCountForSchool>b__11_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCurrentLPSessionSummariesForSchoolAfterValidation>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCurrentLPSessionCount>b__1()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCurrentLPSessionsForSpecificUsersAndSubjectsAfterValidation>b__0(i)
<GetCurrentLPSessionsForSpecificUsersAndSubjectsAfterValidation>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSessionData>b__0()
.ctor()
<GetSessionDataAsync>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetMultipleSessions>b__34_0(i)
<GetMultipleSessions>b__34_1(i)
<EndOtherActiveSessionsForUser>b__64_0(i)
<EndOtherActiveSessionsForUser>b__64_1(i)
<GetUserSessionCounts>b__70_0(i)
<GetUserSessionCounts>b__70_1(i)
<GetListOfOnlineUsersInMySchool>b__74_0(i)
<GetListOfOnlineUsersInMySchool>b__74_1(i)
<EndAllSessionsForUser>b__81_0(i)
<EndAllCurrentSessions>b__82_0(i)
<EndAllCurrentSessions>b__82_1(i)
<EndAllSessionsForDeviceSession>b__83_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAllCurrentLPSessionsForSchool>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
get_SchoolID()
set_SchoolID(value)
get_DataSetID()
set_DataSetID(value)
get_DataSetGroupID()
set_DataSetGroupID(value)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SetSmartLessonAttempts>b__4(i)
.cctor()
.ctor()
<SetSmartLessonAttempts>b__3_0(i)
<SetSmartLessonAttempts>b__3_1(i)
<SetSmartLessonAttempts>b__3_2(i)
<SetSmartLessonAttempts>b__3_3(i)
<SetListsAndContent>b__7_2(i)
<SetListsAndContent>b__7_5(i)
<CompileListOfAllTargetContentListIDs>b__8_0(i)
<CompileListOfAllTargetContentListIDs>b__8_1(i)
<CompileListOfAllTargetContentListIDs>b__8_2(i)
<CompileListOfAllTargetContentListIDs>b__8_3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SetListsAndContent>b__0(i)
<SetListsAndContent>b__1(i)
<SetListsAndContent>b__3(i)
<SetListsAndContent>b__4(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
<DetermineActivityDescription>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSingleSignOnProvider>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FindOrCreateClassIDForTutorGroup>b__0(c)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SetClassSubjects>b__12_0(i)
<SetClassSubjects>b__12_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<AttemptValidatedLicencedLogin>b__16_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
System.Collections.Generic.IComparer<nz.co.LanguagePerfect.Services.LPLogin.BusinessObjects.WordListOptionData>.Compare(ObjectA, ObjectB)
.ctor()
.ctor()
.ctor()
<GetTableDescription>b__0()
.ctor()
<GetTableDescriptionAsync>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetGlobalSecondaryIndexThroughputCapacityAsync>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<BatchIDsByProximity>b__21_0(i)
.cctor()
.ctor()
<BatchIDsIntoSetSizeGroups>b__22_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<PerformWorkForRateLimitedTableScan>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AddOrRemoveModuleToTemplates>b__0(schoolID)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SetSchoolContentTemplatesAfterValidation>b__0(moduleID)
<SetSchoolContentTemplatesAfterValidation>b__1(moduleID)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AddModuleToTemplateAfterValidation>b__0(schoolID)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor(Order)
Compare(x, y)
.cctor()
.ctor()
<ApplyApproxProperCase>b__2_0(c)
.cctor()
.ctor()
<PrepareCertificatesForCompetition>b__19_0(i)
<PrepareCertificatesForCompetition>b__19_1(i)
<PrepareCertificatesForCompetition>b__19_2(i)
<PrepareCertificatesForCompetition>b__19_3(i)
<PrepareCertificatesForCompetition>b__19_4(i)
<PrepareCertificatesForCompetition>b__19_5(i)
<PrepareCertificatesForCompetition>b__19_6(j)
<PrepareTeacherCertificationCertificates>b__20_0(school)
<PrepareTeacherCertificationCertificates>b__20_1(cert)
<PrepareTeacherCertificationCertificates>b__20_2(schoolID)
<PrepareTeacherCertificationCertificates>b__20_3(cert)
<PrepareTeacherCertificationCertificates>b__20_4(fname)
<GenerateCongratulationsLetters>b__24_0(i)
<GenerateCongratulationsLetters>b__24_1(i)
<GenerateCongratulationsLetters>b__24_2(i)
<GenerateCongratulationsLetters>b__24_3(i)
<GenerateCongratulationsLetters>b__24_4(j)
<FormatSchoolCoverCertificates>b__28_0(i)
<FormatSchoolCoverCertificates>b__28_1(i)
<PrepareCertificationSummaryForExport>b__30_0(i)
<PrepareCertificationSummaryForExport>b__30_1(i)
<PrepareCertificationSummaryForExport>b__30_2(i)
<PrepareCertificationSummaryForExport>b__30_5(t)
<GetAndFormatSpecialCertificateData>b__34_0(i)
<GetAndFormatSpecialCertificateData>b__34_2(i)
<GetAndFormatSpecialCertificateData>b__34_3(i)
<GetAndFormatSpecialCertificateData>b__34_4(i)
<GenerateAddressLabels>b__40_0(i)
<GenerateAddressLabels>b__40_1(i)
<GenerateAddressLabels>b__40_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateCongratulationsLetters>b__5(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<PrepareCertificationSummaryForExport>b__3(t)
<PrepareCertificationSummaryForExport>b__4(t)
.cctor()
.ctor()
<CalculateFileIndexForStudentCertificates>b__31_0(cert)
<CalculateFileIndexForStudentCertificates>b__31_1(cert)
<CalculateFileIndexForStudentCertificates>b__31_2(cert)
<CalculateFileIndexForStudentCertificates>b__31_3(i)
<CalculateFileIndexForStudentCertificates>b__31_4(i)
<CalculateFileIndexForStudentCertificates>b__31_5(i)
<CalculateFileIndexForStudentCertificates>b__31_6(i)
<CalculateFileIndexForStudentCertificates>b__31_7(i)
<CalculateFileIndexForStudentCertificates>b__31_8(s)
<CalculateFileIndexForStudentCertificates>b__31_9(s)
<CalculateFileIndexForStudentCertificates>b__31_10(i)
<CalculateFileIndexForStudentCertificates>b__31_11(i)
.ctor()
<GetAndFormatSpecialCertificateData>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ChooseRandomPrizeDrawWinners>b__0(i)
.ctor()
.ctor()
<ChooseRandomPrizeDrawWinners>b__1(j)
.ctor()
<ChooseRandomPrizeDrawWinners>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSchoolDetailsForAddressLabels>b__1(i)
<GetSchoolDetailsForAddressLabels>b__3(i)
<GetSchoolDetailsForAddressLabels>b__5(i)
.cctor()
.ctor()
<GetSchoolDetailsForAddressLabels>b__39_0(i)
<GetSchoolDetailsForAddressLabels>b__39_2(i)
<GetSchoolDetailsForAddressLabels>b__39_4(i)
<GetSchoolDetailsForAddressLabels>b__39_6(i)
<GetSchoolDetailsForAddressLabels>b__39_7(i)
<GetSchoolDetailsForAddressLabels>b__39_8(i)
<GetSchoolDetailsForAddressLabels>b__39_9(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CalculateLabelsAndPostageTypePerSchool>b__0(i)
.ctor(key, value)
get_PlainTextDescriptionExtract()
.ctor()
.ctor()
<GetCompetitionAndSchoolsInfo>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCompetitionDetails>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetRelevantCompetitionsForUser>b__3(i)
.cctor()
.ctor()
<GetRelevantCompetitionsForUser>b__25_0(i)
<GetRelevantCompetitionsForUser>b__25_1(i)
<GetRelevantCompetitionsForUser>b__25_2(i)
<GetRelevantCompetitionsForUser>b__25_4(i)
<GetRelevantCompetitionsForUser>b__25_5(i)
<SendCompetitionInvitations>b__36_1(item)
<GetInvitationRecipientInfos>b__47_0(x)
<GenerateCompetitionCodeFromName>b__51_0(word)
<ResendInvitationEmailsForCompetition>b__57_0(x)
<ResendInvitationEmailsForCompetition>b__57_1(x)
<ResendInvitationEmailsForCompetition>b__57_2(x)
<ResendInvitationEmailsForCompetition>b__57_3(x)
<ResendInvitationEmailsForCompetition>b__57_4(x)
<GenerateTimeLimitsForCompetition>b__79_0(timePeriod)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SendCompetitionInvitations>b__0(item)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCompetitionMiletones>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCompetitionMilestonesWithCounts>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetFeedbackForTeacherOrAdminAfterValidation>b__0()
<GetFeedbackForTeacherOrAdminAfterValidation>b__1()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetFeedbackForTeacherFromDatabase>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetFeedbackByUserFilterForSubjectsInTimePeriodAfterValidation>b__0(i)
<GetFeedbackByUserFilterForSubjectsInTimePeriodAfterValidation>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AddInAppFeedback>b__0(session)
.ctor()
<GetFeedbackFilters>b__0()
.ctor()
<GetFeedbackFiltersAsync>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<getWordCounts>b__35_0(i)
<getNumericCharacterCount>b__37_0(c)
<IdentifyNonsensicalComment>b__38_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.cctor()
.ctor()
<.ctor>b__2_0()
<.ctor>b__2_1()
<.ctor>b__2_2()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
get_FirstName()
set_FirstName(value)
get_LastName()
set_LastName(value)
get_Email()
set_Email(value)
FromUser(user)
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateTeacherRecipientsForTask>b__5_0(recipient)
<GenerateTeacherRecipientsForTask>b__5_1(s)
<GenerateAssessmentTeacherNotificationModel>b__13_0(question)
<GenerateAssessmentTeacherNotificationModel>b__13_1(question)
<GenerateAssessmentTeacherNotificationModel>b__13_3(i)
<GenerateAssessmentTeacherNotificationModel>b__13_4(i)
<CreateHTMLTaskUsersDescription>b__22_0(c)
<SendStudentNotificationEmailAboutTask>b__30_0(i)
<SendStudentNotificationEmailAboutTask>b__30_1(i)
<SendStudentNotificationEmailAboutTask>b__30_2(i)
<SendStudentNotificationEmailAboutTask>b__30_3(i)
<SendStudentNotificationEmailAboutTask>b__30_4(i)
<GenerateTeacherNotificationAboutEmailsToStudentEmailTemplateModel>b__32_0(i)
<SendStudentNotificationEmailAboutAssessmentTask>b__34_0(i)
<SendStudentNotificationEmailAboutAssessmentTask>b__34_1(i)
<SendStudentNotificationEmailAboutAssessmentTask>b__34_2(i)
<SendStudentNotificationEmailAboutAssessmentTask>b__34_3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateTeacherNotificationForTaskModelCommon>b__9(stat)
.cctor()
.ctor()
<GenerateTeacherNotificationForTaskModelCommon>b__8_0(i)
<GenerateTeacherNotificationForTaskModelCommon>b__8_1(i)
<GenerateTeacherNotificationForTaskModelCommon>b__8_2(i)
<GenerateTeacherNotificationForTaskModelCommon>b__8_3(i)
<GenerateTeacherNotificationForTaskModelCommon>b__8_4(i)
<GenerateTeacherNotificationForTaskModelCommon>b__8_5(question)
<GenerateTeacherNotificationForTaskModelCommon>b__8_6(question)
<GenerateTeacherNotificationForTaskModelCommon>b__8_7(stat)
<GenerateTeacherNotificationForTaskModelCommon>b__8_8(stat)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateAssessmentTeacherNotificationModel>b__2(stat)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateTeacherNotificationAboutEmailsToStudentEmailTemplateModel>b__1(student)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.cctor()
.ctor()
<GenerateLearnContentTaskProgressStats>b__6_0(i)
<GenerateLearnContentTaskProgressStatsForUserAndSpecificTasks>b__12_0(i)
<GenerateDataForCompleteActivityTaskUserProgressSnapshot>b__15_1(i)
<GenerateDataForCompleteActivityTaskUserProgressSnapshot>b__15_2(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_0(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_1(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_2(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_3(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_4(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_5(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_6(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_7(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_8(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_9(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_10(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_11(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_12(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_13(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_14(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_16(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_18(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_19(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_20(i)
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__21_21(i)
<GetStudentIDsInMultipleTasks>b__25_0(i)
<GetStudentIDsInMultipleTasks>b__25_1(i)
<GetStudentIDsInMultipleTasks>b__25_2(i)
<GetTaskProgressOverviewsFromSnapshots>b__27_0(t)
<GetUserTaskLiveUserProgressForCompleteActivityTask>b__28_1(s)
<GetUserTaskLiveUserProgressForCompleteActivityTask>b__28_2(s)
<GetUserTaskLiveUserProgressForCompleteActivityTask>b__28_3(i)
<GetUserTaskLiveUserProgressForCompleteActivityTask>b__28_4(i)
<GetUserTaskLiveUserProgressForLearnContentTask>b__29_0(r)
<GetUserTaskLiveUserProgressForEarnPointsTask>b__30_0(r)
<GetMostDifficultQuestionsForTask>b__32_0(i)
<GetUserStatsForLearnContentTask>b__36_1(a, b)
<GetUserStatsForEarnPointsTask>b__37_1(a, b)
<GetUserStatsForAssessmentTask>b__38_0(a, b)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_0(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_2(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_3(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_4(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_5(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_6(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_7(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_8(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_9(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_10(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_12(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_13(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__43_14(a, b)
<GetProgressReportInfoForCompleteActivityTask>b__50_0(i)
<GetProgressReportInfoForCompleteActivityTask>b__50_1(i)
<CheckWhetherSmartLessonReportHasNewData>b__53_1(i)
<CheckWhetherSmartLessonReportHasNewData>b__53_2(i)
<CheckWhetherSmartLessonReportForSpecificUserHasNewData>b__55_0(i)
<GetAnswerReviewsReportForCompleteActivityTask>b__57_0(i)
<GetMultipleHomeworkTasksSummaryReportForClasses>b__70_0(task)
<GetMultipleHomeworkTasksSummaryReportForClasses>b__70_1(i)
<GetMultipleHomeworkTasksSummaryReportForClasses>b__70_2(i)
<GetMultipleHomeworkTasksSummaryReportForClasses>b__70_3(i)
<GetMultipleHomeworkTasksSummaryReportForClasses>b__70_4(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_0(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_1(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_2(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_3(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_4(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_5(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_6(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_7(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_8(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_9(a, b)
<GetMultipleHomeworkTasksSummaryReport>b__71_10(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_11(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_12(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_13(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_14(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_15(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_16(i)
<GetMultipleHomeworkTasksSummaryReport>b__71_17(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateDataForCompleteActivityTaskUserProgressSnapshot>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__15(i)
.ctor()
<GetTaskProgressOverviewForCompleteActivityTasksFromLiveData>b__17(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserTaskLiveUserProgressForCompleteActivityTask>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserStatsForLearnContentTask>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserStatsForEarnPointsTask>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserStatsForCompleteActivityTaskFromLiveData>b__1(i)
<GetUserStatsForCompleteActivityTaskFromLiveData>b__11(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetProgressReportInfoForAssessmentTask>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CheckWhetherSmartLessonReportHasNewData>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<UpdateTaskSubjectLookups>b__14_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
get_AverageTime80thPercentileOrDefault()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetCurrentTasksBaseDataForUser>b__8_0(i)
<GetCurrentTasksBaseDataForUser>b__8_1(i)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__19_2(dir)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__19_6(i)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__19_7(stat)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__19_8(i)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__19_9(i)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__19_10(i)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__19_11(dir)
<RetrieveMultipleCompleteActivityTasksInfoForUserFromDatabase>b__22_0(i)
<RetrieveMultipleCompleteActivityTasksInfoForUserFromDatabase>b__22_1(i)
<RetrieveMultipleCompleteActivityTasksInfoForUserFromDatabase>b__22_2(i)
<GetTasksOwnedByUser>b__23_0(i)
<GetTasksOwnedByUser>b__24_0(i)
<GetTasksForClassesAndSubjectsAfterValidation>b__29_0(i)
<DetermineNumberOfActivitySubtypesThatRequireSoundFiles>b__54_0(direction)
<UpdateNotificationsForTask>b__55_0(notification)
<UpdateNotificationsForTask>b__55_1(notification)
<UpdateNotificationsForTask>b__55_2(notification)
<UpdateNotificationsForTask>b__55_3(notification)
<UpdateNotificationsForTask>b__55_4(notification)
<ValidateThatUserHasPrivilegesToViewMultipleTasksData>b__60_1(i)
<ModifyCompleteActivityTaskSpecificData>b__71_0(i)
<ModifyCompleteActivityTaskSpecificData>b__71_1(i)
<GetTargetContentInfoForTask>b__98_0(i)
<GetTargetContentInfoForTask>b__98_1(i)
<GetTargetContentInfoForTask>b__98_2(l)
<GetTargetContentInfoForTask>b__98_3(l)
<GetTargetContentInfoForTask>b__98_4(l)
<GetTargetContentInfoForTask>b__98_5(l)
<AttachUserProgressToMultipleAssessmentTasksForUser>b__114_0(i)
<AttachUserProgressToMultipleAssessmentTasksForUser>b__114_1(i)
<AttachUserProgressToMultipleCompleteActivityTasksForUser>b__119_1(task)
<DetermineProgressForCompleteActivityResults>b__120_0(i)
<DetermineProgressForCompleteActivityResults>b__120_1(i)
<DetermineProgressForCompleteActivityResults>b__120_2(i)
<DetermineProgressForCompleteActivityResults>b__120_3(i)
<DetermineProgressForCompleteActivityResults>b__120_4(i)
<DetermineProgressForCompleteActivityResults>b__120_5(i)
<DetermineProgressForCompleteActivityResults>b__120_6(i)
<DetermineProgressForCompleteActivityResults>b__120_7(i)
<GetMultipleUserTasks>b__136_0(i)
<GetMultipleUserTasks>b__136_1(i)
<GetMultipleUserTasks>b__136_2(i)
<CacheMultipleUserTasks>b__137_0(i)
<EstimateTimeForCompleteActivityTask>b__147_0(i)
<EstimateTimeForCompleteActivityTask>b__147_1(i)
<GetCurrentAssessmentAttemptDetailsForAssessmentTasks>b__171_0(i)
<GetCurrentAssessmentAttemptDetailsForAssessmentTasksAfterValidation>b__172_0(i)
<GetUserOnlineStatusForTaskAfterValidation>b__180_0(i)
<GetUserOnlineStatusForTaskAfterValidation>b__180_1(i)
<GetUserOnlineStatusForTaskAfterValidation>b__180_2(i)
<GetUserOnlineStatusForTaskAfterValidation>b__180_3(j)
<RemoveDemoTasksFromCache>b__192_0(i)
<RemoveTasksForClassesFromCache>b__196_0(i)
<RemoveTasksForClassesFromCache>b__196_1(i)
<RemoveTasksForClassesFromCache>b__196_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetMultipleTaskDataForUser>b__9_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserTaskListProgressDetails>b__0()
<GetUserTaskListProgressDetails>b__1()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__0(translationDirection)
.ctor()
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__1(dir)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__3(i)
.ctor()
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__4(stat)
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__5(i)
.ctor()
<GetLearnContentAndEarnPointsTaskListDetailsAfterValidation>b__12(dir)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ValidateThatUserHasPrivilegesToViewMultipleTasksData>b__0(task)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetTask>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAssessmentTask>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetEarnPointsTask>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetLearnContentTask>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCompleteActivityTask>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserProgressForCompleteActivityTaskAfterValidation>b__0(i)
.ctor()
<GetUserProgressForCompleteActivityTaskAfterValidation>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AttachUserProgressToMultipleCompleteActivityTasksForUser>b__0(i)
<AttachUserProgressToMultipleCompleteActivityTasksForUser>b__2(i)
.ctor()
<AttachUserProgressToMultipleCompleteActivityTasksForUser>b__3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSpecificTasks>b__0(i)
<GetSpecificTasks>b__1(i)
<GetSpecificTasks>b__2(i)
<GetSpecificTasks>b__3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FindExistingActivityAttemptsForCompleteActivityTask>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<UpdateCompleteActivityTaskToReferenceMostRecentActivityAttempts>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ConvertToSmartLessonSectionFilters>b__3_0(i)
<ConvertToSmartLessonSectionFilters>b__3_1(i)
<ConvertToSmartLessonSectionFilters>b__3_2(j)
.ctor()
<FromSmartLessonSectionFilters>b__0(i)
.ctor()
<FromSmartLessonSectionFilters>b__1(j)
.ctor()
<FilterTaskDataForSpecificUser>b__0(i)
<FilterTaskDataForSpecificUser>b__1(i)
.cctor()
.ctor()
<ToCompleteActivityTaskSpecificData>b__15_0(i)
<ToCompleteActivityTaskSpecificData>b__15_1(i)
<Clone>b__16_0(i)
<Clone>b__16_1(i)
<GetUsersAssociatedWithActivity>b__20_1(i)
.ctor()
<GetActivityIDsForUser>b__0(i)
.ctor()
<GetFilteredSectionsForActivity>b__0(i)
.ctor()
<GetUsersAssociatedWithActivity>b__0(i)
.cctor()
.ctor()
<ConvertToMapItems>b__4_0(i)
<ConvertToMapItems>b__4_1(i)
<ConvertToMapItems>b__4_2(i)
<ConvertToMapItems>b__4_3(i)
<ConvertToMapItems>b__4_4(j)
.ctor()
<FromMapItems>b__0(i)
.ctor()
<FromMapItems>b__1(j, index)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetPeriod>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetNextTargetPeriodIDForConfirmation>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateSelfConfirmationPrompts>b__21_0(rd)
<GenerateSelfConfirmationPrompts>b__21_1(rd)
<GetRevenueSelfConfirmationData>b__22_0(p)
<GetRevenueSelfConfirmationData>b__22_1(dept)
<GetRevenueSelfConfirmationData>b__23_0(p)
<GetRevenueSelfConfirmationData>b__23_1(dept)
<GetHighLevelUsageMetricsForDepartmentFromSalesPeriod>b__24_1(subj)
<StoreEligibilityStatusChangesForDepartment>b__32_0(i)
<StoreEligibilityStatusChangesForDepartmentAfterValidation>b__33_0(i)
<StoreEligibilityStatusChangesForDepartmentAfterValidation>b__33_1(i)
<StoreEligibilityStatusChangesForDepartmentAfterValidation>b__33_2(i)
<StoreEligibilityStatusChangesForDepartmentAfterValidation>b__33_3(i)
<FormatRevenueDetailLineItems>b__40_0(i)
<FormatRevenueDetailLineItems>b__40_1(i)
<FormatRevenueDetailLineItems>b__40_2(s)
<FormatRevenueDetailLineItems>b__40_3(s)
<StoreRevenueDetails>b__43_0(detail)
<StoreRevenueDetails>b__43_2(sp)
<StoreRevenueDetails>b__43_3(sp)
<StoreRevenueDetails>b__43_4(sp)
<StoreRevenueDetails>b__43_5(detail)
<GenerateResubscriptionReminderEmailsForTeachers>b__49_0(c)
<GenerateResubscriptionReminderEmailsForTeachers>b__49_1(c)
<GenerateResubscriptionPromptModel>b__50_0(rev)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetRevenueSelfConfirmationData>b__2(rev)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetRevenueSelfConfirmationData>b__2(rev)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetHighLevelUsageMetricsForDepartmentFromSalesPeriod>b__0(subj)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetPublicRevenueDetailsForTeacher>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<StoreRevenueDetails>b__1(sp)
.ctor()
.ctor()
<StoreRevenueDetails>b__7(rec)
.ctor()
.ctor()
<StoreRevenueDetails>b__6(d)
.ctor()
<StoreRevenueDetails>b__8(newDetail)
.ctor()
<GetItemCodesWithRevenueType>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateResubscriptionPromptModel>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CreateActionLinkParameters>b__0(i)
<CreateActionLinkParameters>b__1(revenue)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ConfirmResubscriptionPeriodIsStillOpen>b__0(p)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DescribeDepartment>b__0(d)
.cctor()
.ctor()
<get_Description>b__1_0(change)
<get_Description>b__1_1(change)
.cctor()
.ctor()
<SummariseLinesByPeriodID>b__4_0(summ)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<StoreMultipleEvents>b__4_0(i)
<GetRecordsForUser>b__5_0(doc)
<GetMostRecentRecordForUser>b__6_0(doc)
<GetMostRecentRecordForSession>b__7_0(doc)
<DeleteMultipleNavigationRecords>b__8_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<MigrateAllUserNavigationRecordsForClosedSessionIntoDatabase>b__3_0(i)
<MigrateAllUserNavigationRecordsForClosedSessionIntoDatabase>b__3_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<UpdateLastActivityForUser>b__0(i)
.cctor()
.ctor()
<UpdateLastActivityForUser>b__3_1(i)
<GetRecentActivitiesForUserGroupedByClass>b__6_0(i)
<GetRecentActivitiesForUserGroupedByClass>b__6_1(i)
<GetRecentActivitiesForClasses>b__8_0(i)
<GetRecentActivitiesForClassesFromDatabase>b__10_0(i)
<GetRecentActivitiesForClassesFromDatabase>b__10_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetRecentActivitiesForClasses>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetValuesAfterValidation>b__6_0(d)
<GetAllValuesInPathsAfterValidation>b__8_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetDepartmentNameAsync>b__0(d)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetDepartmentNameAsync>b__8_0(role)
<GetDepartmentNameAsync>b__8_1(ids)
<GetDepartmentNameAsync>b__8_2(role, ids)
<GetDepartmentIDByShortDescription>b__9_0(role)
<GetDepartmentIDByShortDescription>b__9_1(code)
<GetDepartmentIDByShortDescription>b__9_2(role, code)
<GetDepartmentIDByShortDescription>b__9_3(i)
<GetDepartmentIDByShortDescription>b__9_4(i)
<GetDepartmentIDByShortDescription>b__9_5(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetTeacherCertificationUserInfoForSchoolAfterValidation>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<PreviewBulkUploadSchoolUsernameMatches>b__2_0(i)
<PreviewBulkUploadSchoolUsernameMatches>b__2_1(u)
<BulkUploadSchool>b__4_0(r)
<BulkUploadSchool>b__4_1(c)
<BulkUploadSchool>b__4_2(c)
<BulkUploadSchool>b__4_3(c)
<BulkUploadSchool>b__4_6(i)
<BulkUploadSchool>b__4_7(i)
<BulkUploadSchool>b__4_8(i)
<BulkUploadSchool>b__4_9(i)
<BulkUploadSchool>b__4_10(i)
<BulkUploadSchool>b__4_11(i)
<BulkUploadSchool>b__4_12(i)
<BulkUploadSchool>b__4_13(i)
<BulkUploadSchool>b__4_14(r)
<BulkUploadUsers>b__6_0(i)
<AssociateTeachersUsernamesWithClasses>b__7_0(classUsernames)
<AssociateTeachersUsernamesWithClasses>b__7_1(classUsernames, username)
<AssociateTeachersUsernamesWithClasses>b__7_2(u)
<AssociateTeachersUsernamesWithClasses>b__7_3(i)
<AssociateTeachersNamesWithClasses>b__8_0(classNames)
<AssociateTeachersNamesWithClasses>b__8_1(classNames, name)
<AssociateTeachersNamesWithClasses>b__8_2(u)
<AssociateTeachersNamesWithClasses>b__8_3(i)
<GetAllTeacherIDs>b__9_0(classNames)
<GetAllTeacherIDs>b__9_1(classNames, name)
<GetAllTeacherIDs>b__9_2(classUsernames)
<GetAllTeacherIDs>b__9_3(classUsernames, username)
<CheckUsersHaveDefaultPassword>b__12_0(detail)
<FindClassesWithIncorrectOrderOfFirstnameAndSurnameColumns>b__13_0(i)
<FindClassesWithIncorrectOrderOfFirstnameAndSurnameColumns>b__13_1(i)
<FindClassesWithIncorrectOrderOfFirstnameAndSurnameColumns>b__13_2(i)
<StoreUserAuthenticationIdentifiersToDatabase>b__14_0(i)
<StoreUserLTIIdentifiersToDatabase>b__15_0(i)
<ValidateSSOUserAuthenticationUniqueness>b__16_0(i)
<ValidateLTIUserAuthenticationUniqueness>b__17_0(i)
<StoreParentEmailAddressDetailsToDatabase>b__18_0(i)
<RecordClassListUpload>b__25_0(i)
<NotifyLeadOwnersAboutNewUploadRequest>b__29_1(i)
<NotifyLeadOwnersAboutNewUploadRequest>b__29_2(i)
<NotifyLeadOwnersAboutNewUploadRequest>b__29_4(i)
<NotifyLeadOwnersAboutNewUploadRequest>b__29_6(i)
<NotifyLeadOwnersAboutNewUploadRequest>b__29_7(role)
<GetSampleUserIdentifiersFromDatabase>b__32_0(identifier)
<GetSampleUserIdentifiersFromDatabase>b__32_1(group)
<GetSampleUserIdentifiersFromDatabase>b__32_2(identifier)
<GetSampleUserIdentifiersFromDatabase>b__32_4(i)
<GetSampleUserIdentifiersFromDatabase>b__32_5(i)
<GetSampleUserIdentifiersFromDatabase>b__32_6(i)
<GetSampleUserIdentifiersFromDatabase>b__32_7(i)
<GetSampleUserIdentifiersFromDatabase>b__32_8(i)
<GetSampleUserIdentifiersFromDatabase>b__32_9(i)
<GetSampleUserIdentifiersFromDatabase>b__32_13(id)
<GetSampleUserIdentifiersFromDatabase>b__32_14(id)
<GetSampleUserIdentifiersFromDatabase>b__32_15(id)
<GetSampleUserIdentifiersFromDatabase>b__32_16(id)
<GetSampleUserIdentifiersFromDatabase>b__32_17(id)
.ctor()
<BulkUploadSchool>b__4(u)
<BulkUploadSchool>b__5(user)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FindClassesWithIncorrectOrderOfFirstnameAndSurnameColumns>b__3(i)
<FindClassesWithIncorrectOrderOfFirstnameAndSurnameColumns>b__4(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetDatasetGroupDataForSchool>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<NotifyLeadOwnersAboutNewUploadRequest>b__0(role)
.ctor()
<NotifyLeadOwnersAboutNewUploadRequest>b__3(i)
<NotifyLeadOwnersAboutNewUploadRequest>b__5(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSampleUserIdentifiersFromDatabase>b__3(i)
<GetSampleUserIdentifiersFromDatabase>b__10(i)
<GetSampleUserIdentifiersFromDatabase>b__11(i)
<GetSampleUserIdentifiersFromDatabase>b__12(i)
.ctor()
<GetSampleUserIdentifiersFromDatabase>b__18(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SaveUserSettingsCollection>b__0(i)
<SaveUserSettingsCollection>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ParseStringAsObject>b__5_0(i)
<ParseStringAsObject>b__5_1(i)
<ParseStringAsObject>b__5_2(i)
<ParseStringAsObject>b__5_3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetUserTitlesList>b__2_0()
.ctor()
<GetUserTitlesList>b__0()
.cctor()
.ctor()
<GetUserTypesDictionary>b__1_0()
<GetUserTypesList>b__2_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetBasicUserInfo>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetUserDataForSpecificUsers>b__33_0(userID)
<ResetUserPasswords>b__45_0(user)
<EditContactDetails>b__58_0(role)
<UpdateUsersEmailAddress>b__76_0(lookup)
<CommitNewLoginDetails>b__82_0(lookup)
<SearchForUsersInSchool>b__108_0(i)
<SearchForUsersInSchool>b__108_1(i)
<SearchForUsersGlobally>b__109_0(i)
<SearchForUsersGlobally>b__109_1(i)
<UpdateUserSubjectInterests>b__116_0(i)
<UpdateUserSubjectInterests>b__116_1(i)
<UpdateUserSubjectInterests>b__116_2(i)
<GetParentDetailsForUser>b__117_0(i)
<GetParentDetailsForMultipleUsers>b__118_0(i)
<GetParentDetailsForMultipleUsers>b__118_1(i)
<GetParentDetailsForMultipleUsers>b__118_2(i)
<GetParentDetailsForMultipleUsers>b__118_3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AddUsersToClass>b__0(x)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ValidateLoginDetails>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserDataFromEmailAddressAndFirstName>b__0(u)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ProcessPasswordChangeRequestForm>b__0(mailMessage)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserMaxPrivilege>b__0()
.ctor()
<GetUserMaxPrivilegeAsync>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SendAcceptedClassRequestEmails>b__1(user)
.cctor()
.ctor()
<SendAcceptedClassRequestEmails>b__5_0(user)
<DeclineUserJoinRequests>b__6_0(user)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DeclineUserJoinRequests>b__1(user)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AddUserRequestToJoinClass>b__0(x)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<.cctor>b__6_0(p1, p2)
.cctor()
.ctor()
<.cctor>b__10_0(p1, p2)
.cctor()
.ctor()
<.cctor>b__8_0(p1, p2)
.ctor()
<AddStudentUsageUpdateRecipientsToQueue>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateUpdateEmailDataForUser>b__1(classes)
<GenerateUpdateEmailDataForUser>b__13(fbk)
.ctor()
<GenerateUpdateEmailDataForUser>b__3(subj)
<GenerateUpdateEmailDataForUser>b__5(subj)
.ctor()
<GenerateUpdateEmailDataForUser>b__8()
<GenerateUpdateEmailDataForUser>b__9()
.ctor()
<GenerateUpdateEmailDataForUser>b__14(stat)
.cctor()
.ctor()
<GenerateUpdateEmailDataForUser>b__6_0(dept)
<GenerateUpdateEmailDataForUser>b__6_2(classes)
<GenerateUpdateEmailDataForUser>b__6_4(subj)
<GenerateUpdateEmailDataForUser>b__6_6(subj)
<GenerateUpdateEmailDataForUser>b__6_7(subj)
<GenerateUpdateEmailDataForUser>b__6_10(i)
<GenerateUpdateEmailDataForUser>b__6_11(i)
<GenerateUpdateEmailDataForUser>b__6_12(i)
<GenerateCacheKeyForSchoolDeptMetrics>b__9_0(i)
<.cctor>b__11_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetValidityManagerForLanguage>b__0()
.cctor()
.ctor()
<PrimeWordLengthFrequencyData>b__14_0(i)
<PrimeWordLengthFrequencyData>b__14_1(i)
<PrimeWordLengthFrequencyData>b__14_2(i)
<DetermineAppropriateCutoffForNgramProbabilities>b__21_1(i)
<DetermineAppropriateCutoffForNgramProbabilities>b__21_3(i)
.ctor(<>1__state)
System.IDisposable.Dispose()
MoveNext()
System.Collections.Generic.IEnumerator<System.String>.get_Current()
System.Collections.IEnumerator.Reset()
System.Collections.IEnumerator.get_Current()
System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
System.Collections.IEnumerable.GetEnumerator()
.ctor()
<DetermineAppropriateCutoffForNgramProbabilities>b__0(i)
<DetermineAppropriateCutoffForNgramProbabilities>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetTranslationDirections>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetTranslationDirectionsForContentList>b__14_0(dir)
<GetTranslationDirectionsForContentList>b__14_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<CompileRomanisationsForTranslations>b__1_0(t)
.ctor(defs, contentType)
.cctor()
.ctor()
<ValidateNewEnglishSpellingTranslation>b__5_0(i)
<ValidateNewEnglishSpellingTranslation>b__5_1(i)
.ctor()
get_FirstName()
set_FirstName(value)
get_Surname()
set_Surname(value)
get_Email()
set_Email(value)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GroupSuggestionsByLanguages>b__3_0(sg)
<AcceptSuggestions>b__5_0(s)
<LoadUserEmails>b__12_0(suggestion)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<CompileDefinitionsForSpecificTranslations>b__3_0(t)
<CompileDefinitionsForSpecificTranslations>b__3_1(def)
<CompileDefinitionsForSpecificTranslations>b__3_2(def)
<CompileDefinitionsForSpecificTranslations>b__3_3(def)
<CompileDefinitionsForSpecificTranslations>b__3_4(def)
<CompileDefinitionsForSpecificTranslations>b__3_5(def)
<CompileDefinitionsForSpecificTranslations>b__3_6(t)
<FindOrCreateTranslations>b__4_0(i)
<GenerateTranslationContentsHashString>b__5_0(i)
<GenerateTranslationContentsHashString>b__5_1(i)
<GenerateOneSideOfTranslationContentsHashString>b__6_0(i)
<GenerateOneSideOfTranslationContentsHashString>b__6_1(i)
<GenerateOneSideOfTranslationContentsHashString>b__6_2(i)
<FindDuplicateTranslationsOf>b__7_0(tdl)
<FindOrCreateTranslationsAndDefinitions>b__8_0(trans)
<FindOrCreateTranslationsAndDefinitions>b__9_0(t)
<FetchTranslationDefinitionLookupDataForTranslationsWithoutHashCodes>b__13_0(i)
<FetchTranslationDefinitionLookupDataForTranslationsWithoutHashCodes>b__13_1(i)
<FetchTranslationDefinitionLookupDataForTranslationsWithoutHashCodes>b__13_2(i)
<SetContentHashForMultipleTranslationsAsync>b__14_0(i)
<SetContentHashForMultipleTranslations>b__15_0(i)
<FetchTranslationDefinitionLookupDataForSpecificTranslations>b__17_0(i)
<FetchTranslationDefinitionLookupDataForSpecificTranslations>b__17_1(i)
<FetchTranslationDefinitionLookupDataForSpecificTranslations>b__17_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<get_Valid>b__9_0(def)
.ctor()
<GetOrCacheDatabaseTimeOffset>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<get_Current>b__3_0(period)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetMilestones>b__2_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<UpdateSchoolDepartmentTriggers>b__1_0(i)
<UpdateSchoolDepartmentTriggers>b__1_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetRelevantSchoolAndClassesSummaryStats>b__0()
.cctor()
.ctor()
<GetRelevantSchoolAndClassesSummaryStatsFromDatabase>b__2_0(i)
<GetRelevantSchoolAndClassesSummaryStatsFromDatabase>b__2_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSchoolScores>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<UpdateSchoolChronologicalUsageStats>b__11_0(i)
<UpdateSchoolChronologicalUsageStats>b__11_1(i)
<UpdateSchoolChronologicalUsageStats>b__11_2(i)
<UpdateSchoolChronologicalUsageStats>b__11_3(i)
<UpdateSchoolChronologicalUsageStats>b__11_4(stat)
<UpdateSchoolChronologicalUsageStats>b__11_5(lookup)
<UpdateSchoolChronologicalUsageStats>b__11_6(stat, lookup)
<UpdateSchoolChronologicalUsageStats>b__11_7(i)
<UpdateSchoolChronologicalUsageStats>b__11_8(i)
<UpdateSchoolChronologicalUsageStats>b__11_9(j)
<UpdateSchoolChronologicalUsageStats>b__11_10(i)
<UpdateSchoolChronologicalUsageStats>b__11_11(i)
<UpdateSchoolChronologicalUsageStats>b__11_12(j)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<RemoveCheatingPoints>b__4_0(i)
<RemoveCheatingPoints>b__4_1(i)
<RemoveCheatingPoints>b__4_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DetermineActivityTypeFromActivitySubtype>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CacheUserIDs>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CacheActivityIDs>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserIDsFromDatabaseAfterFiltering>b__0(id)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateContentListUserProgressForClassesAfterValidation>b__11_0(i)
<ApplyProgressSummariesToUsers>b__14_0(i)
<ApplyProgressSummariesToUsers>b__14_1(i)
<ApplyProgressSummariesToContent>b__15_0(i)
<ApplyOnlineStatusToUsers>b__16_0(i)
<ApplyOnlineStatusToUsers>b__16_1(i)
<ApplyOnlineStatusToUsers>b__16_2(i)
<ApplyOnlineStatusToUsers>b__16_3(j)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.cctor()
.ctor()
<.cctor>b__8_0()
<DetermineTargetDataSetsForStatsSave>b__20_0(i)
<DetermineTargetDataSetsForStatsSave>b__20_1(i)
<DetermineTargetDataSetsForStatsSave>b__20_2(i)
<OutputStats>b__22_0(i)
<OutputStats>b__22_1(i)
<SaveStatsToDatabase>b__25_0(i)
<SaveStatsToDatabase>b__25_1(i)
<SaveStatsToDatabase>b__25_2(i)
<SaveStatsToDatabase>b__25_3(i)
<SaveStatsToDatabase>b__25_4(i)
<SaveStatsToDatabase>b__25_5(i)
<ConvertPrecalculatedUserScoreUpdatesToDataSetScores>b__29_0(i)
<IdentifyMismatchedScores>b__46_1(score)
<IdentifyMismatchedScores>b__46_2(score)
<IdentifyMismatchedScores>b__46_3(score)
<IdentifyMismatchedScores>b__46_4(score)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetModuleSubjectInfo>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<RepairPrecalculatedUserScoreMismatchesInMainDB>b__0(score)
<RepairPrecalculatedUserScoreMismatchesInMainDB>b__1(score)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<IdentifyMismatchedScores>b__0(userID, baseLanguageID, targetLanguageID)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<get_SchoolIDs>b__7_0(i)
<get_CountryIDs>b__9_0(i)
<get_ClassIDs>b__11_0(i)
System.Collections.IComparer.Compare(a, b)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateSummaryHealthRecords>b__4_0(usage)
<GenerateSummaryHealthRecords>b__4_1(usage)
.ctor()
<GetHealthRatingForDepartment>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<IdentifyCommonTasks>b__8(i)
.ctor()
<IdentifyCommonTasks>b__14(i)
.cctor()
.ctor()
<IdentifyCommonTasks>b__1_0(i)
<IdentifyCommonTasks>b__1_1(i)
<IdentifyCommonTasks>b__1_2(i)
<IdentifyCommonTasks>b__1_3(i)
<IdentifyCommonTasks>b__1_4(i)
<IdentifyCommonTasks>b__1_5(i)
<IdentifyCommonTasks>b__1_6(i)
<IdentifyCommonTasks>b__1_7(i)
<IdentifyCommonTasks>b__1_9(i)
<IdentifyCommonTasks>b__1_10(i)
<IdentifyCommonTasks>b__1_11(i)
<IdentifyCommonTasks>b__1_12(i)
<IdentifyCommonTasks>b__1_13(i)
<IdentifyCommonTasks>b__1_15(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.cctor()
.ctor()
<StoreActivityUsageData>b__0_0(i)
<GetOrderedSubjectsForClasses>b__4_0(i)
<GetOrderedSubjectsForClasses>b__4_1(i)
<GetOrderedSubjectsForClasses>b__4_2(i)
<GetClassUsageDataForSubjectsInTimePeriod>b__6_0(i)
<GetClassUsageDataForSubjectsInTimePeriod>b__6_1(i)
<GetClassUsageDataForSubjectsInTimePeriod>b__6_2(i)
<GetHighLevelUsageMetricsForFilter>b__9_0(i)
<GetHighLevelUsageMetricsForFilter>b__9_1(i)
<GetClassUsageSummaryForDashboard>b__10_0(i)
<GetStudentUsageDataForSubjectsInTimePeriod>b__11_0(i)
<GetStudentUsageDataForSubjectsInTimePeriod>b__11_1(i)
<GetStudentUsageDataForSubjectsInTimePeriod>b__11_2(i)
<GetStudentUsageDataForSubjectsInTimePeriod>b__11_3(i)
<RemoveTypedTasksNotTargetingWholeClass>b__14_0(i)
<RemoveTypedTasksNotTargetingWholeClass>b__14_1(i)
<RemoveTypedTasksNotTargetingWholeClass>b__14_2(i)
<RemoveTypedTasksNotTargetingWholeClass>b__14_3(i)
<GetCurrentActivitiesForOnlineUsers>b__18_1(i)
<MergeRecentAndCurrentActivities>b__19_0(i)
<MergeRecentAndCurrentActivities>b__19_1(i)
<MergeRecentAndCurrentActivities>b__19_3(i)
<ApplyOnlineUsageStatusToRecentStudentUsage>b__32_0(i)
<ApplyOnlineUsageStatusToRecentStudentUsage>b__32_1(i)
<ApplyOnlineUsageStatusToRecentStudentUsage>b__32_2(i)
<ApplyOnlineUsageStatusToRecentStudentUsage>b__32_3(j)
<ApplyOnlineUsageStatusToRecentStudentUsage>b__32_4(i)
<ApplyOnlineUsageStatusToRecentStudentUsage>b__32_5(i)
<ApplyOnlineUsageStatusToUserInfo>b__33_0(i)
<ApplyOnlineUsageStatusToUserInfo>b__33_1(i)
<ApplyOnlineUsageStatusToUserInfo>b__33_2(i)
<ApplyOnlineUsageStatusToUserInfo>b__33_3(j)
<ApplyTaskDetailsToRecentActivities>b__34_0(i)
<ApplyTaskDetailsToRecentActivities>b__34_1(i)
<ApplyTaskCountsToClassUsage>b__35_0(i)
<ApplyTaskCountsToSubjectUsage>b__36_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<RemoveTypedTasksNotTargettedAtUser>b__0(i)
<RemoveTypedTasksNotTargettedAtUser>b__1(i)
<RemoveTypedTasksNotTargettedAtUser>b__2(i)
<RemoveTypedTasksNotTargettedAtUser>b__3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCurrentActivitiesForOnlineUsers>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<MergeRecentAndCurrentActivities>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ApplyTaskDetailsToRecentActivities>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ProjectRecordIntoResults>b__0(i)
.cctor()
.ctor()
<ProjectRecordIntoResults>b__14_1(i)
<ProjectRecordIntoResults>b__14_2(i)
<ProjectRecordIntoResults>b__14_3(i)
<ProjectRecordIntoResults>b__14_4(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<MatchRedisScoreboardRecordsToUsers>b__0_0(i)
<MatchRedisScoreboardRecordsToUsers>b__0_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetScoreboardUserDetails>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetSpecificUsersScoresFromDatabase>b__22_0(i)
<GetSpecificUsersScoresFromDatabase>b__22_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetStateScoreboardStatsOverall>b__0(stateResult)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetAllStrongClassSubjectLinks>b__5_0(i)
<GetAllStrongClassSubjectLinks>b__5_1(i)
<GetAllStrongClassSubjectLinks>b__5_2(i)
<GetAllStrongClassSubjectLinks>b__5_3(j)
<CompileSchoolScoreboardDataForSpecificDatasets>b__12_0(i)
<CompileSchoolScoreboardDataForSpecificDatasets>b__12_1(i)
<CompileSchoolScoreboardDataForSpecificDatasets>b__12_2(i)
<CompileSchoolScoreboardDataForSpecificDatasets>b__12_3(i)
<CompileSchoolScoreboardDataForSpecificDatasets>b__12_4(i)
<CompileSchoolScoreboardDataForSpecificDatasets>b__12_5(i)
<AggregateOverallScores>b__14_0(i)
<AggregateOverallScores>b__14_1(i)
<AggregateLanguageScores>b__15_0(i)
<AggregateLanguageScores>b__15_1(i)
<AggregateLanguageScores>b__15_2(i)
<AggregateLanguageScores>b__15_3(i)
<RankUserScores>b__16_2(i)
<RankUserLanguageScores>b__17_0(i)
<GenerateGlobalUserScoreboardRecords>b__28_0(i)
<GenerateGlobalUserScoreboardRecords>b__28_1(i)
<GenerateGlobalUserScoreboardRecords>b__28_2(i)
<GenerateGlobalUserScoreboardRecords>b__28_3(i)
<GenerateGlobalUserScoreboardRecords>b__28_4(group)
<GenerateGlobalUserScoreboardRecords>b__28_5(group)
<GenerateGlobalUserScoreboardRecords>b__28_6(j)
<GenerateGlobalUserScoreboardRecords>b__28_7(i)
<GenerateGlobalUserScoreboardRecords>b__28_8(i)
<GenerateGlobalUserScoreboardRecords>b__28_9(i)
<GenerateGlobalUserScoreboardRecords>b__28_10(i)
<GenerateSchoolUserScoreboardRecords>b__29_0(i)
<GenerateSchoolUserScoreboardRecords>b__29_1(i)
<GenerateSchoolUserScoreboardRecords>b__29_2(i)
<GenerateSchoolUserScoreboardRecords>b__29_3(i)
<GenerateSchoolUserScoreboardRecords>b__29_4(i)
<GenerateSchoolUserScoreboardRecords>b__29_5(j)
<GenerateSchoolUserScoreboardRecords>b__29_6(i)
<GenerateSchoolUserScoreboardRecords>b__29_7(i)
<GenerateSchoolUserScoreboardRecords>b__29_8(i)
<GenerateSchoolUserScoreboardRecords>b__29_9(i)
<GenerateSchoolUserScoreboardRecords>b__29_10(i)
<GenerateSchoolUserScoreboardRecords>b__29_11(i)
<GenerateSchoolUserScoreboardRecords>b__29_12(i)
<GenerateSchoolUserScoreboardRecords>b__29_13(group)
<GenerateSchoolUserScoreboardRecords>b__29_14(group)
<GenerateSchoolUserScoreboardRecords>b__29_15(j)
<GenerateSchoolUserScoreboardRecords>b__29_20(i)
<GenerateSchoolUserScoreboardRecords>b__29_21(i)
<GenerateSchoolUserScoreboardRecords>b__29_22(i)
<GenerateSchoolUserScoreboardRecords>b__29_27(i)
<GenerateSchoolUserScoreboardRecords>b__29_28(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<RankUserScores>b__0(i)
<RankUserScores>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<RebuildUserScoreboardsForSpecificDatasets>b__0(i)
<RebuildUserScoreboardsForSpecificDatasets>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateSchoolUserScoreboardRecords>b__16(i)
<GenerateSchoolUserScoreboardRecords>b__17(i)
<GenerateSchoolUserScoreboardRecords>b__23(i)
<GenerateSchoolUserScoreboardRecords>b__24(i)
.ctor()
<GenerateSchoolUserScoreboardRecords>b__18(i)
<GenerateSchoolUserScoreboardRecords>b__25(i)
.ctor()
<GenerateSchoolUserScoreboardRecords>b__19(i)
.ctor()
<GenerateSchoolUserScoreboardRecords>b__26(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
Add(key, userID, score)
.ctor()
.cctor()
.ctor()
<.cctor>b__17_0(d)
<GetRankingStats>b__22_0(i)
<UpdateScoreboards>b__28_0(i)
<CacheClassSchoolCountryInfo>b__29_0(i)
<SeedDatasetClassScoreboardWithEmptyResults>b__34_0(i)
<SeedDatasetClassScoreboardWithEmptyResults>b__34_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetRankingPositionsFromCache>b__0()
<GetRankingPositionsFromCache>b__1()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetScoreboardUserStatsFromDatabase>b__4_0(i)
<ConvertUserStatsWithOnlineStatus>b__5_0(stat)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ConvertUserStatsWithOnlineStatus>b__1(stat)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetTotalQuestionsForDataSet>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetTotalQuestionsAndDataSetInfoForDataSet>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<BuildTotalQuestionsAndDataSetInfoForDataSetCache>b__5_0(i)
<CanUseVSPCheck>b__7_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetRelevantCategorisedDataSetsForSchool>b__40_0(dataset)
<GetActiveDataSetIDs>b__59_2(i)
<GetCurrentMonthDataSet>b__122_0()
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_0(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_1(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_2(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_3(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_4(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_5(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_6(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_7(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_8(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_9(i)
<GetSpecificDataSetsForStatsSavingFromDatabase>b__130_10(i)
<RemoveMultipleDataSetFromCache>b__136_0(ID)
<RemoveMultipleDataSetFromCache>b__136_1(ID)
<RemoveMultipleDataSetFromCache>b__136_2(ID)
<RemoveMultipleDataSetFromCache>b__136_3(ID)
<SendAlertsForSoonExpiringDatasetsWithoutReplacements>b__139_0(ds)
<GetOverallAndMonthlyDatasetsForThisYear>b__141_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DetermineDefaultDatasetForSchool>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSpecificDataSetInfo>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetActiveDataSetIDs>b__0()
<GetActiveDataSetIDs>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetDataSetTargetContentInfo>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSpecificDataSetsForStatsSaving>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetDataSetStatus>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetTargetSubjectIDs>b__7_0(x)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FindPotentialSchoolClashes>b__0(school)
.ctor()
<FindPotentialSchoolClashes>b__1(school)
.cctor()
.ctor()
<FindPotentialSchoolClashes>b__11_2(school)
<FindPotentialSchoolClashes>b__11_3(school)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SelectQuestionsForReviewQuiz>b__4_0(i)
<SelectQuestionsForReviewQuiz>b__4_1(i)
<SelectQuestions>b__5_0(i)
<SelectQuestions>b__5_1(i)
<DetermineReviewQuizValidQuestionsForSmartLesson>b__18_0(i)
<DetermineReviewQuizValidQuestionsForSmartLesson>b__18_1(i)
<DetermineReviewQuizValidQuestionsForSmartLesson>b__18_2(i)
<DetermineReviewQuizValidQuestionsForSmartLesson>b__18_3(i)
<DetermineReviewQuizValidQuestionsForSmartLesson>b__18_4(i)
<FilterOutOutlierTimeQuestions>b__24_2(i)
<DetermineReviewQuizValidQuestionsForTranslationList>b__25_0(i)
<IsActivityAppropriateForDash>b__26_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetReviewQuizValidQuestions>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FilterOutOutlierTimeQuestions>b__0(i)
<FilterOutOutlierTimeQuestions>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetScoreboardResultsForReviewQuiz>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SaveQuizResultToScoreboards>b__16_0(i)
<SaveQuizResultToScoreboards>b__16_1(i)
<SaveQuizResultToScoreboards>b__16_2(i)
<RemoveUserFromScoreboards>b__19_0(i)
<RemoveUserFromScoreboards>b__19_1(i)
<RemoveUserFromScoreboards>b__19_2(i)
<GetUserIDsForGhostAttempts>b__20_1(i)
<GetUserIDsForRandomGhostAttempts>b__21_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserIDsForGhostAttempts>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ValidateNewAttemptDetails>b__1_0(i)
<ValidateNewAttemptDetails>b__1_1(i)
<ValidateNewAttemptDetails>b__1_2(i)
<ValidateNewAttemptDetails>b__1_3(i)
<StoreAttemptDatasetAssociations>b__3_0(i)
<SaveStatsToUserProgressTables>b__4_0(i)
<GetMultipleAttemptDetails>b__7_0(i)
<GetMultipleAttemptDetails>b__7_1(i)
<GetDatasetsAssociatedWithAttempts>b__8_0(i)
<GetDatasetsAssociatedWithAttempts>b__8_1(i)
<GetDatasetsAssociatedWithAttempts>b__8_2(i)
<GetDatasetsAssociatedWithAttempts>b__8_3(j)
<ChooseGhostAttemptIDs>b__10_0(i)
<GetMultipleGhostAttemptDetails>b__11_0(i)
<GetMultipleGhostAttemptDetails>b__11_1(i)
<GetMultipleGhostAttemptDetails>b__11_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SaveStatsToUserProgressTables>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<StoreAttemptActivityUsageRecords>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SaveAttemptToDB>b__0(answer)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetMultipleGhostAttemptDetails>b__3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<UpdateNewsFeedItemInteraction>b__21_0(i)
<UpdateNewsFeedItemInteraction>b__21_1(i)
<StoreNewsFeedItemInteractionChanges>b__23_0(i)
<GetNewsItemsForFilter>b__31_0(i)
<GetNewsFeedItemsForUser>b__34_0(i)
<GetNewsFeedItemsForUser>b__34_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetNewsItemsForFilter>b__1()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSlackUserID>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSlackUserIDFromUsername>b__0(i)
.cctor()
.ctor()
<GetSlackUserIDFromUsername>b__22_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<CheerMultipleUsersOn>b__7_0(hash)
<CheerMultipleUsersOn>b__8_0(i)
<GetRecentCheersForUser>b__13_0(i)
<TryGenerateRankingForCommonShoutouts>b__20_0(i)
<GetShoutoutsForCompetitionFromDatabase>b__23_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetShoutoutsForCompetition>b__0()
<GetShoutoutsForCompetition>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
FullName()
.ctor()
.ctor()
.cctor()
.ctor()
<GetConversationsFromDatabase>b__1_0(c)
<GetConversationsFromDatabase>b__1_1(m)
<GetConversationsFromDatabase>b__1_2(message)
<GetConversationsFromDatabase>b__1_3(m)
<GetConversationsFromDatabase>b__1_4(m)
<SendNotificationOfNewMessageToConversationParticipants>b__22_0(r)
<SendNotificationOfNewMessageToConversationParticipants>b__22_1(r)
<SendSupportNotificationEmail>b__23_0(s)
<SendSupportNotificationEmail>b__23_1(s)
<SendSupportNotificationEmail>b__23_2(s)
<GetDeliveryStatusForMessages>b__31_0(i)
.ctor()
<GetIDOfLastMessageForUser>b__0()
.ctor()
<GetIDOfLastMessageForSchool>b__0()
get_first_name()
set_first_name(value)
get_last_name()
set_last_name(value)
get_real_name()
set_real_name(value)
get_email()
set_email(value)
get_skype()
set_skype(value)
get_phone()
set_phone(value)
get_image_24()
set_image_24(value)
get_image_32()
set_image_32(value)
get_image_48()
set_image_48(value)
get_image_72()
set_image_72(value)
get_image_192()
set_image_192(value)
.ctor()
.cctor()
.ctor()
<FetchItems>b__3_0(np)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<FetchItems>b__3_0(i)
<FetchItems>b__3_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<FetchItems>b__1_0(i)
<GetNewsItemForCategories>b__4_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetNewsItemForCategories>b__1()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateQuestionStatesForQuestions>b__2(i)
<GenerateQuestionStatesForQuestions>b__3(i)
.cctor()
.ctor()
<GenerateQuestionStatesForQuestions>b__3_0(i)
<GenerateQuestionStatesForQuestions>b__3_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ApplyEditibilityToQuestionSummaries>b__4_0(i)
<RemoveQuestionsFromCache>b__12_0(i)
<GetQuestions>b__15_0(i)
<AttachProblemAreasToFeedbackItems>b__27_0(i)
<AttachProblemAreasToFeedbackItems>b__27_1(i)
<AttachProblemAreasToFeedbackItems>b__27_3(i)
<AttachActivityNavigationComponentsToFeedbackItems>b__28_0(i)
<AttachActivityNavigationComponentsToFeedbackItems>b__28_2(i)
<DeepCopyQuestions>b__45_0(i)
<DeepCopyQuestions>b__45_1(i)
<DuplicateQuestions>b__47_0(i)
<DuplicateQuestions>b__47_1(i)
<InvalidateCachedQuestionMetricsForMultipleLists>b__56_0(i)
<InvalidateCachedQuestionMetricsForMultipleListsAsync>b__57_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AttachProblemAreasToFeedbackItems>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AttachActivityNavigationComponentsToFeedbackItems>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetQuestionTemplates>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetQuestionMetricsForQuestionsInList>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
<CreateModulesReturnObjectFromModulesWithCounts>b__0(module)
.cctor()
.ctor()
<CreateModulesReturnObjectFromModulesWithCounts>b__6_1(module)
<CreateModulesReturnObjectFromModulesWithCounts>b__6_2(module)
<GetModulesWithLanguagesForSchoolAndClasses>b__7_0(m)
<DeleteModuleAfterSessionValidation>b__28_0(i)
<DeleteModuleAfterSessionValidation>b__28_1(i)
<AddTemplateModulesToSchoolsAfterValidation>b__39_0(record)
<RemoveTemplateModulesFromSchoolsAfterValidation>b__40_0(pair)
<CountUniqueWordsInContentLists>b__46_0(l)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetModuleInfo>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetModulesForDataSet>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetLPTotalQuestions>b__4_0()
.ctor()
<GetLPTotalQuestions>b__0()
.ctor()
<GetTotalQuestionsAndDataSetInfoForDataSet>b__0()
.ctor()
<GetUserScoreboardStatsForLanguage>b__0()
<GetUserScoreboardStatsForLanguage>b__1()
.ctor()
<GetUserScoreboardStatsOverall>b__0()
<GetUserScoreboardStatsOverall>b__1()
.ctor()
<GetSchoolScoreboardStatsForLanguage>b__0()
<GetSchoolScoreboardStatsForLanguage>b__1()
.ctor()
<GetSchoolScoreboardStatsOverall>b__0()
<GetSchoolScoreboardStatsOverall>b__1()
.ctor()
<FindUsersScoreboardRankingForLanguage>b__0()
.ctor()
<FindUsersScoreboardRankingOverall>b__0()
.ctor()
<GetSpecificDataSetInfoWithCurrentTime>b__0()
.cctor()
.ctor()
<GetLanguagesForScoreboard>b__5_0()
<GetValidWeightDivisionsForScoreboard>b__7_0()
<GetAllCountries>b__8_0()
<GetScoreboardPartners>b__32_0()
<GetCurrentMonthDataSet>b__35_0()
<GetNumberOfAvailableCheersForUser>b__41_0(session)
<GetOverallAndMonthlyDatasetsForThisYear>b__45_0()
.ctor()
<GetUserScoreboardStatsForLanguage>b__0()
<GetUserScoreboardStatsForLanguage>b__1()
.ctor()
<GetUserScoreboardStatsOverall>b__0()
<GetUserScoreboardStatsOverall>b__1()
.ctor()
<GetSchoolScoreboardStatsForLanguage>b__0()
<GetSchoolScoreboardStatsForLanguage>b__1()
.ctor()
<GetSchoolScoreboardStatsOverall>b__0()
<GetSchoolScoreboardStatsOverall>b__1()
.ctor()
<GetSchoolWeightedScoreboardStatsForLanguage>b__0()
<GetSchoolWeightedScoreboardStatsForLanguage>b__1()
.ctor()
<GetSchoolWeightedScoreboardStatsOverall>b__0()
<GetSchoolWeightedScoreboardStatsOverall>b__1()
.ctor()
<GetClassScoreboardStatsForLanguage>b__0()
<GetClassScoreboardStatsForLanguage>b__1()
.ctor()
<GetClassScoreboardStatsOverall>b__0()
<GetClassScoreboardStatsOverall>b__1()
.ctor()
<GetCountryScoreboardStatsOverall>b__0()
<GetCountryScoreboardStatsOverall>b__1()
.ctor()
<GetStateScoreboardStatsOverall>b__0()
<GetStateScoreboardStatsOverall>b__1()
.ctor()
<GetScoreboardSchoolStatsForPartner>b__0()
<GetScoreboardSchoolStatsForPartner>b__1()
.ctor()
<GetScoreboardSchoolStatsForPartnerAndLanguage>b__0()
<GetScoreboardSchoolStatsForPartnerAndLanguage>b__1()
.ctor()
<FindUsersScoreboardRankingForLanguage>b__0()
.ctor()
<FindUsersScoreboardRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardWeightedRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardWeightedRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardQPSRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardQPSRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardWeightedQPSRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardWeightedQPSRankingOverall>b__0()
.ctor()
<GetFilteredScoreboardPartners>b__0()
.ctor()
<GetDatasetTargetSubjects>b__0()
.ctor()
<GetCompetitionMilestones>b__0()
.ctor()
<GetCompetitionMiletonesForScoreboard>b__0()
.ctor()
<GetCountriesForThisDataset>b__0()
.ctor()
<GetStatesForCountry>b__0()
.ctor()
<CheerStudentOn>b__0(session)
.ctor()
<CheckUserIsEligibleToSendShoutout>b__0(session)
.ctor()
<GetShoutoutsForCompetition>b__0()
.ctor()
<SendShoutout>b__0(session)
.cctor()
.ctor()
<GetLPTotalQuestions>b__4_0()
.cctor()
.ctor()
<GetLPTotalQuestions>b__4_0()
.cctor()
.ctor()
<GetLPTotalQuestions>b__4_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
ToString()
.ctor()
get_AuthorID()
set_AuthorID(value)
get_AuthorName()
set_AuthorName(value)
ToCommentRecord(importDate, commentAreaID)
ToInsertStatement(importDate, commentAreaID)
SqlDate(date)
SetAuthor(name, id)
AppendLine(line)
CommitComment()
ToString()
.ctor()
.ctor()
<GetOrSetStringInCache>b__0()
.cctor()
.ctor()
<PingMemcached>b__20_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SetValues>b__0(session)
.ctor()
<GetValues>b__0(session)
.ctor()
<GetAllValuesInPath>b__0(session)
.ctor()
<GetAllValuesInPaths>b__0(session)
.ctor()
<DeleteKeys>b__0(session)
.ctor()
<DeleteAllKeysInPath>b__0(session)
.ctor()
<DeleteAllKeysInPaths>b__0(session)
.ctor()
<LoginExtra>b__0()
.ctor()
<SecureLogin>b__0()
.ctor()
<WebsiteLoginWithDeviceSession>b__0()
.ctor()
<WebsiteLogin>b__0()
.ctor()
<LoginWithDeviceSession>b__0()
.ctor()
<LoginWithSessionPromise>b__0()
.cctor()
.ctor()
<GenerateSessionPromiseFromCurrentSession>b__7_0(session)
<AcceptEULA>b__13_0(session)
<GetAllSchoolsSSODetails>b__15_0()
<GetClassUsers>b__41_0(session)
<GetLPTotalQuestions>b__48_0()
<GetCheers>b__64_0(session)
<GetNumberOfAvailableCheersForUser>b__66_0(session)
<GetRelevantCompetitionsForUser>b__81_0(session)
<GetWorldChampsPartners>b__84_0()
<GetCurrentTimeUsageWithPeriodInfoForUser>b__86_0(session)
<GetCurrentTasksForUser>b__87_0(session)
<GenerateS3StudentFileUploadDirective>b__132_0(session)
<RenewMultiplayerDashUserPresence>b__154_0(session)
.ctor()
<DirectLogin>b__0()
.ctor()
<NewDirectLogin>b__0()
.ctor()
<RegisterAndLoginUsingSSO>b__0()
.ctor()
<DirectLoginAsUser>b__0()
.ctor()
<GetIndividualPaymentURLForUser>b__0()
.ctor()
<ChangeBaseLanguage>b__0()
.ctor()
<FindSSOSchoolDetailsFromSchoolName>b__0()
.ctor()
<GetAppData>b__0(session)
.ctor()
<GetAppDataForSpecificDataSet>b__0(session)
.ctor()
<GetAppDataWithCustomDataSetSelection>b__0(session)
.ctor()
<GetAppDataForSelectedTask>b__0(session)
.ctor()
<GetAppDataForActivitySelection>b__0(session)
.ctor()
<UpdateStats>b__0()
.ctor()
<StoreProgressWithMilestones>b__0()
.ctor()
<StoreActivityProgress>b__0()
.ctor()
<StoreActivityProgress2>b__0()
.ctor()
<HasStatsSaveRequestCompletedSuccessfully>b__0(session)
.ctor()
<StoreQuestionTimes>b__0(session)
.ctor()
<StoreActivityUsageData>b__0(session)
.ctor()
<StoreActivityUsageData2>b__0(session)
.ctor()
<StoreActivityUsageData3>b__0(session)
.ctor()
<CreateContentListAndAddToModule>b__0(session)
.ctor()
<UpdateTranslationList>b__0(session)
.ctor()
<DeleteTranslationList>b__0(session)
.ctor()
<StoreFactListDisplayOptions>b__0(session)
.ctor()
<CreateCopyOfModuleForStudent>b__0(session)
.ctor()
<GetEquivalentModuleForSchool>b__0(session)
.ctor()
<RenewSessionLicence>b__0()
.ctor()
<EndSession>b__0()
.ctor()
<GenerateDeviceSessionFromLPSessionID>b__0(session)
.ctor()
<GenerateNewDeviceSessionForUserLogin>b__0()
.ctor()
<FindUserScoresAroundMine>b__0(session)
.ctor()
<FindUserClassScoresAroundMine>b__0(session)
.ctor()
<FindUserSchoolScoresAroundMine>b__0(session)
.ctor()
<FindUserCountryScoresAroundMine>b__0(session)
.ctor()
<GetRankingStatsAndPositionsForDataSetClean>b__0(session)
.ctor()
<GetRankingPositionsForDataSet>b__0(session)
.ctor()
<GetTotalQuestionsForDataSet>b__0()
.ctor()
<GetTotalQuestionsAndDataSetInfoForDataSet>b__0()
.ctor()
<SendFeedback>b__0(session)
.ctor()
<SendFeedback2>b__0(session)
.ctor()
<RateQuestion>b__0(session)
.ctor()
<AddInAppFeedback>b__0(session)
.ctor()
<SubmitEPSubjectRequestFeedback>b__0(session)
.ctor()
<ReportProblemsWithTranslation>b__0(session)
.ctor()
<CheerStudentsOn>b__0(session)
.ctor()
<CheckUserIsEligibleToSendShoutout>b__0(session)
.ctor()
<GetShoutoutsForCompetition>b__0()
.ctor()
<SendShoutout>b__0(session)
.ctor()
<GetDataSetTargetInfo>b__0(session)
.ctor()
<GetSpecificDataSetInfoWithCurrentTime>b__0()
.ctor()
<SaveUserSettings>b__0(session)
.ctor()
<GetQuestions>b__0(session)
.ctor()
<GetQuestionsEncrypted>b__0(session)
.ctor()
<GetQuestionsInLists>b__0(session)
.ctor()
<GetQuestionMetricsForQuestionsInList>b__0(session)
.ctor()
<GetReasonForSessionExpiry>b__0()
.ctor()
<GetDatasetTargetSubjects>b__0()
.ctor()
<GetEndOfCompetitionInfo>b__0(session)
.ctor()
<SubmitEndOfCompetitionFeedback>b__0(session)
.ctor()
<GetCompetitionExtraInfo>b__0(session)
.ctor()
<GetUserProgressForEarnPointsTask>b__0(session)
.ctor()
<GetUserProgressForLearnContentTask>b__0(session)
.ctor()
<GetUserProgressForAssessmentTask>b__0(session)
.ctor()
<GetUserProgressForCompleteActivityTask>b__0(session)
.ctor()
<GetUserTaskListProgressDetails>b__0(session)
.ctor()
<GetTaskMonitoringStatus>b__0(session)
.ctor()
<GetTestSummaryForAssessmentTask>b__0(session)
.ctor()
<StartNewTestAttemptForAssessmentTask>b__0(session)
.ctor()
<StartNewTestAttemptForRevisionTest>b__0(session)
.ctor()
<ResumeIncompleteTestAttempt>b__0(session)
.ctor()
<UpdateTestAnswers>b__0(session)
.ctor()
<CompleteTestAttempt>b__0(session)
.ctor()
<StartNewTestAttemptForAssessmentTask2>b__0(session)
.ctor()
<StartNewTestAttemptForAssessmentTask3>b__0(session)
.ctor()
<StartNewTestAttemptForRevisionTest2>b__0(session)
.ctor()
<ResumeIncompleteTestAttempt2>b__0(session)
.ctor()
<UpdateTestAttemptQuestionStates>b__0(session)
.ctor()
<CompleteTestAttempt2>b__0(session)
.ctor()
<GetTestSummaryForAssessmentTask2>b__0(session)
.ctor()
<StartNewAssessmentAttemptForRevisionTest>b__0(session)
.ctor()
<StartNewAssessmentAttemptForAssessmentTask>b__0(session)
.ctor()
<GetAssessmentAttemptDetails>b__0(session)
.ctor()
<RecordAssessmentAttemptClientStart>b__0(session)
.ctor()
<UpdateAssessmentAttemptAnswers>b__0(session)
.ctor()
<UpdateAssessmentAttemptAnswers2>b__0(session)
.ctor()
<RecordAssessmentAttemptEvents>b__0(session)
.ctor()
<RecordAssessmentExitWithoutSubmission>b__0(session)
.ctor()
<CompleteAssessmentAttempt>b__0(session)
.ctor()
<GetUserAssessmentResultSummariesWithFilter>b__0(session)
.ctor()
<GetUserAssessmentResultSummariesForAttempt>b__0(session)
.ctor()
<SearchForSpecificContent>b__0(session)
.ctor()
<GetRecentActivitiesForUserAndClasses>b__0(session)
.ctor()
<UpdateLastActivityForUser>b__0(session)
.ctor()
<UpdateSessionFocusedActivity>b__0(session)
.ctor()
<StartNewActivityAttempt>b__0(session)
.ctor()
<GetUsersAttemptsForActivity>b__0(session)
.ctor()
<GetCurrentAnswersForActivityAttempt>b__0(session)
.ctor()
<GetActivityAttemptData>b__0(session)
.ctor()
<SaveIncompleteActivityAttemptAnswer>b__0(session)
.ctor()
<SaveFinalActivityAttemptAnswers>b__0(session)
.ctor()
<SubmitSmartLessonFeedback>b__0(session)
.ctor()
<RecordSmartLessonAdditionalAnswerReviewTime>b__0(session)
.ctor()
<MarkSmartLessonAnswerReviewAsSeenByUser>b__0(session)
.ctor()
<GenerateS3StudentFileUploadDirective2>b__0(session)
.ctor()
<GenerateSignedURLForPrivateUserFile>b__0(session)
.ctor()
<RemoveS3UserFile>b__0(session)
.ctor()
<GetReviewQuizScoreboardResults>b__0(session)
.ctor()
<SaveReviewQuizAttempt>b__0(session)
.ctor()
<SaveReviewQuizAttempt2>b__0(session)
.ctor()
<SaveReviewQuizAttemptEncrypted>b__0(session)
.ctor()
<GetReviewQuizGhostAttempts>b__0(session)
.ctor()
<GetReviewQuizMilestoneStatus>b__0(session)
.ctor()
<GetReviewQuizesWithAvailableMilestones>b__0(session)
.ctor()
<GetReviewQuizUserRankings>b__0(session)
.ctor()
<GetReviewQuizUserRankingsAndBestTime>b__0(session)
.ctor()
<AllocateUserToMultiplayerDashGame>b__0(session)
.ctor()
<UpdateDashGameStartTime>b__0(session)
.ctor()
<StartDashGameImmediately>b__0(session)
.ctor()
<LeaveMultiplayerDashGameLobby>b__0(session)
.ctor()
<GetReviewQuizValidQuestions>b__0(session)
.ctor()
<GetReviewQuizValidTranslationDirections>b__0(session)
.ctor()
<SelectQuestionsForReviewQuiz>b__0(session)
.ctor()
<FindPopularDashActivities>b__0(session)
.ctor()
<UpdateMultiplayerDashUserPresence>b__0(session)
.ctor()
<GetNumberOfUsersActiveInDashContext>b__0(session)
.ctor()
<StartNewActivityAttemptAnswer>b__0(session)
.ctor()
<UpdateActivityAttemptAnswer>b__0(session)
.ctor()
<FinaliseActivityAttemptAnswer>b__0(session)
.ctor()
<DownloadFile>b__0(session)
.ctor()
<SaveSvgStringAsPng>b__0(session)
.ctor()
<GetUserDetails>b__0()
.ctor()
<GetUserDetailsSecure>b__0()
.ctor()
<EditUserLoginSecure>b__0()
.ctor()
<EditUserLogin>b__0()
.ctor()
<AlterUserLoginDetails>b__0()
.ctor()
<ResetPassword>b__0()
.ctor()
<RequestPasswordResetViaForm>b__0()
.cctor()
.ctor()
<SubscribeToDefaultUserChannels>b__0_0(session)
.ctor()
<GetCompetitions>b__0(session)
.ctor()
<GetCompetitionDetails>b__0(session)
.ctor()
<CreateCompetition>b__0(session)
.ctor()
<ModifyCompetition>b__0(session)
.ctor()
<GetSchoolsInCompetition>b__0(session)
.ctor()
<AddSchoolsToCompetition>b__0(session)
.ctor()
<RemoveSchoolsFromCompetition>b__0(session)
.ctor()
<RemoveCompetition>b__0()
.ctor()
<GetRelevantCompetitionsForSchool>b__0(session)
.ctor()
<GetCompetitionPreviewsForFilter>b__0(session)
.ctor()
<GetPendingCompetitionInvitationsForSchool>b__0(session)
.ctor()
<JoinCompetition>b__0(session)
.ctor()
<GetCompetitionTargetSubjects>b__0(session)
.ctor()
<GetSchoolParticipationInfosForCompetition>b__0(session)
.ctor()
<SendCompetitionInvitations>b__0(session)
.ctor()
<GenerateCompetitionCodeFromName>b__0(session)
.ctor()
<ValidateCompetitionCode>b__0(session)
.ctor()
<GetInvitationPreviewDataURI>b__0(session)
.ctor()
<GetInvitationRecipientInfos>b__0(session)
.ctor()
<EmailSupportForHelp>b__0(session)
.ctor()
<GetInvitationTemplate>b__0(session)
.ctor()
<GetContentRestrictionsForCompetition>b__0(session)
.ctor()
<SetContentRestrictionsForCompetition>b__0(session)
.ctor()
<GetUserRestrictionsForCompetition>b__0(session)
.ctor()
<SetUserRestrictionsForCompetition>b__0(session)
.ctor()
<GetTiedCompetitionInfo>b__0(session)
.ctor()
<GetAlertsForUser>b__0(session)
.ctor()
<MarkAlertsAsSeenForUser>b__0(session)
.ctor()
<DeleteSingleUserAlert>b__0(session)
.ctor()
<CreateAssessmentTask>b__0(session)
.ctor()
<CreateEarnPointsTask>b__0(session)
.ctor()
<CreateLearnContentTask>b__0(session)
.ctor()
<CreateAssessmentTask2>b__0(session)
.ctor()
<CreateEarnPointsTask2>b__0(session)
.ctor()
<CreateEarnPointsTask3>b__0(session)
.ctor()
<CreateEarnPointsTask4>b__0(session)
.ctor()
<CreateLearnContentTask2>b__0(session)
.ctor()
<CreateLearnContentTask3>b__0(session)
.ctor()
<CreateLearnContentTask4>b__0(session)
.ctor()
<CreateAssessmentTask3>b__0(session)
.ctor()
<CreateAssessmentTask4>b__0(session)
.ctor()
<CreateAssessmentTask5>b__0(session)
.ctor()
<CreateAssessmentTask6>b__0(session)
.ctor()
<CreateAssessmentTask7>b__0(session)
.ctor()
<CreateCompleteActivityTask>b__0(session)
.ctor()
<CreateCompleteActivityTask2>b__0(session)
.ctor()
<CreateCompleteActivityTask3>b__0(session)
.ctor()
<ModifyAssessmentTask>b__0(session)
.ctor()
<UpdateAssessmentTaskAccessCode>b__0(session)
.ctor()
<UpdateAssessmentTaskResultPublicationStatus>b__0(session)
.ctor()
<ModifyEarnPointsTask>b__0(session)
.ctor()
<ModifyLearnContentTask>b__0(session)
.ctor()
<ModifyCompleteActivityTask>b__0(session)
.ctor()
<DeleteTask>b__0(session)
.ctor()
<DeleteAssessmentTask>b__0(session)
.ctor()
<ReopenEarnPointsTask>b__0(session)
.ctor()
<ReopenLearnContentTask>b__0(session)
.ctor()
<ReopenCompleteActivityTask>b__0(session)
.ctor()
<ReopenAssessmentTask>b__0(session)
.ctor()
<SendImmediateReminderEmailToStudentsAboutTask>b__0(session)
.cctor()
.ctor()
<GetTasksOwnedByUser>b__32_0(session)
<GetAllAssessmentTemplates>b__77_0(session)
<GetGradingMethods>b__100_0(session)
<GetDemoTaskDetails>b__116_0()
.ctor()
<GetTasksOwnedByUser2>b__0(session)
.ctor()
<GetTasksForClass>b__0(session)
.ctor()
<GetTasksForClass2>b__0(session)
.ctor()
<GetTasksForClasses>b__0(session)
.ctor()
<GetTaskCountsForClasses>b__0(session)
.ctor()
<GetSpecificTasks>b__0(session)
.ctor()
<GetTaskProgressOverviewForMultipleTasks>b__0(session)
.ctor()
<GetProgressReportInfoForLearnContentTask>b__0(session)
.ctor()
<GetProgressReportInfoForLearnContentTask2>b__0(session)
.ctor()
<GetProgressReportInfoForAssessmentTask>b__0(session)
.ctor()
<GetProgressReportInfoForAssessmentTask2>b__0(session)
.ctor()
<GetProgressReportInfoForEarnPointsTask>b__0(session)
.ctor()
<GetProgressReportInfoForEarnPointsTask2>b__0(session)
.ctor()
<GetProgressReportInfoForCompleteActivityTask>b__0(session)
.ctor()
<GetProgressReportInfoForCompleteActivityTask2>b__0(session)
.ctor()
<GetSmartLessonProgressReportForCompleteActivityTask>b__0(session)
.ctor()
<CheckWhetherSmartLessonReportHasNewData>b__0(session)
.ctor()
<GetSmartLessonProgressReportForCompleteActivityTask2>b__0(session)
.ctor()
<GetSmartLessonProgressReportForCompleteActivityTaskForSpecificUser>b__0(session)
.ctor()
<CheckWhetherSmartLessonReportForSpecificUserHasNewData>b__0(session)
.ctor()
<GetCommonMistakesForCompleteActivityTask>b__0(session)
.ctor()
<GetCommonMistakesForCompleteActivityTask2>b__0(session)
.ctor()
<GetCommonMistakesForCompleteActivityTaskForSpecificUser>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTask>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTask2>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTask3>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTaskForSpecificUser>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTaskForSpecificUser2>b__0(session)
.ctor()
<GetAnswerReviewsReportForCompleteActivityTask>b__0(session)
.ctor()
<DoesTaskHaveSmartLessonExtendedResponseSections>b__0(session)
.ctor()
<SubmitSmartLessonAnswerReview>b__0(session)
.ctor()
<GetMultipleHomeworkTasksSummaryReportForClasses>b__0(session)
.ctor()
<EstimateTimeForLearnContentTask>b__0(session)
.ctor()
<EstimateTimeForEarnPointsTask>b__0(session)
.ctor()
<EstimateTimeForCompleteActivityTask>b__0(session)
.ctor()
<EstimateTimeForCompleteActivityTask2>b__0(session)
.ctor()
<GetTestForAssessmentTask>b__0(session)
.ctor()
<GetTest>b__0(session)
.ctor()
<CreateTest>b__0(session)
.ctor()
<ModifyTest>b__0(session)
.ctor()
<DeleteTest>b__0(session)
.ctor()
<EstimateTimeForAssessmentTaskDataSelection>b__0(session)
.ctor()
<EstimateTimeForAssessmentTaskDataSelection2>b__0(session)
.ctor()
<EstimateMaxNumberOfQuestionsForQuickTestContentSelection>b__0(session)
.ctor()
<GetTestAttemptMarkingData>b__0(session)
.ctor()
<GetAssessmentTaskAttemptsMarkingData>b__0(session)
.ctor()
<SaveTeacherQuestionGradesForAttempt>b__0(session)
.ctor()
<FinaliseTeacherQuestionGradesForAttempt>b__0(session)
.ctor()
<FinaliseTeacherAggregatedGradeForAttempt>b__0(session)
.ctor()
<FlagSectionMarkingStatusAsComplete>b__0(session)
.ctor()
<GetCurrentAssessmentAttemptDetailsForAssessmentTasks>b__0(session)
.ctor()
<GetCurrentAssessmentAttemptDetailsForAssessmentTaskForUser>b__0(session)
.ctor()
<CreateQuickTest>b__0(session)
.ctor()
<ModifyQuickTest>b__0(session)
.ctor()
<GetQuickTestForAssessmentTask>b__0(session)
.ctor()
<DoesTestHaveAnyAttempts>b__0(session)
.ctor()
<GetUserAssessmentResultSummaries>b__0(session)
.ctor()
<GetUserAssessmentResultSummariesWithFilter>b__0(session)
.ctor()
<GetAssessmentTaskReportingData>b__0(session)
.ctor()
<GetAssessmentTaskReportingData2>b__0(session)
.ctor()
<GetUserAssessmentReportingData>b__0(session)
.ctor()
<GetStudentAnalysisGroups>b__0(session)
.ctor()
<GetGradingMethod>b__0(session)
.ctor()
<HasTestBeenAttempted>b__0(session)
.ctor()
<CheckOutNextAssessmentAttemptForMarking>b__0(session)
.ctor()
<CheckOutSpecificAssessmentAttemptForMarking>b__0(session)
.ctor()
<GetSpecificAssessmentAttempt>b__0(session)
.ctor()
<CheckBackInSpecificAssessmentAttemptForMarking>b__0(session)
.ctor()
<GetMarkingProgressStatus>b__0(session)
.ctor()
<GetAssessmentSectionVariantsForMarking>b__0(session)
.ctor()
<GetMarkerHistory>b__0(session)
.ctor()
<GetTestMarkers>b__0(session)
.ctor()
<GetMarkingSetWithPrivilages>b__0(session)
.ctor()
<UpdateMarkingCheckoutLastUsed>b__0(session)
.ctor()
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__0(session)
.ctor()
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask2>b__0(session)
.ctor()
<MakeAttemptEditable>b__0(session)
.ctor()
<GetSampleQuestionSetForAssessment>b__0(session)
.ctor()
<GetUserDetailsForTask>b__0(session)
.ctor()
<GetUserDetailsForTask2>b__0(session)
.ctor()
<GetUserOnlineStatusForTask>b__0(session)
.ctor()
<GetUserOnlineStatusForTask2>b__0(session)
.ctor()
<ExportPDFOfAssessmentTaskAttempt>b__0(session)
.ctor()
<ExportSpreadsheetOfAssessmentTaskAttempt>b__0(session)
.ctor()
<ExportSpreadsheetOfAllAttemptsForAssessmentTask>b__0(session)
.ctor()
<ExportPDFOfAssessmentAttempt>b__0(session)
.ctor()
<ExportPDFsOfAllAttemptsForAssessmentTask>b__0(session)
.ctor()
<ExportPDFPreviewOfAssessment>b__0(session)
.ctor()
<GetReviewQuizValidQuestions>b__0(session)
.ctor()
<GetReviewQuizValidTranslationDirections>b__0(session)
.ctor()
<GetQuestionListContent>b__0(session)
.ctor()
<GetQuestionSummariesForSpecificQuestions>b__0(session)
.ctor()
<UpdateQuestionTitle>b__0(session)
.ctor()
<StoreQuestion>b__0(session)
.ctor()
<StoreQuestion2>b__0(session)
.ctor()
<SearchQuestions>b__0(session)
.ctor()
<SearchQuestionsInModule>b__0(session)
.ctor()
<GetQuestions>b__0(session)
.ctor()
<SearchConcepts>b__0(session)
.ctor()
<StoreConcept>b__0(session)
.ctor()
<GetFeedback>b__0(session)
.ctor()
<UpdateFeedbackStatus>b__0(session)
.ctor()
<ArchiveFeedback>b__0(session)
.ctor()
<GetSymbolsForSubject>b__0(session)
.ctor()
<CopyQuestion>b__0(session)
.ctor()
<DeepCopyQuestion>b__0(session)
.ctor()
<GetQuestionAuditSummary>b__0(session)
.ctor()
<GetQuestionFeedbackSummary>b__0(session)
.ctor()
<SendFeedback>b__0(session)
.ctor()
<SendFeedback2>b__0(session)
.ctor()
<NotifyCollaboratorsAboutChangeToQuestion>b__0(session)
.ctor()
<ToggleDraftModeOfQuestions>b__0(session)
.ctor()
<UpdateStatusOfQuestions>b__0(session)
.ctor()
<GetQuestionTemplates>b__0(session)
.ctor()
<GetSalesLeadOwnerForSchool>b__0(session)
.ctor()
<GetSalesLeadOwnerForSession>b__0(session)
.cctor()
.ctor()
<StoreMultipleAttributeValues>b__6_0(v)
<GetNumberOfUnreadMessagesForUser>b__42_0(session)
<GetMessageNotificationSyncInfoForUser>b__43_0(session)
.ctor()
<StoreRevenueSelfConfirmationOutcome>b__0()
.ctor()
<GetRevenueSelfConfirmationData>b__0()
.ctor()
<StoreEligibilityStatusChangesForDepartment>b__0()
.ctor()
<GetEligibilityStatusForDepartments>b__0()
.ctor()
<GenerateActionLink>b__0(session)
.ctor()
<GenerateOneClickLoginLinkForTeacherFromCP>b__0(session)
.ctor()
<CreateNewConversationFromExistingComment>b__0(session)
.ctor()
<CreateNewConversation>b__0(session)
.ctor()
<CreateNewConversationFromExistingMessage>b__0(session)
.ctor()
<AddNewMessageToConversation>b__0(session)
.ctor()
<EditMessage>b__0(session)
.ctor()
<UpdateConversationParticipants>b__0(session)
.ctor()
<UpdateConversationDetails>b__0(session)
.ctor()
<SetConversationStar>b__0(session)
.ctor()
<SetMessageStar>b__0(session)
.ctor()
<ArchiveConversation>b__0(session)
.ctor()
<MarkMessageAsRead>b__0(session)
.ctor()
<MarkMultipleMessagesAsRead>b__0(session)
.ctor()
<GetMessagesForSession>b__0(session)
.ctor()
<CheckForNewConversationsForSession2>b__0(session)
.ctor()
<GetDeliveryStatusForMessages>b__0(session)
.ctor()
<RemoveDepartmentFromSchool>b__0(session)
.ctor()
<ReportProblemsWithContent>b__0(session)
.ctor()
<GetReportedFlags>b__0(session)
.ctor()
<GetReportedFlags2>b__0(session)
.ctor()
<MarkResolved>b__0(session)
.ctor()
<MarkSeen>b__0(session)
.ctor()
<FixTranslation>b__0(session)
.ctor()
<GetSentenceData>b__0(session)
.cctor()
.ctor()
<Test>b__4_0()
.ctor()
<CreateNewModule>b__0()
.ctor()
<CreateNewModule2>b__0()
.ctor()
<UpdateModuleInfo>b__0(session)
.ctor()
<UpdateModuleHighlighted>b__0(session)
.ctor()
<UpdateModuleVisibilityForStudents>b__0(session)
.ctor()
<CreateContentList>b__0(session)
.ctor()
<CreateContentList2>b__0(session)
.ctor()
<CreateContentListAndAddToModule>b__0(session)
.ctor()
<CreateContentListAndAddToModule2>b__0(session)
.ctor()
<CreateContentListAndAddToModule3>b__0(session)
.ctor()
<RenameContentListInModule>b__0(session)
.ctor()
<RenameContentListFolderPathForModule>b__0(session)
.ctor()
<CreateCopyOfContentListInModule>b__0(session)
.ctor()
<CreateCopyOfContentListInModule2>b__0(session)
.ctor()
<CreateCopyOfContentListInModule3>b__0(session)
.ctor()
<UpdateContentListProperties>b__0()
.ctor()
<UpdateContentList>b__0(session)
.ctor()
<UpdateContentListContents>b__0()
.ctor()
<DeleteTranslationList>b__0(session)
.ctor()
<AddOrRemoveModuleToTemplates>b__0(session)
.ctor()
<AddOrRemoveModuleToTemlpates>b__0(session)
.ctor()
<AddModuleToTemplate>b__0(session)
.ctor()
<AddModuleToTemplate2>b__0(session)
.ctor()
<RemoveModuleFromTemplate>b__0(session)
.ctor()
<UpdateFeaturedForTemplateModule>b__0(session)
.ctor()
<GetContentModulesForTemplate>b__0(session)
.ctor()
<GetSubjectModuleHierarchy>b__0(session)
.ctor()
<GetTagSetForList>b__0(session)
.ctor()
<GetTagSetForModule>b__0(session)
.ctor()
<GetModulesContainingListActivityTypesForSchoolAndClasses>b__0(session)
.ctor()
<GetAllTranslationListsForModule>b__0(session)
.ctor()
<GetModuleTranslationListsForModule>b__0(session)
.ctor()
<GetModuleTranslationListsForMultipleModules>b__0(session)
.ctor()
<GetModuleTestsForMultipleModules>b__0(session)
.ctor()
<AddContentListsToModule>b__0(session)
.ctor()
<AddContentListsToModule2>b__0(session)
.ctor()
<RemoveContentListsFromModule>b__0(session)
.ctor()
<DeleteModule>b__0()
.ctor()
<DeleteModule2>b__0()
.ctor()
<MakeModuleAvailableForSharing>b__0(session)
.ctor()
<MakeListAvailableForSharing>b__0(session)
.ctor()
<RemoveModuleFromSharing>b__0(session)
.ctor()
<RemoveListFromSharing>b__0(session)
.ctor()
<SearchForSharedModules>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool2>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool3>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool4>b__0(session)
.ctor()
<CreateCopyOfModuleForStudent>b__0(session)
.ctor()
<CreateCopyOfModuleForStudent2>b__0(session)
.ctor()
<GetContentDescriptionsForModule>b__0(session)
.ctor()
<GetContentDescriptionsForContentList>b__0(session)
.ctor()
<GetContentDescriptionsForSpecificContentIDs>b__0(session)
.ctor()
<GetModulesForSpecificSubjectAndSchool>b__0(session)
.ctor()
<SearchForDefinitions>b__0(session)
.ctor()
<SearchForTranslations>b__0(session)
.ctor()
<SearchForTranslationsInSpecificList>b__0(session)
.ctor()
<GetLinkedDefinitions>b__0(session)
.ctor()
<GetFactListDisplayOptions>b__0(session)
.ctor()
<StoreFactListDisplayOptions>b__0(session)
.ctor()
<GetContentSharingStats>b__0(session)
.ctor()
<UpdateContentListSearchMetadata>b__0(session)
.ctor()
<UpdateModuleSearchMetadata>b__0(session)
.ctor()
<SearchForCurriculumStandard>b__0()
.ctor()
<GetCurricula>b__0()
.ctor()
<AddCurriculumStandard>b__0(session)
.ctor()
<UpdateCurriculumStandard>b__0(session)
.ctor()
<SearchForSpecificContent>b__0(session)
.ctor()
<ChangeContentListVisibilityToStudents>b__0(session)
.ctor()
<ChangeContentListActivityType>b__0(session)
.ctor()
<ChangeMilestoneRule>b__0(session)
.ctor()
<CreateMediaItem>b__0(session)
.ctor()
<EditMediaItem>b__0(session)
.ctor()
<SearchForMediaItems>b__0(session)
.ctor()
<GetStructuredActivityWithContent>b__0(session)
.ctor()
<GetContentForCustomStructuredActivity>b__0(session)
.ctor()
<CreateStructuredActivity>b__0(session)
.ctor()
<ModifyStructuredActivity>b__0(session)
.ctor()
<DeleteStructuredActivity>b__0(session)
.ctor()
<ConvertContentListToStructuredActivity>b__0(session)
.ctor()
<BeginDraftTest>b__0(session)
.ctor()
<UpdateDraftTest>b__0(session)
.ctor()
<CommitDraftTest>b__0(session)
.ctor()
<DiscardDraftActivity>b__0(session)
.ctor()
<HasDraftActivity>b__0(session)
.ctor()
<GetEquivalentModuleForSchool>b__0(session)
.ctor()
<ReIndexSchoolContentForSearch>b__0(session)
.ctor()
<GenerateLTILaunchURLForApp>b__0(session)
.ctor()
<GetFeedbackForSchool>b__0(session)
.ctor()
<GetFeedbackForRelevantSchool>b__0(session)
.cctor()
.ctor()
<GetTotalNumberOfFeedback>b__5_0(session)
.ctor()
<DownloadFile>b__0(session)
.ctor()
<GenerateS3FileUploadDirective>b__0(session)
.ctor()
<GetStatusForSinglePDFRequest>b__0(session)
.ctor()
<GetStatusForPDFBatchRequest>b__0(session)
.ctor()
<ConvertCsvToExcelSpreadsheet>b__0(session)
.cctor()
.ctor()
<GetAllLanguages>b__0_0()
<GetAllLanguagesOnly>b__1_0()
.ctor()
<GetSubjectsForSchool>b__0(session)
.ctor()
<GetTranslationDirections>b__0(session)
.ctor()
<CreateNewModule>b__0()
.ctor()
<AddTranslationsToExistingModule>b__0(session)
.ctor()
<AddTranslationsToExistingModule2>b__0(session)
.ctor()
<GetTranslationSuggestions>b__0(session)
.ctor()
<TopListsTranslationIsIn>b__0(session)
.ctor()
<AcceptSuggestions>b__0(session)
.ctor()
<DeclineSuggestions>b__0(session)
.ctor()
<GetContentTemplates>b__0(session)
.ctor()
<GetContentTemplatesForSchool>b__0(session)
.ctor()
<GetModuleIDsInTemplate>b__0(session)
.ctor()
<GetModulesWithLanguagesForSchoolAndClasses>b__0(session)
.ctor()
<GetNewsFeedItemsForUser>b__0(session)
.ctor()
<UpdateNewsFeedItemInteraction>b__0(session)
.ctor()
<GetPublicNewsItemsForFilter>b__0(session)
.ctor()
<GetNewsItemsForFilter>b__0(session)
.ctor()
<StoreNewsFeedItem>b__0(session)
.ctor()
<GetMetadataForAllNewsFeedPosts>b__0(session)
.ctor()
<UpdateDraftStatusOfItem>b__0(session)
.ctor()
<PreviewNewsFeedTargetingResults>b__0(session)
.ctor()
<GetNewsFeedItemData>b__0(session)
.ctor()
<GetInteractionDataForNewsFeedItem>b__0(session)
.ctor()
<UploadSoundFiles>b__0(session)
.ctor()
<TestUploadSoundFiles>b__0(session)
.cctor()
.ctor()
<GetClassesITeach>b__0_0(session)
.ctor()
<GetMyClassesInSchool>b__0(session)
.ctor()
<GetClassesInSchoolWithAccessToSelectedContent>b__0(session)
.ctor()
<CreateNewClass>b__0(session)
.ctor()
<ArchiveClasses>b__0(session)
.ctor()
<UndoClassArchive>b__0(session)
.ctor()
<GetUsersInClasses>b__0(session)
.ctor()
<Login>b__0()
.ctor()
<LoginExtra>b__0()
.ctor()
<LoginExtra2>b__0()
.ctor()
<SecureLogin2>b__0()
.ctor()
<LoginWithDeviceSession>b__0()
.ctor()
<LoginWithDeviceSession2>b__0()
.ctor()
<LoginWithSessionPromise>b__0()
.cctor()
.ctor()
<GenerateSessionPromiseFromCurrentSession>b__8_0(session)
<AcceptEULA>b__13_0(session)
.ctor()
<GenerateSessionPromiseForImpersonation>b__0(session)
.ctor()
<DirectLogin>b__0()
.ctor()
<DirectLogin2>b__0()
.ctor()
<ChangeSchoolSelection>b__0(session)
.ctor()
<ExtendSession>b__0()
.ctor()
<ExtendSessionAndCheckMessage>b__0()
.ctor()
<EndSession>b__0()
.ctor()
<Impersonate>b__0(session)
.ctor()
<SearchForUsersToImpersonate>b__0(session)
.ctor()
<GenerateDeviceSessionFromLPSessionID>b__0(session)
.ctor()
<GetReasonForSessionExpiry>b__0()
.ctor()
<ValidateUsernameWithinQuota>b__0(session)
.cctor()
.ctor()
<GetLicenceData>b__2_0(session)
<GetAllProductDetailsForLicensing>b__15_0(session)
<GetCurrencies>b__18_0()
.ctor()
<CreateNewLicence>b__0(session)
.ctor()
<ModifyLicence>b__0(session)
.ctor()
<AssociateClassWithLicence>b__0(session)
.ctor()
<MoveMultipleClassesToLicence>b__0(session)
.ctor()
<GetLicenceDataForSpecificLicences>b__0(session)
.ctor()
<GetLicenceDataForSchool>b__0(session)
.ctor()
<GetRecentTransactionSummaries>b__0(session)
.ctor()
<DownloadLicenceTransactionsForSchool>b__0(session)
.ctor()
<GetClassesLicencedForContent>b__0(session)
.ctor()
<SearchForSchoolByName>b__0(session)
.ctor()
<GetSchoolsWithLicensedUsers>b__0(session)
.cctor()
.ctor()
<GetAllSchools>b__3_0(session)
<GetAllCountries>b__19_0()
<GetPartners>b__28_0()
.ctor()
<GetSchoolData>b__0(session)
.ctor()
<CreateSchool>b__0(session)
.ctor()
<CreateSchool2>b__0(session)
.ctor()
<CreateSchool3>b__0(session)
.ctor()
<EditContentTemplatesForSchool>b__0(session)
.ctor()
<CreateAndSetUpSchool7>b__0(session)
.ctor()
<GetStatesForCountry>b__0()
.ctor()
<StoreCountry>b__0()
.ctor()
<StoreState>b__0()
.ctor()
<MergeStates>b__0()
.ctor()
<GetListOfStudentsPasswordChangedSettings>b__0(session)
.ctor()
<FindSchoolClashes>b__0(session)
.ctor()
<FindNearbySimilarSchools>b__0(session)
.ctor()
<GetSchoolSummaryStats>b__0(session)
.ctor()
<GetStatsForClassesUsingFilter>b__0(session)
.ctor()
<GetStudentProgress>b__0(session)
.ctor()
<GetContentProgress>b__0(session)
.ctor()
<GetOrderedSubjectsForClasses>b__0(session)
.cctor()
.ctor()
<GetRelevantDataSets>b__5_0()
<GetDefaultDataSetGroups>b__8_0()
.ctor()
<GetRelevantDataSetsForSchool>b__0(session)
.ctor()
<GetRelevantCategorisedDataSetsForSchool>b__0(session)
.ctor()
<GetStatsSpreadForSchool>b__0()
.ctor()
<GetUsersWithinSpecificScoreRangeInSchool>b__0()
.ctor()
<GetWCUsersWithinScoreRange>b__0()
.ctor()
<GetSchoolAllStats>b__0()
.ctor()
<GetAllKnowledgeDataSets>b__0(session)
.ctor()
<GetDatasetTargetSubjects>b__0()
.ctor()
<GetSchoolSubjectUsage>b__0(session)
.ctor()
<GetSmartLessonProgressReportForClasses>b__0(session)
.ctor()
<GetSmartLessonProgressReportForSpecificUser>b__0(session)
.ctor()
<GetSmartLessonUserAnswersForClasses>b__0(session)
.ctor()
<GetSmartLessonUserAnswersForSpecificUser>b__0(session)
.ctor()
<GetSmartLessonCommonMistakesForClasses>b__0(session)
.ctor()
<GetSmartLessonCommonMistakesForSpecificUser>b__0(session)
.ctor()
<GetClassUsageDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetClassUsageSummaryForDashboard>b__0(session)
.ctor()
<GetStudentUsageDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetClassTaskCompletionDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetStudentTaskCompletionDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetContentListUserProgressForStudent>b__0(session)
.ctor()
<GetContentListUserProgressForClasses>b__0(session)
.ctor()
<GetTeachersInASchoolAsync>b__0()
.ctor()
<GetUserDataForSpecificUsers>b__0(session)
.ctor()
<GetUserAndLoginDataForSpecificUsers>b__0(session)
.ctor()
<RemoveUsersFromClass>b__0()
.ctor()
<ResetUserPasswords>b__0(session)
.ctor()
<ResetUserPasswords2>b__0(session)
.ctor()
<EditUserDetails>b__0(session)
.ctor()
<EditUserDetails2>b__0(session)
.ctor()
<EditUserDetails3>b__0(session)
.ctor()
<CreateNewUserAndAddToClass>b__0()
.ctor()
<CreateNewUserAndAddToClassWithOptions>b__0()
.ctor()
<CreateNewUserAndAddToClassWithOptions2>b__0()
.ctor()
<CreateNewUserAndAddToClassWithOptions3>b__0()
.ctor()
<AcceptUserJoinRequests>b__0(session)
.ctor()
<DeclineUserJoinRequests>b__0(session)
.cctor()
.ctor()
<GetCurrentOnlineUsers>b__29_0(session)
<GetCurrentOnlineUserCount>b__30_0(session)
<GetCheers>b__54_0(session)
<DoesUsersDepartmentHaveStudentsEnrolled>b__62_0(session)
.ctor()
<GetCurrentOnlineUsersForClasses>b__0(session)
.ctor()
<GetListOfOnlineUsersInMySchool>b__0(session)
.ctor()
<BulkUploadSchoolUsers>b__0()
.ctor()
<BulkUploadSchoolUsersWithOptions>b__0()
.ctor()
<FindUnavailableUsernamesOutsideSchool>b__0(session)
.ctor()
<CheckUsersHaveDefaultPassword>b__0(session)
.ctor()
<GetDatasetGroupDataForSchool>b__0(session)
.ctor()
<StoreUploadHistoryLogItemToDatabase>b__0(session)
.ctor()
<StoreUploadCompleteCommentAndNotifySLO>b__0(session)
.ctor()
<EditLoginDetailsSecure>b__0()
.ctor()
<GetUserEmailAddress>b__0(session)
.ctor()
<GetContactsStatsForSchool>b__0(session)
.ctor()
<GetTeacherCertificationUserInfoForSchool>b__0(session)
.ctor()
<SearchForUsersInSchool>b__0(session)
.ctor()
<ResetPasswordToFirstname>b__0(session)
.ctor()
<SearchForUsersGlobally>b__0(session)
.ctor()
<UpdateUserEmailAddress>b__0(session)
.ctor()
<UpdateUserEmailAddress2>b__0(session)
.ctor()
<CheerStudentsOn>b__0(session)
.ctor()
<RecordUserNavigation>b__0(session)
.ctor()
<GetMostRecentNavigationEventForUser>b__0(session)
.ctor()
<RecordClassListUpload>b__0(session)
.ctor()
<GetSampleUserIdentifiers>b__0(session)
.ctor()
<PreviewClassListDetailsEmail>b__0(session)
.ctor()
<SendClassListDetailsToTeachers>b__0(session)
.ctor()
<DownloadClassListDetails>b__0(session)
.ctor()
<LogCPDashboardSearchHistoryRecord>b__0(session)
.ctor()
<EditLoginDetails>b__0()
.ctor()
<UpdateLoginDetails>b__0()
.ctor()
<UpdateUserLoginDetails>b__0()
.ctor()
<ChangeUserPassword>b__0()
.ctor()
<RequestAdditionToClassForExistingUser>b__0()
.ctor()
<RequestAdditionToClassForNewUser>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<Execute>b__0(session)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<Execute>b__0(session)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<Execute>b__0(session)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetLanguagesForScoreboard>b__5_0()
<GetValidWeightDivisionsForScoreboard>b__7_0()
<GetScoreboardPartners>b__32_0()
<GetCurrentMonthDataSet>b__35_0()
<GetNumberOfAvailableCheersForUser>b__41_0(session)
<GetOverallAndMonthlyDatasetsForThisYear>b__45_0()
.ctor()
<GetUserScoreboardStatsForLanguage>b__0()
<GetUserScoreboardStatsForLanguage>b__1()
.ctor()
<GetUserScoreboardStatsOverall>b__0()
<GetUserScoreboardStatsOverall>b__1()
.ctor()
<GetSchoolScoreboardStatsForLanguage>b__0()
<GetSchoolScoreboardStatsForLanguage>b__1()
.ctor()
<GetSchoolScoreboardStatsOverall>b__0()
<GetSchoolScoreboardStatsOverall>b__1()
.ctor()
<GetSchoolWeightedScoreboardStatsForLanguage>b__0()
<GetSchoolWeightedScoreboardStatsForLanguage>b__1()
.ctor()
<GetSchoolWeightedScoreboardStatsOverall>b__0()
<GetSchoolWeightedScoreboardStatsOverall>b__1()
.ctor()
<GetClassScoreboardStatsForLanguage>b__0()
<GetClassScoreboardStatsForLanguage>b__1()
.ctor()
<GetClassScoreboardStatsOverall>b__0()
<GetClassScoreboardStatsOverall>b__1()
.ctor()
<GetCountryScoreboardStatsOverall>b__0()
<GetCountryScoreboardStatsOverall>b__1()
.ctor()
<GetStateScoreboardStatsOverall>b__0()
<GetStateScoreboardStatsOverall>b__1()
.ctor()
<GetScoreboardSchoolStatsForPartner>b__0()
<GetScoreboardSchoolStatsForPartner>b__1()
.ctor()
<GetScoreboardSchoolStatsForPartnerAndLanguage>b__0()
<GetScoreboardSchoolStatsForPartnerAndLanguage>b__1()
.ctor()
<FindUsersScoreboardRankingForLanguage>b__0()
.ctor()
<FindUsersScoreboardRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardWeightedRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardWeightedRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardQPSRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardQPSRankingOverall>b__0()
.ctor()
<FindSchoolsScoreboardWeightedQPSRankingForLanguage>b__0()
.ctor()
<FindSchoolsScoreboardWeightedQPSRankingOverall>b__0()
.ctor()
<GetFilteredScoreboardPartners>b__0()
.ctor()
<GetDatasetTargetSubjects>b__0()
.ctor()
<GetCompetitionMilestones>b__0()
.ctor()
<GetCompetitionMiletonesForScoreboard>b__0()
.ctor()
<GetCountriesForThisDataset>b__0()
.ctor()
<GetStatesForCountry>b__0()
.ctor()
<CheerStudentOn>b__0(session)
.ctor()
<CheckUserIsEligibleToSendShoutout>b__0(session)
.ctor()
<GetShoutoutsForCompetition>b__0()
.ctor()
<SendShoutout>b__0(session)
.ctor()
<GetUserScoreboardStatsForLanguage>b__0()
<GetUserScoreboardStatsForLanguage>b__1()
.ctor()
<GetUserScoreboardStatsOverall>b__0()
<GetUserScoreboardStatsOverall>b__1()
.ctor()
<GetSchoolScoreboardStatsForLanguage>b__0()
<GetSchoolScoreboardStatsForLanguage>b__1()
.ctor()
<GetSchoolScoreboardStatsOverall>b__0()
<GetSchoolScoreboardStatsOverall>b__1()
.ctor()
<FindUsersScoreboardRankingForLanguage>b__0()
.ctor()
<FindUsersScoreboardRankingOverall>b__0()
.ctor()
<LoginExtra>b__0()
.ctor()
<SecureLogin>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<WebsiteLogin>b__0()
.ctor()
<WebsiteLoginWithDeviceSession>b__0()
.ctor()
<LoginWithDeviceSession>b__0()
.ctor()
<LoginWithSessionPromise>b__0()
.ctor()
<DirectLogin>b__0()
.ctor()
<NewDirectLogin>b__0()
.ctor()
<RegisterAndLoginUsingSSO>b__0()
.ctor()
<DirectLoginAsUser>b__0()
.cctor()
.ctor()
<GenerateSessionPromiseFromCurrentSession>b__10_0(session)
<AcceptEULA>b__12_0(session)
<GetAllSchoolsSSODetails>b__14_0()
<GetClassUsers>b__41_0(session)
<GetCheers>b__65_0(session)
<GetNumberOfAvailableCheersForUser>b__67_0(session)
<GetRelevantCompetitionsForUser>b__82_0(session)
<GetWorldChampsPartners>b__85_0()
<GetCurrentTimeUsageWithPeriodInfoForUser>b__87_0(session)
<GetCurrentTasksForUser>b__88_0(session)
<GenerateS3StudentFileUploadDirective>b__132_0(session)
<RenewMultiplayerDashUserPresence>b__154_0(session)
.ctor()
<ChangeBaseLanguage>b__0()
.ctor()
<FindSSOSchoolDetailsFromSchoolName>b__0()
.ctor()
<GetAppData>b__0(session)
.ctor()
<GetAppDataForSpecificDataSet>b__0(session)
.ctor()
<GetAppDataWithCustomDataSetSelection>b__0(session)
.ctor()
<GetAppDataForSelectedTask>b__0(session)
.ctor()
<GetAppDataForActivitySelection>b__0(session)
.ctor()
<UpdateStats>b__0()
.ctor()
<StoreProgressWithMilestones>b__0()
.ctor()
<StoreActivityProgress>b__0()
.ctor()
<StoreActivityProgress2>b__0()
.ctor()
<HasStatsSaveRequestCompletedSuccessfully>b__0(session)
.ctor()
<StoreQuestionTimes>b__0(session)
.ctor()
<StoreActivityUsageData>b__0(session)
.ctor()
<StoreActivityUsageData2>b__0(session)
.ctor()
<StoreActivityUsageData3>b__0(session)
.ctor()
<CreateContentListAndAddToModule>b__0(session)
.ctor()
<UpdateTranslationList>b__0(session)
.ctor()
<DeleteTranslationList>b__0(session)
.ctor()
<StoreFactListDisplayOptions>b__0(session)
.ctor()
<CreateCopyOfModuleForStudent>b__0(session)
.ctor()
<CreateCopyOfModuleForStudent2>b__0(session)
.ctor()
<GetEquivalentModuleForSchool>b__0(session)
.ctor()
<RenewSessionLicence>b__0()
.ctor()
<EndSession>b__0()
.ctor()
<GenerateDeviceSessionFromLPSessionID>b__0(session)
.ctor()
<GenerateNewDeviceSessionForUserLogin>b__0()
.ctor()
<FindUserScoresAroundMine>b__0(session)
.ctor()
<FindUserClassScoresAroundMine>b__0(session)
.ctor()
<FindUserSchoolScoresAroundMine>b__0(session)
.ctor()
<FindUserCountryScoresAroundMine>b__0(session)
.ctor()
<GetRankingStatsAndPositionsForDataSetClean>b__0(session)
.ctor()
<GetRankingPositionsForDataSet>b__0(session)
.ctor()
<SendFeedback>b__0(session)
.ctor()
<SendFeedback2>b__0(session)
.ctor()
<RateQuestion>b__0(session)
.ctor()
<AddInAppFeedback>b__0(session)
.ctor()
<SubmitEPSubjectRequestFeedback>b__0(session)
.ctor()
<ReportProblemsWithTranslation>b__0(session)
.ctor()
<CheerStudentsOn>b__0(session)
.ctor()
<CheckUserIsEligibleToSendShoutout>b__0(session)
.ctor()
<GetShoutoutsForCompetition>b__0()
.ctor()
<SendShoutout>b__0(session)
.ctor()
<GetDataSetTargetInfo>b__0(session)
.ctor()
<SaveUserSettings>b__0(session)
.ctor()
<GetQuestions>b__0(session)
.ctor()
<GetQuestionsEncrypted>b__0(session)
.ctor()
<GetQuestionsInLists>b__0(session)
.ctor()
<GetQuestionMetricsForQuestionsInList>b__0(session)
.ctor()
<GetEndOfCompetitionInfo>b__0(session)
.ctor()
<SubmitEndOfCompetitionFeedback>b__0(session)
.ctor()
<GetCompetitionExtraInfo>b__0(session)
.ctor()
<GetUserProgressForEarnPointsTask>b__0(session)
.ctor()
<GetUserProgressForLearnContentTask>b__0(session)
.ctor()
<GetUserProgressForAssessmentTask>b__0(session)
.ctor()
<GetUserProgressForCompleteActivityTask>b__0(session)
.ctor()
<GetUserTaskListProgressDetails>b__0(session)
.ctor()
<GetTaskMonitoringStatus>b__0(session)
.ctor()
<GetTestSummaryForAssessmentTask>b__0(session)
.ctor()
<StartNewTestAttemptForAssessmentTask>b__0(session)
.ctor()
<StartNewTestAttemptForRevisionTest>b__0(session)
.ctor()
<ResumeIncompleteTestAttempt>b__0(session)
.ctor()
<UpdateTestAnswers>b__0(session)
.ctor()
<CompleteTestAttempt>b__0(session)
.ctor()
<StartNewTestAttemptForAssessmentTask2>b__0(session)
.ctor()
<StartNewTestAttemptForAssessmentTask3>b__0(session)
.ctor()
<StartNewTestAttemptForRevisionTest2>b__0(session)
.ctor()
<ResumeIncompleteTestAttempt2>b__0(session)
.ctor()
<UpdateTestAttemptQuestionStates>b__0(session)
.ctor()
<CompleteTestAttempt2>b__0(session)
.ctor()
<GetTestSummaryForAssessmentTask2>b__0(session)
.ctor()
<StartNewAssessmentAttemptForRevisionTest>b__0(session)
.ctor()
<StartNewAssessmentAttemptForAssessmentTask>b__0(session)
.ctor()
<GetAssessmentAttemptDetails>b__0(session)
.ctor()
<RecordAssessmentAttemptClientStart>b__0(session)
.ctor()
<UpdateAssessmentAttemptAnswers>b__0(session)
.ctor()
<UpdateAssessmentAttemptAnswers2>b__0(session)
.ctor()
<RecordAssessmentAttemptEvents>b__0(session)
.ctor()
<RecordAssessmentExitWithoutSubmission>b__0(session)
.ctor()
<CompleteAssessmentAttempt>b__0(session)
.ctor()
<GetUserAssessmentResultSummariesWithFilter>b__0(session)
.ctor()
<GetUserAssessmentResultSummariesForAttempt>b__0(session)
.ctor()
<SearchForSpecificContent>b__0(session)
.ctor()
<GetRecentActivitiesForUserAndClasses>b__0(session)
.ctor()
<UpdateLastActivityForUser>b__0(session)
.ctor()
<UpdateSessionFocusedActivity>b__0(session)
.ctor()
<StartNewActivityAttempt>b__0(session)
.ctor()
<GetUsersAttemptsForActivity>b__0(session)
.ctor()
<GetCurrentAnswersForActivityAttempt>b__0(session)
.ctor()
<GetActivityAttemptData>b__0(session)
.ctor()
<SaveIncompleteActivityAttemptAnswer>b__0(session)
.ctor()
<SaveFinalActivityAttemptAnswers>b__0(session)
.ctor()
<SubmitSmartLessonFeedback>b__0(session)
.ctor()
<RecordSmartLessonAdditionalAnswerReviewTime>b__0(session)
.ctor()
<MarkSmartLessonAnswerReviewAsSeenByUser>b__0(session)
.ctor()
<GenerateS3StudentFileUploadDirective2>b__0(session)
.ctor()
<GenerateSignedURLForPrivateUserFile>b__0(session)
.ctor()
<RemoveS3UserFile>b__0(session)
.ctor()
<GetReviewQuizScoreboardResults>b__0(session)
.ctor()
<SaveReviewQuizAttempt>b__0(session)
.ctor()
<SaveReviewQuizAttempt2>b__0(session)
.ctor()
<SaveReviewQuizAttemptEncrypted>b__0(session)
.ctor()
<GetReviewQuizGhostAttempts>b__0(session)
.ctor()
<GetReviewQuizMilestoneStatus>b__0(session)
.ctor()
<GetReviewQuizesWithAvailableMilestones>b__0(session)
.ctor()
<GetReviewQuizUserRankings>b__0(session)
.ctor()
<GetReviewQuizUserRankingsAndBestTime>b__0(session)
.ctor()
<AllocateUserToMultiplayerDashGame>b__0(session)
.ctor()
<UpdateDashGameStartTime>b__0(session)
.ctor()
<StartDashGameImmediately>b__0(session)
.ctor()
<LeaveMultiplayerDashGameLobby>b__0(session)
.ctor()
<GetReviewQuizValidQuestions>b__0(session)
.ctor()
<GetReviewQuizValidTranslationDirections>b__0(session)
.ctor()
<SelectQuestionsForReviewQuiz>b__0(session)
.ctor()
<FindPopularDashActivities>b__0(session)
.ctor()
<UpdateMultiplayerDashUserPresence>b__0(session)
.ctor()
<GetNumberOfUsersActiveInDashContext>b__0(session)
.ctor()
<StartNewActivityAttemptAnswer>b__0(session)
.ctor()
<UpdateActivityAttemptAnswer>b__0(session)
.ctor()
<FinaliseActivityAttemptAnswer>b__0(session)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DownloadFile>b__0(session)
.ctor()
<SaveSvgStringAsPng>b__0(session)
.ctor()
<GetUserDetails>b__0()
.ctor()
<GetUserDetailsSecure>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AlterUserLoginDetails>b__0()
.ctor()
<ResetPassword>b__0()
.ctor()
<RequestPasswordResetViaForm>b__0()
.ctor()
<SetValues>b__0(session)
.ctor()
<GetValues>b__0(session)
.ctor()
<GetAllValuesInPath>b__0(session)
.ctor()
<GetAllValuesInPaths>b__0(session)
.ctor()
<DeleteKeys>b__0(session)
.ctor()
<DeleteAllKeysInPath>b__0(session)
.ctor()
<DeleteAllKeysInPaths>b__0(session)
ToString()
.ctor()
get_AuthorID()
set_AuthorID(value)
get_AuthorName()
set_AuthorName(value)
ToCommentRecord(importDate, commentAreaID)
ToInsertStatement(importDate, commentAreaID)
SqlDate(date)
SetAuthor(name, id)
AppendLine(line)
CommitComment()
ToString()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetOrSetStringInCache>b__0()
.cctor()
.ctor()
<PingMemcached>b__21_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SubscribeToDefaultUserChannels>b__0_0(session)
.ctor()
<GetAlertsForUser>b__0(session)
.ctor()
<MarkAlertsAsSeenForUser>b__0(session)
.ctor()
<DeleteSingleUserAlert>b__0(session)
.cctor()
.ctor()
<GetClassesITeach>b__0_0(session)
.ctor()
<GetMyClassesInSchool>b__0(session)
.ctor()
<GetClassesInSchoolWithAccessToSelectedContent>b__0(session)
.ctor()
<CreateNewClass>b__0(session)
.ctor()
<ArchiveClasses>b__0(session)
.ctor()
<UndoClassArchive>b__0(session)
.ctor()
<GetUsersInClasses>b__0(session)
.ctor()
<GetCompetitions>b__0(session)
.ctor()
<GetCompetitionDetails>b__0(session)
.ctor()
<CreateCompetition>b__0(session)
.ctor()
<ModifyCompetition>b__0(session)
.ctor()
<GetSchoolsInCompetition>b__0(session)
.ctor()
<AddSchoolsToCompetition>b__0(session)
.ctor()
<RemoveSchoolsFromCompetition>b__0(session)
.ctor()
<GetRelevantCompetitionsForSchool>b__0(session)
.ctor()
<GetCompetitionPreviewsForFilter>b__0(session)
.ctor()
<GetPendingCompetitionInvitationsForSchool>b__0(session)
.ctor()
<JoinCompetition>b__0(session)
.ctor()
<GetCompetitionTargetSubjects>b__0(session)
.ctor()
<GetSchoolParticipationInfosForCompetition>b__0(session)
.ctor()
<SendCompetitionInvitations>b__0(session)
.ctor()
<GenerateCompetitionCodeFromName>b__0(session)
.ctor()
<ValidateCompetitionCode>b__0(session)
.ctor()
<GetInvitationPreviewDataURI>b__0(session)
.ctor()
<GetInvitationRecipientInfos>b__0(session)
.ctor()
<EmailSupportForHelp>b__0(session)
.ctor()
<GetInvitationTemplate>b__0(session)
.ctor()
<GetContentRestrictionsForCompetition>b__0(session)
.ctor()
<SetContentRestrictionsForCompetition>b__0(session)
.ctor()
<GetUserRestrictionsForCompetition>b__0(session)
.ctor()
<SetUserRestrictionsForCompetition>b__0(session)
.ctor()
<GetTiedCompetitionInfo>b__0(session)
.ctor()
<UpdateModuleInfo>b__0(session)
.ctor()
<UpdateModuleHighlighted>b__0(session)
.ctor()
<UpdateModuleVisibilityForStudents>b__0(session)
.ctor()
<CreateContentList>b__0(session)
.ctor()
<CreateContentList2>b__0(session)
.ctor()
<CreateContentListAndAddToModule>b__0(session)
.ctor()
<CreateContentListAndAddToModule2>b__0(session)
.ctor()
<CreateContentListAndAddToModule3>b__0(session)
.ctor()
<RenameContentListInModule>b__0(session)
.ctor()
<RenameContentListFolderPathForModule>b__0(session)
.ctor()
<CreateCopyOfContentListInModule>b__0(session)
.ctor()
<CreateCopyOfContentListInModule2>b__0(session)
.ctor()
<CreateCopyOfContentListInModule3>b__0(session)
.ctor()
<UpdateContentList>b__0(session)
.ctor()
<DeleteTranslationList>b__0(session)
.ctor()
<AddOrRemoveModuleToTemplates>b__0(session)
.ctor()
<AddOrRemoveModuleToTemlpates>b__0(session)
.ctor()
<AddModuleToTemplate>b__0(session)
.ctor()
<AddModuleToTemplate2>b__0(session)
.ctor()
<RemoveModuleFromTemplate>b__0(session)
.ctor()
<UpdateFeaturedForTemplateModule>b__0(session)
.ctor()
<GetContentModulesForTemplate>b__0(session)
.ctor()
<GetSubjectModuleHierarchy>b__0(session)
.ctor()
<GetTagSetForList>b__0(session)
.ctor()
<GetTagSetForModule>b__0(session)
.ctor()
<GetModulesContainingListActivityTypesForSchoolAndClasses>b__0(session)
.ctor()
<GetAllTranslationListsForModule>b__0(session)
.ctor()
<GetModuleTranslationListsForModule>b__0(session)
.ctor()
<GetModuleTranslationListsForMultipleModules>b__0(session)
.ctor()
<GetModuleTestsForMultipleModules>b__0(session)
.ctor()
<AddContentListsToModule>b__0(session)
.ctor()
<AddContentListsToModule2>b__0(session)
.ctor()
<RemoveContentListsFromModule>b__0(session)
.ctor()
<MakeModuleAvailableForSharing>b__0(session)
.ctor()
<MakeListAvailableForSharing>b__0(session)
.ctor()
<RemoveModuleFromSharing>b__0(session)
.ctor()
<RemoveListFromSharing>b__0(session)
.ctor()
<SearchForSharedModules>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool2>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool3>b__0(session)
.ctor()
<CreateCopyOfModuleForSchool4>b__0(session)
.ctor()
<CreateCopyOfModuleForStudent>b__0(session)
.ctor()
<CreateCopyOfModuleForStudent2>b__0(session)
.ctor()
<GetContentDescriptionsForModule>b__0(session)
.ctor()
<GetContentDescriptionsForContentList>b__0(session)
.ctor()
<GetContentDescriptionsForSpecificContentIDs>b__0(session)
.ctor()
<GetModulesForSpecificSubjectAndSchool>b__0(session)
.ctor()
<SearchForDefinitions>b__0(session)
.ctor()
<SearchForTranslations>b__0(session)
.ctor()
<SearchForTranslationsInSpecificList>b__0(session)
.ctor()
<GetLinkedDefinitions>b__0(session)
.ctor()
<GetFactListDisplayOptions>b__0(session)
.ctor()
<StoreFactListDisplayOptions>b__0(session)
.ctor()
<GetContentSharingStats>b__0(session)
.ctor()
<UpdateContentListSearchMetadata>b__0(session)
.ctor()
<UpdateModuleSearchMetadata>b__0(session)
.ctor()
<SearchForCurriculumStandard>b__0()
.ctor()
<GetCurricula>b__0()
.ctor()
<AddCurriculumStandard>b__0(session)
.ctor()
<UpdateCurriculumStandard>b__0(session)
.ctor()
<SearchForSpecificContent>b__0(session)
.ctor()
<ChangeContentListVisibilityToStudents>b__0(session)
.ctor()
<ChangeContentListActivityType>b__0(session)
.ctor()
<ChangeMilestoneRule>b__0(session)
.ctor()
<CreateMediaItem>b__0(session)
.ctor()
<EditMediaItem>b__0(session)
.ctor()
<SearchForMediaItems>b__0(session)
.ctor()
<GetStructuredActivityWithContent>b__0(session)
.ctor()
<GetContentForCustomStructuredActivity>b__0(session)
.ctor()
<CreateStructuredActivity>b__0(session)
.ctor()
<ModifyStructuredActivity>b__0(session)
.ctor()
<DeleteStructuredActivity>b__0(session)
.ctor()
<ConvertContentListToStructuredActivity>b__0(session)
.ctor()
<BeginDraftTest>b__0(session)
.ctor()
<UpdateDraftTest>b__0(session)
.ctor()
<CommitDraftTest>b__0(session)
.ctor()
<DiscardDraftActivity>b__0(session)
.ctor()
<HasDraftActivity>b__0(session)
.ctor()
<GetEquivalentModuleForSchool>b__0(session)
.ctor()
<ReIndexSchoolContentForSearch>b__0(session)
.ctor()
<GenerateLTILaunchURLForApp>b__0(session)
.ctor()
<ModifyTranslationListContent>b__0(session)
.ctor()
<Login>b__0()
.ctor()
<LoginExtra>b__0()
.ctor()
<LoginExtra2>b__0()
.ctor()
<SecureLogin>b__0()
.ctor()
<SecureLogin2>b__0()
.ctor()
<LoginWithDeviceSession>b__0()
.ctor()
<LoginWithDeviceSession2>b__0()
.ctor()
<LoginWithSessionPromise>b__0()
.cctor()
.ctor()
<GenerateSessionPromiseFromCurrentSession>b__8_0(session)
<AcceptEULA>b__13_0(session)
.ctor()
<GenerateSessionPromiseForImpersonation>b__0(session)
.ctor()
<DirectLogin>b__0()
.ctor()
<DirectLogin2>b__0()
.ctor()
<ChangeSchoolSelection>b__0(session)
.ctor()
<ExtendSession>b__0()
.ctor()
<ExtendSessionAndCheckMessage>b__0()
.ctor()
<EndSession>b__0()
.ctor()
<Impersonate>b__0(session)
.ctor()
<SearchForUsersToImpersonate>b__0(session)
.ctor()
<GenerateDeviceSessionFromLPSessionID>b__0(session)
.ctor()
<ValidateUsernameWithinQuota>b__0(session)
.ctor()
<GetSalesLeadOwnerForSchool>b__0(session)
.ctor()
<GetSalesLeadOwnerForSession>b__0(session)
.cctor()
.ctor()
<StoreMultipleAttributeValues>b__6_0(v)
<GetNumberOfUnreadMessagesForUser>b__40_0(session)
<GetMessageNotificationSyncInfoForUser>b__41_0(session)
.ctor()
<CreateNewConversationFromExistingComment>b__0(session)
.ctor()
<CreateNewConversation>b__0(session)
.ctor()
<CreateNewConversationFromExistingMessage>b__0(session)
.ctor()
<AddNewMessageToConversation>b__0(session)
.ctor()
<EditMessage>b__0(session)
.ctor()
<UpdateConversationParticipants>b__0(session)
.ctor()
<UpdateConversationDetails>b__0(session)
.ctor()
<SetConversationStar>b__0(session)
.ctor()
<SetMessageStar>b__0(session)
.ctor()
<ArchiveConversation>b__0(session)
.ctor()
<MarkMessageAsRead>b__0(session)
.ctor()
<MarkMultipleMessagesAsRead>b__0(session)
.ctor()
<GetMessagesForSession>b__0(session)
.ctor()
<CheckForNewConversationsForSession2>b__0(session)
.ctor()
<GetDeliveryStatusForMessages>b__0(session)
.ctor()
<RemoveDepartmentFromSchool>b__0(session)
.ctor()
<GenerateActionLink>b__0(session)
.ctor()
<GenerateOneClickLoginLinkForTeacherFromCP>b__0(session)
.ctor()
<GetFeedbackForSchool>b__0(session)
.ctor()
<GetFeedbackForRelevantSchool>b__0(session)
.cctor()
.ctor()
<GetTotalNumberOfFeedback>b__5_0(session)
.ctor()
<DownloadFile>b__0(session)
.ctor()
<GenerateS3FileUploadDirective>b__0(session)
.ctor()
<GetStatusForSinglePDFRequest>b__0(session)
.ctor()
<GetStatusForPDFBatchRequest>b__0(session)
.ctor()
<ConvertCsvToExcelSpreadsheet>b__0(session)
.cctor()
.ctor()
<GetAllLanguages>b__0_0()
<GetAllLanguagesOnly>b__1_0()
.ctor()
<GetSubjectsForSchool>b__0(session)
.ctor()
<GetTranslationDirections>b__0(session)
.ctor()
<AddTranslationsToExistingModule>b__0(session)
.ctor()
<AddTranslationsToExistingModule2>b__0(session)
.ctor()
<GetTranslationSuggestions>b__0(session)
.ctor()
<TopListsTranslationIsIn>b__0(session)
.ctor()
<AcceptSuggestions>b__0(session)
.ctor()
<DeclineSuggestions>b__0(session)
.ctor()
<GetContentTemplates>b__0(session)
.ctor()
<GetContentTemplatesForSchool>b__0(session)
.ctor()
<GetModuleIDsInTemplate>b__0(session)
.ctor()
<GetModulesWithLanguagesForSchoolAndClasses>b__0(session)
.cctor()
.ctor()
<GetLicenceData>b__2_0(session)
<GetAllProductDetailsForLicensing>b__15_0(session)
<GetCurrencies>b__18_0()
.ctor()
<CreateNewLicence>b__0(session)
.ctor()
<ModifyLicence>b__0(session)
.ctor()
<AssociateClassWithLicence>b__0(session)
.ctor()
<MoveMultipleClassesToLicence>b__0(session)
.ctor()
<GetLicenceDataForSpecificLicences>b__0(session)
.ctor()
<GetLicenceDataForSchool>b__0(session)
.ctor()
<GetRecentTransactionSummaries>b__0(session)
.ctor()
<DownloadLicenceTransactionsForSchool>b__0(session)
.ctor()
<GetClassesLicencedForContent>b__0(session)
.ctor()
<GetNewsFeedItemsForUser>b__0(session)
.ctor()
<UpdateNewsFeedItemInteraction>b__0(session)
.ctor()
<GetPublicNewsItemsForFilter>b__0(session)
.ctor()
<GetNewsItemsForFilter>b__0(session)
.ctor()
<StoreNewsFeedItem>b__0(session)
.ctor()
<GetMetadataForAllNewsFeedPosts>b__0(session)
.ctor()
<UpdateDraftStatusOfItem>b__0(session)
.ctor()
<PreviewNewsFeedTargetingResults>b__0(session)
.ctor()
<GetNewsFeedItemData>b__0(session)
.ctor()
<GetInteractionDataForNewsFeedItem>b__0(session)
.ctor()
<ReportProblemsWithContent>b__0(session)
.ctor()
<GetReportedFlags>b__0(session)
.ctor()
<GetReportedFlags2>b__0(session)
.ctor()
<MarkResolved>b__0(session)
.ctor()
<MarkSeen>b__0(session)
.ctor()
<FixTranslation>b__0(session)
.ctor()
<GetQuestionListContent>b__0(session)
.ctor()
<GetQuestionSummariesForSpecificQuestions>b__0(session)
.ctor()
<UpdateQuestionTitle>b__0(session)
.ctor()
<StoreQuestion>b__0(session)
.ctor()
<StoreQuestion2>b__0(session)
.ctor()
<SearchQuestions>b__0(session)
.ctor()
<SearchQuestionsInModule>b__0(session)
.ctor()
<GetQuestions>b__0(session)
.ctor()
<SearchConcepts>b__0(session)
.ctor()
<StoreConcept>b__0(session)
.ctor()
<GetFeedback>b__0(session)
.ctor()
<UpdateFeedbackStatus>b__0(session)
.ctor()
<ArchiveFeedback>b__0(session)
.ctor()
<GetSymbolsForSubject>b__0(session)
.ctor()
<DeepCopyQuestion>b__0(session)
.ctor()
<CopyQuestion>b__0(session)
.ctor()
<GetQuestionAuditSummary>b__0(session)
.ctor()
<GetQuestionFeedbackSummary>b__0(session)
.ctor()
<SendFeedback>b__0(session)
.ctor()
<SendFeedback2>b__0(session)
.ctor()
<NotifyCollaboratorsAboutChangeToQuestion>b__0(session)
.ctor()
<ToggleDraftModeOfQuestions>b__0(session)
.ctor()
<UpdateStatusOfQuestions>b__0(session)
.ctor()
<GetQuestionTemplates>b__0(session)
.ctor()
<SearchForSchoolByName>b__0(session)
.ctor()
<GetSchoolsWithLicensedUsers>b__0(session)
.cctor()
.ctor()
<GetAllSchools>b__3_0(session)
<GetAllCountries>b__19_0()
<GetPartners>b__28_0()
.ctor()
<GetSchoolData>b__0(session)
.ctor()
<CreateSchool>b__0(session)
.ctor()
<CreateSchool2>b__0(session)
.ctor()
<CreateSchool3>b__0(session)
.ctor()
<EditContentTemplatesForSchool>b__0(session)
.ctor()
<CreateAndSetUpSchool7>b__0(session)
.ctor()
<GetStatesForCountry>b__0()
.ctor()
<GetListOfStudentsPasswordChangedSettings>b__0(session)
.ctor()
<FindPotentialSchoolClashes>b__0(session)
.ctor()
<FindNearbySimilarSchools>b__0(session)
.ctor()
<GetSentenceData>b__0(session)
.ctor()
<UploadSoundFiles>b__0(session)
.ctor()
<TestUploadSoundFiles>b__0(session)
.ctor()
<GetSchoolSummaryStats>b__0(session)
.ctor()
<GetStatsForClassesUsingFilter>b__0(session)
.ctor()
<GetStudentProgress>b__0(session)
.ctor()
<GetContentProgress>b__0(session)
.ctor()
<GetOrderedSubjectsForClasses>b__0(session)
.ctor()
<GetRelevantDataSetsForSchool>b__0(session)
.ctor()
<GetRelevantCategorisedDataSetsForSchool>b__0(session)
.ctor()
<GetWCUsersWithinScoreRange>b__0()
.ctor()
<GetSchoolAllStats>b__0()
.ctor()
<GetAllKnowledgeDataSets>b__0(session)
.ctor()
<GetSchoolSubjectUsage>b__0(session)
.ctor()
<GetSmartLessonProgressReportForClasses>b__0(session)
.ctor()
<GetSmartLessonProgressReportForSpecificUser>b__0(session)
.ctor()
<GetSmartLessonUserAnswersForClasses>b__0(session)
.ctor()
<GetSmartLessonUserAnswersForSpecificUser>b__0(session)
.ctor()
<GetSmartLessonCommonMistakesForClasses>b__0(session)
.ctor()
<GetSmartLessonCommonMistakesForSpecificUser>b__0(session)
.ctor()
<GetClassUsageDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetClassUsageSummaryForDashboard>b__0(session)
.ctor()
<GetStudentUsageDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetClassTaskCompletionDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetStudentTaskCompletionDataForSubjectsInTimePeriod>b__0(session)
.ctor()
<GetContentListUserProgressForStudent>b__0(session)
.ctor()
<GetContentListUserProgressForClasses>b__0(session)
.ctor()
<RequestAdditionToClassForExistingUser>b__0()
.ctor()
<RequestAdditionToClassForNewUser>b__0()
.ctor()
<GetUserDataForSpecificUsers>b__0(session)
.ctor()
<GetUserAndLoginDataForSpecificUsers>b__0(session)
.ctor()
<ResetUserPasswords>b__0(session)
.ctor()
<ResetUserPasswords2>b__0(session)
.ctor()
<EditUserDetails>b__0(session)
.ctor()
<EditUserDetails2>b__0(session)
.ctor()
<EditUserDetails3>b__0(session)
.ctor()
<AcceptUserJoinRequests>b__0(session)
.ctor()
<DeclineUserJoinRequests>b__0(session)
.cctor()
.ctor()
<GetCurrentOnlineUsers>b__29_0(session)
<GetCurrentOnlineUserCount>b__30_0(session)
<GetCheers>b__54_0(session)
<DoesUsersDepartmentHaveStudentsEnrolled>b__62_0(session)
.ctor()
<GetListOfOnlineUsersInMySchool>b__0(session)
.ctor()
<GetCurrentOnlineUsersForClasses>b__0(session)
.ctor()
<FindUnavailableUsernamesOutsideSchool>b__0(session)
.ctor()
<CheckUsersHaveDefaultPassword>b__0(session)
.ctor()
<GetDatasetGroupDataForSchool>b__0(session)
.ctor()
<StoreUploadHistoryLogItemToDatabase>b__0(session)
.ctor()
<StoreUploadCompleteCommentAndNotifySLO>b__0(session)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserEmailAddress>b__0(session)
.ctor()
<GetContactsStatsForSchool>b__0(session)
.ctor()
<GetTeacherCertificationUserInfoForSchool>b__0(session)
.ctor()
<SearchForUsersInSchool>b__0(session)
.ctor()
<ResetPasswordToFirstname>b__0(session)
.ctor()
<SearchForUsersGlobally>b__0(session)
.ctor()
<UpdateUserEmailAddress>b__0(session)
.ctor()
<UpdateUserEmailAddress2>b__0(session)
.ctor()
<CheerStudentsOn>b__0(session)
.ctor()
<RecordUserNavigation>b__0(session)
.ctor()
<GetMostRecentNavigationEventForUser>b__0(session)
.ctor()
<RecordClassListUpload>b__0(session)
.ctor()
<GetSampleUserIdentifiers>b__0(session)
.ctor()
<PreviewClassListDetailsEmail>b__0(session)
.ctor()
<SendClassListDetailsToTeachers>b__0(session)
.ctor()
<DownloadClassListDetails>b__0(session)
.ctor()
<LogCPDashboardSearchHistoryRecord>b__0(session)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CreateAssessmentTask>b__0(session)
.ctor()
<CreateEarnPointsTask>b__0(session)
.ctor()
<CreateLearnContentTask>b__0(session)
.ctor()
<CreateAssessmentTask2>b__0(session)
.ctor()
<CreateEarnPointsTask2>b__0(session)
.ctor()
<CreateEarnPointsTask3>b__0(session)
.ctor()
<CreateEarnPointsTask4>b__0(session)
.ctor()
<CreateLearnContentTask2>b__0(session)
.ctor()
<CreateLearnContentTask3>b__0(session)
.ctor()
<CreateLearnContentTask4>b__0(session)
.ctor()
<CreateAssessmentTask3>b__0(session)
.ctor()
<CreateAssessmentTask4>b__0(session)
.ctor()
<CreateAssessmentTask5>b__0(session)
.ctor()
<CreateAssessmentTask6>b__0(session)
.ctor()
<CreateAssessmentTask7>b__0(session)
.ctor()
<CreateCompleteActivityTask>b__0(session)
.ctor()
<CreateCompleteActivityTask2>b__0(session)
.ctor()
<CreateCompleteActivityTask3>b__0(session)
.ctor()
<ModifyAssessmentTask>b__0(session)
.ctor()
<UpdateAssessmentTaskAccessCode>b__0(session)
.ctor()
<UpdateAssessmentTaskResultPublicationStatus>b__0(session)
.ctor()
<ModifyEarnPointsTask>b__0(session)
.ctor()
<ModifyLearnContentTask>b__0(session)
.ctor()
<ModifyCompleteActivityTask>b__0(session)
.ctor()
<DeleteTask>b__0(session)
.ctor()
<DeleteAssessmentTask>b__0(session)
.ctor()
<ReopenEarnPointsTask>b__0(session)
.ctor()
<ReopenLearnContentTask>b__0(session)
.ctor()
<ReopenCompleteActivityTask>b__0(session)
.ctor()
<ReopenAssessmentTask>b__0(session)
.ctor()
<SendImmediateReminderEmailToStudentsAboutTask>b__0(session)
.cctor()
.ctor()
<GetTasksOwnedByUser>b__32_0(session)
<GetAllAssessmentTemplates>b__77_0(session)
<GetGradingMethods>b__102_0(session)
<GetDemoTaskDetails>b__118_0()
.ctor()
<GetTasksOwnedByUser2>b__0(session)
.ctor()
<GetTasksForClass>b__0(session)
.ctor()
<GetTasksForClass2>b__0(session)
.ctor()
<GetTasksForClasses>b__0(session)
.ctor()
<GetTaskCountsForClasses>b__0(session)
.ctor()
<GetSpecificTasks>b__0(session)
.ctor()
<GetTaskProgressOverviewForMultipleTasks>b__0(session)
.ctor()
<GetProgressReportInfoForLearnContentTask>b__0(session)
.ctor()
<GetProgressReportInfoForLearnContentTask2>b__0(session)
.ctor()
<GetProgressReportInfoForAssessmentTask>b__0(session)
.ctor()
<GetProgressReportInfoForAssessmentTask2>b__0(session)
.ctor()
<GetProgressReportInfoForEarnPointsTask>b__0(session)
.ctor()
<GetProgressReportInfoForEarnPointsTask2>b__0(session)
.ctor()
<GetProgressReportInfoForCompleteActivityTask>b__0(session)
.ctor()
<GetProgressReportInfoForCompleteActivityTask2>b__0(session)
.ctor()
<GetSmartLessonProgressReportForCompleteActivityTask>b__0(session)
.ctor()
<GetSmartLessonProgressReportForCompleteActivityTask2>b__0(session)
.ctor()
<CheckWhetherSmartLessonReportHasNewData>b__0(session)
.ctor()
<GetSmartLessonProgressReportForCompleteActivityTaskForSpecificUser>b__0(session)
.ctor()
<CheckWhetherSmartLessonReportForSpecificUserHasNewData>b__0(session)
.ctor()
<GetCommonMistakesForCompleteActivityTask>b__0(session)
.ctor()
<GetCommonMistakesForCompleteActivityTask2>b__0(session)
.ctor()
<GetCommonMistakesForCompleteActivityTaskForSpecificUser>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTask>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTask2>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTask3>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTaskForSpecificUser>b__0(session)
.ctor()
<GetUserAnswersForCompleteActivityTaskForSpecificUser2>b__0(session)
.ctor()
<GetAnswerReviewsReportForCompleteActivityTask>b__0(session)
.ctor()
<DoesTaskHaveSmartLessonExtendedResponseSections>b__0(session)
.ctor()
<SubmitSmartLessonAnswerReview>b__0(session)
.ctor()
<GetUserTaskLiveUserProgressForCompleteActivityTask>b__0(session)
.ctor()
<GetUserTaskLiveUserProgressForEarnPointsTask>b__0(session)
.ctor()
<GetUserTaskLiveUserProgressForLearnContentTask>b__0(session)
.ctor()
<GetMultipleHomeworkTasksSummaryReportForClasses>b__0(session)
.ctor()
<EstimateTimeForLearnContentTask>b__0(session)
.ctor()
<EstimateTimeForEarnPointsTask>b__0(session)
.ctor()
<EstimateTimeForCompleteActivityTask>b__0(session)
.ctor()
<EstimateTimeForCompleteActivityTask2>b__0(session)
.ctor()
<GetTestForAssessmentTask>b__0(session)
.ctor()
<GetTest>b__0(session)
.ctor()
<CreateTest>b__0(session)
.ctor()
<ModifyTest>b__0(session)
.ctor()
<DeleteTest>b__0(session)
.ctor()
<EstimateTimeForAssessmentTaskDataSelection>b__0(session)
.ctor()
<EstimateTimeForAssessmentTaskDataSelection2>b__0(session)
.ctor()
<EstimateMaxNumberOfQuestionsForQuickTestContentSelection>b__0(session)
.ctor()
<GetTestAttemptMarkingData>b__0(session)
.ctor()
<GetAssessmentTaskAttemptsMarkingData>b__0(session)
.ctor()
<SaveTeacherQuestionGradesForAttempt>b__0(session)
.ctor()
<FinaliseTeacherQuestionGradesForAttempt>b__0(session)
.ctor()
<FinaliseTeacherAggregatedGradeForAttempt>b__0(session)
.ctor()
<FlagSectionMarkingStatusAsComplete>b__0(session)
.ctor()
<GetCurrentAssessmentAttemptDetailsForAssessmentTasks>b__0(session)
.ctor()
<GetCurrentAssessmentAttemptDetailsForAssessmentTaskForUser>b__0(session)
.ctor()
<CreateQuickTest>b__0(session)
.ctor()
<ModifyQuickTest>b__0(session)
.ctor()
<GetQuickTestForAssessmentTask>b__0(session)
.ctor()
<DoesTestHaveAnyAttempts>b__0(session)
.ctor()
<GetUserAssessmentResultSummaries>b__0(session)
.ctor()
<GetUserAssessmentResultSummariesWithFilter>b__0(session)
.ctor()
<GetAssessmentTaskReportingData>b__0(session)
.ctor()
<GetAssessmentTaskReportingData2>b__0(session)
.ctor()
<GetUserAssessmentReportingData>b__0(session)
.ctor()
<GetStudentAnalysisGroups>b__0(session)
.ctor()
<GetGradingMethod>b__0(session)
.ctor()
<HasTestBeenAttempted>b__0(session)
.ctor()
<CheckOutNextAssessmentAttemptForMarking>b__0(session)
.ctor()
<CheckOutSpecificAssessmentAttemptForMarking>b__0(session)
.ctor()
<GetSpecificAssessmentAttempt>b__0(session)
.ctor()
<CheckBackInSpecificAssessmentAttemptForMarking>b__0(session)
.ctor()
<GetMarkingProgressStatus>b__0(session)
.ctor()
<GetAssessmentSectionVariantsForMarking>b__0(session)
.ctor()
<GetMarkerHistory>b__0(session)
.ctor()
<GetTestMarkers>b__0(session)
.ctor()
<GetMarkingSetWithPrivilages>b__0(session)
.ctor()
<UpdateMarkingCheckoutLastUsed>b__0(session)
.ctor()
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__0(session)
.ctor()
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask2>b__0(session)
.ctor()
<MakeAttemptEditable>b__0(session)
.ctor()
<GetSampleQuestionSetForAssessment>b__0(session)
.ctor()
<GetUserDetailsForTask>b__0(session)
.ctor()
<GetUserDetailsForTask2>b__0(session)
.ctor()
<GetUserOnlineStatusForTask>b__0(session)
.ctor()
<GetUserOnlineStatusForTask2>b__0(session)
.ctor()
<ExportPDFOfAssessmentTaskAttempt>b__0(session)
.ctor()
<ExportSpreadsheetOfAssessmentTaskAttempt>b__0(session)
.ctor()
<ExportSpreadsheetOfAllAttemptsForAssessmentTask>b__0(session)
.ctor()
<ExportPDFOfAssessmentAttempt>b__0(session)
.ctor()
<ExportPDFsOfAllAttemptsForAssessmentTask>b__0(session)
.ctor()
<ExportPDFPreviewOfAssessment>b__0(session)
.ctor()
<GetReviewQuizValidQuestions>b__0(session)
.ctor()
<GetReviewQuizValidTranslationDirections>b__0(session)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<DownloadSpreadsheetOfExternalVideos>b__6_0(vid)
<DownloadSpreadsheetOfExternalVideos>b__6_1(vid)
<GetNewYoutubeVideosForWhitelist>b__9_0(q)
<ValidateYouTubeVideos>b__11_0(i)
<ValidateYouTubeVideos>b__12_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<BuildUpFullSchoolAddress>b__0(i)
<BuildUpFullSchoolAddress>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ResetLocationsCache>b__2_0(country)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetStatesForCountry>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
<GenerateTransactionsForAddingUsersToClass>b__0(x)
.cctor()
.ctor()
<GenerateTransactionsForAddingUsersToClass>b__6_1(x)
<GenerateTransactionsForBulkImportingStudents>b__8_0(x)
<GenerateTransactionsForBulkImportingStudents>b__8_1(x)
<GenerateTransactionsForBulkImportingStudents>b__8_3(x)
<GetRecentTransactionSummaries>b__23_1(x)
.ctor()
<GenerateTransactionsForBulkImportingStudents>b__2(x)
.ctor()
<GetRecentTransactionSummaries>b__0(x)
.ctor()
<GetLicenceWithProduct>b__0(s)
.ctor()
<GetLicenceWithProduct>b__2(s)
.cctor()
.ctor()
<GetLicenceWithProduct>b__8_1(s)
<GetLicenceWithProduct>b__8_3(s)
<ConvertProductGroupToComponents>b__14_1(i)
<ConvertProductComponentsToGroup>b__15_0(i)
<ConvertProductComponentsToGroup>b__15_1(i)
<ConvertProductComponentsToGroup>b__16_0(i)
<ConvertProductComponentsToGroup>b__16_1(i)
<GetAllProductDetailsForLicensing>b__37_1(s)
<DoesUserHaveActiveLicenceForTheirDepartments>b__41_0(product)
<DoesUserHaveActiveLicenceForTheirDepartments>b__41_1(s)
<DoesUserHaveActiveLicenceForTheirDepartments>b__41_2(d)
<DoDepartmentsHaveActiveLicences>b__42_0(l)
<DoDepartmentsHaveActiveLicences>b__42_1(l)
<DoDepartmentsHaveActiveLicences>b__42_2(product)
<DoDepartmentsHaveActiveLicences>b__42_3(subj)
<IdentifyLicencesExpiringSoon>b__43_0(i)
<IdentifyLicencesExpiringSoon>b__43_1(i)
<IdentifyLicencesExpiringSoon>b__43_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ConvertProductGroupToComponents>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ConvertProductComponentsToGroup>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AssociateMultipleClassesWithLicence>b__0(i)
.ctor()
<DisassociateMultipleClassesWithLicence>b__0(i)
.ctor()
<GetAllProductDetailsForLicensing>b__0(s)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ExportAssessmentAttemptsForTasksAsSpreadsheet>b__1_0(i)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__2_0(i)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__2_1(i)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__2_3(i)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__2_4(i)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__2_5(u)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__2_6(i)
<AddAttemptToSpreadsheet>b__4_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__2(i)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__7(u)
<ExportAssessmentAttemptsAsSpreadsheetAfterValidation>b__8(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
<ConvertCsvToExcelSpreadsheet>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetStatusForPDFBatchRequest>b__19_0(i)
<SendEmailNotificationForPDFs>b__29_0(r)
<SendEmailNotificationForPDFs>b__29_1(r)
<SendEmailNotificationForPDFs>b__29_2(r)
<SendEmailNotificationForPDFs>b__29_3(r)
<SendEmailNotificationForPDFs>b__29_4(r)
<SendSlackNotificationForPDFs>b__32_0(r)
<SendSlackNotificationForPDFs>b__32_1(r)
<SendSlackNotificationForPDFs>b__32_2(r)
<SendSlackNotificationForPDFs>b__32_3(r)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ValidateFileName>b__41_0(current, c)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor(object, method)
Invoke()
BeginInvoke(callback, object)
EndInvoke(result)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<AddMessagesToQueue>b__23_0(i)
<AddMessagesToQueueAsync>b__24_0(i)
<AddMessagesToQueue>b__27_0(message)
<AddMessagesToQueueAsync>b__28_0(message)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor(object, method)
Invoke()
BeginInvoke(callback, object)
EndInvoke(result)
.ctor(object, method)
Invoke(sender, e)
BeginInvoke(sender, e, callback, object)
EndInvoke(result)
.ctor(object, method)
Invoke()
BeginInvoke(callback, object)
EndInvoke(result)
.ctor(object, method)
Invoke(sender, e)
BeginInvoke(sender, e, callback, object)
EndInvoke(result)
.ctor(object, method)
Invoke()
BeginInvoke(callback, object)
EndInvoke(result)
.ctor(object, method)
Invoke()
BeginInvoke(callback, object)
EndInvoke(result)
.ctor(object, method)
Invoke(sender, e)
BeginInvoke(sender, e, callback, object)
EndInvoke(result)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<IsValid>b__0(match)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<.cctor>b__37_0(sender)
.cctor()
.ctor()
<AddMessagesToQueue>b__5_0(msg)
<AddMessagesToQueue>b__9_0(msg)
<AddMessagesToQueueAsync>b__15_0(msg)
<AddMessagesToQueueAsync>b__19_0(msg)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateMultipleRemoveParentEmailActionLinkURLs>b__12_0(i)
<GenerateMultipleRemoveParentEmailActionLinkURLs>b__12_1(i)
<DownloadClassDetails>b__35_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DownloadClassDetails>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<PrepareWelcomeBackEmailData>b__2_0(i)
<PrepareWelcomeBackEmailData>b__2_1(j)
<PrepareWelcomeBackEmailData>b__2_2(j)
<PrepareWelcomeBackEmailData>b__2_3(i)
<PrepareWelcomeBackEmailData>b__2_4(i)
<PrepareWelcomeBackEmailData>b__2_5(dept)
<PrepareWelcomeBackEmailData>b__2_6(i)
<SendPregeneratedWelcomeBackEmails>b__3_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FindAllVisibleDefinitionsMatchingLanguage>b__0(lookup)
.cctor()
.ctor()
<FindAllVisibleDefinitionsMatchingLanguage>b__85_1(lookup)
.cctor()
.ctor()
<ConvertToBusinessObject>b__71_0(schedule)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetFailedSQLAgentJobHistory>b__1(item)
.cctor()
.ctor()
<GetFailedSQLAgentJobHistory>b__2_0(item)
<SendAlertForFailedSQLAgentSteps>b__3_0(item)
<SendAlertForFailedSQLAgentSteps>b__3_1(g)
<SendAlertForFailedSQLAgentSteps>b__3_2(i)
<SendAlertForFailedSQLAgentSteps>b__3_3(i)
<.cctor>b__10_0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.cctor()
.ctor()
<.ctor>b__8_0(v)
<.ctor>b__8_1(v)
.ctor(<>1__state)
System.IDisposable.Dispose()
MoveNext()
System.Collections.Generic.IEnumerator<nz.co.LanguagePerfect.Services.CRM.BusinessObjects.AttributeCodeValuesItem>.get_Current()
System.Collections.IEnumerator.Reset()
System.Collections.IEnumerator.get_Current()
get_ContactRolesParsed()
.ctor()
.ctor()
<ProcessConferenceForm>b__0(i)
<ProcessConferenceForm>b__1(i)
<ProcessConferenceForm>b__2(i)
.cctor()
.ctor()
<ProcessConferenceForm>b__3_3(c)
<ConvertPhoneNumberToRegexPattern>b__8_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetCommentsAndConversationsForSchool>b__23_0(i)
<GetCommentsForSchoolFromDatabaseAfterValidation>b__27_0(i)
<CheckForNewCommentsInSchool>b__34_0(i)
<CheckForNewCommentsInSchoolAfterValidation>b__35_1(r)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CheckForNewCommentsInSchoolAfterValidation>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAttributeReferenceData>b__0()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetSalesLeadOwnerForSchool>b__0(i)
.ctor()
<GetSalesLeadOwnerForSchool>b__1(j)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetSalesLeadOwnerForUser>b__15_0(i)
<UpsertAttributeValues>b__18_1(rec)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<UpsertAttributeValues>b__0(v)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.cctor()
.ctor()
<TagTheseTranslations>b__3_0(code)
<AddTagsToTranslation>b__4_0(transTag)
<AddTagsToTranslation>b__4_1(<>h__TransparentIdentifier0)
.ctor()
.ctor()
<GetSubjectModuleHierarchy>b__0(lang)
<GetSubjectModuleHierarchy>b__1(pair)
.cctor()
.ctor()
<GetSubjectModuleHierarchy>b__1_2(d)
<GetSubjectModuleHierarchy>b__1_3(m)
<GetFolderPresenceForModules>b__7_0(row)
<GetFolderPresenceForModules>b__7_1(row)
<SubstituteTranslationListsWithFactListsWherePossible>b__8_0(list)
<EditTranslation>b__16_0(d)
<EditTranslation>b__16_2(lookup)
<EditTranslation>b__16_5(t)
<MergeDuplicatesForTranslation>b__17_0(t)
<EnsureKeeperHasAllHiddenDefinitions>b__18_0(trans)
<EnsureKeeperHasAllHiddenDefinitions>b__18_1(trans, lookup)
<EnsureKeeperHasAllHiddenDefinitions>b__18_2(<>h__TransparentIdentifier0)
<EnsureKeeperHasAllHiddenDefinitions>b__18_3(<>h__TransparentIdentifier0)
<EnsureKeeperHasAllHiddenDefinitions>b__18_4(lookup)
<EnsureKeeperHasAllHiddenDefinitions>b__18_5(definitionId)
<CopyTranslations>b__27_0(t)
<CopyTranslations>b__27_1(t)
<LoadContentSet>b__28_0(contrib)
<LoadContentSet>b__28_1(list)
<RebuildCompositeList>b__35_0(id)
<RebuildCompositeList>b__35_1(id)
<RebuildCompositeList>b__35_2(translationID)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<EditTranslation>b__4(d)
.ctor()
<EditTranslation>b__1(lookup)
.ctor()
<EditTranslation>b__3(transDefToRemove)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetContentSharingStats>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SearchForCurriculumStandardInSpecificSubject>b__2_0(c)
<SearchForCurriculumStandardInSpecificSubject>b__2_1(hit)
<SearchForSharedModules>b__4_0(hit)
<SearchForSharedModules>b__4_1(hit)
<SearchForSharedModules>b__4_2(hit)
<SearchForSharedModules>b__4_3(hit)
<SearchForSpecificContentWithSearchTerms>b__7_0(i)
<SearchForSpecificContentWithSearchTerms>b__7_4(hit)
<SearchForSpecificContentWithSearchTerms>b__7_5(hit)
<SearchForSpecificContentWithSearchTerms>b__7_6(i)
<SearchForSpecificContentWithSearchTerms>b__7_7(hit)
<SearchForSpecificContentWithSearchTerms>b__7_8(hit)
<SearchForSpecificContentWithSearchTerms>b__7_9(hit)
<SearchForSpecificContentWithSearchTerms>b__7_10(hit)
<SearchForSpecificContentWithSearchTerms>b__7_11(i)
<SearchForSpecificContentWithSearchTerms>b__7_12(i)
<SearchForSpecificContentWithSearchTerms>b__7_13(i)
<SearchForSpecificContentWithSearchTerms>b__7_14(hit)
<SearchForSpecificContentWithSearchTerms>b__7_15(hit)
<SearchForSpecificContentWithSearchTerms>b__7_16(hit)
<SearchForSpecificContentWithSearchTerms>b__7_17(hit)
<SearchForSpecificContentWithSearchTerms>b__7_18(i)
<SearchForSpecificContentWithSearchTerms>b__7_19(i)
<SearchForSpecificContentWithSearchTerms>b__7_20(i)
<SearchForSpecificContentWithSearchTerms>b__7_22(hit)
<SearchForSpecificContentWithSearchTerms>b__7_24(hit)
<SearchForSpecificContentWithSearchTerms>b__7_25(i)
<SearchForSpecificContentWithSearchTerms>b__7_26(i)
<SearchForSpecificContentWithSearchTerms>b__7_28(i)
<SearchForSpecificContentWithSearchTerms>b__7_30(i)
<SearchForSpecificContentWithSearchTerms>b__7_32(i)
<GenerateSchoolSubscribedContentListSearchResults>b__10_0(i)
<GenerateUserSubscribedContentListSearchResults>b__11_0(i)
<ProcessCurriculumStandardSearchFacetResults>b__15_0(r)
<ProcessCurriculumStandardSearchFacetResults>b__15_1(i)
<ProcessCurriculumStandardSearchFacetResults>b__15_2(i)
<ProcessCurriculumSubjectSearchFacetResults>b__16_0(i)
<ProcessCurriculumSubjectSearchFacetResults>b__16_1(i)
<ProcessCurriculumLevelSearchFacetResults>b__17_0(i)
<ProcessCurriculumLevelSearchFacetResults>b__17_1(i)
<ProcessCurriculumSearchFacetResults>b__18_0(i)
<ProcessCurriculumSearchFacetResults>b__18_1(i)
<ProcessTagSearchFacetResults>b__19_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SearchForSpecificContentWithSearchTerms>b__21(hit)
<SearchForSpecificContentWithSearchTerms>b__23(hit)
.ctor()
<SearchForSpecificContentWithSearchTerms>b__1()
<SearchForSpecificContentWithSearchTerms>b__2()
<SearchForSpecificContentWithSearchTerms>b__3()
.ctor()
<SearchForSpecificContentWithSearchTerms>b__27(i)
<SearchForSpecificContentWithSearchTerms>b__29(i)
<SearchForSpecificContentWithSearchTerms>b__31(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
.ctor()
.ctor()
.cctor()
.ctor()
<GetAllCurriculumStandardsWithTags>b__2_0(t)
<GetSpecificCurriculumStandardsWithTags>b__3_0(t)
<GetCurriculumWithAllLevelsFromDatabase>b__9_0(s)
<GetCurriculumWithAllLevelsFromDatabase>b__9_1(link)
<GetCurriculumWithAllLevelsFromDatabase>b__9_2(link)
<GetAllCurriculaWithAllLevels>b__10_0()
<GetAllCurriculWithAllLevelsFromDatabase>b__12_0(t)
<GetAllCurriculWithAllLevelsFromDatabase>b__12_1(t)
<GetAllCurriculWithAllLevelsFromDatabase>b__12_2(t)
<GetAllCurriculWithAllLevelsFromDatabase>b__12_3(s)
<GetAllCurriculWithAllLevelsFromDatabase>b__12_4(link)
<GetAllCurriculWithAllLevelsFromDatabase>b__12_5(link)
<GetMultipleCurriculumStandards>b__14_0(i)
<GetTagSetForMultipleReferencedItems>b__22_0(id)
<GetTagSetForMultipleReferencedItems>b__22_1(t)
<GetTagSetForMultipleReferencedItems>b__22_2(t)
<GetTagSetForMultipleReferencedItems>b__22_3(t)
<GetTagSetForMultipleReferencedItems>b__22_4(t)
<GetTagSetForMultipleReferencedItems>b__22_5(t)
<GetTagSetForMultipleReferencedItems>b__22_6(t)
<GetTagSetForMultipleReferencedItems>b__22_7(t)
<UpdateContentListTagsAfterValidation>b__27_0(t)
<UpdateModuleTagsAfterValidation>b__36_0(t)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCurriculumWithAllLevels>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetWordFrequenciesForSubject>b__0()
.cctor()
.ctor()
<GetWordFrequenciesForSubjectFromDatabase>b__14_0(i)
<GetWordFrequenciesForSubjectFromDatabase>b__14_1(i)
<GetWordPairFrequenciesForSubjectFromDatabase>b__17_0(i)
<GenerateWordPairAffinities>b__18_0(i)
<GenerateWordPairAffinities>b__18_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetWordPairFrequenciesForSubject>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateSearchDocumentsForSubscribedContentLists>b__13_0(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_1(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_2(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_3(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_4(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_5(t)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_6(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_7(st)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_8(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_9(i)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_10(t)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_11(t)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_12(t)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_13(t)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_14(t)
<GenerateSearchDocumentsForSubscribedContentLists>b__13_15(i)
<GenerateSearchDocumentsForSubscribedModules>b__14_0(i)
<GenerateSearchDocumentsForSubscribedModules>b__14_1(i)
<GenerateSearchDocumentsForSubscribedModules>b__14_2(t)
<GenerateSearchDocumentsForSubscribedModules>b__14_3(i)
<GenerateSearchDocumentsForSubscribedModules>b__14_4(st)
<GenerateSearchDocumentsForSubscribedModules>b__14_5(i)
<GenerateSearchDocumentsForSubscribedModules>b__14_6(t)
<GenerateSearchDocumentsForSubscribedModules>b__14_7(t)
<GenerateSearchDocumentsForSubscribedModules>b__14_8(t)
<GenerateSearchDocumentsForSubscribedModules>b__14_9(t)
<GenerateSearchDocumentsForSubscribedModules>b__14_10(t)
<GetModuleSchoolSpecificInfoForContentLists>b__16_0(i)
<GetModuleSchoolSpecificInfoForContentLists>b__16_1(i)
<GetModulePersonalContentListSpecificInfoForContentLists>b__17_0(i)
<GetModulePersonalContentListSpecificInfoForContentLists>b__17_1(i)
<GetContentListAuthorInfo>b__19_0(i)
<GetModuleAuthorInfo>b__20_0(i)
<DeleteSearchDocuments>b__21_0(i)
<DeleteSearchDocuments>b__21_1(i)
<DeleteSearchDocuments>b__21_2(item)
<GenerateSearchDocumentsForReferencedItems>b__23_0(i)
<GenerateSubscribedReferencedItemsForContentLists>b__29_0(i)
<GenerateSubscribedReferencedItemsForContentLists>b__30_0(link)
<GenerateSubscribedReferencedItemsForSchoolModulePairs>b__35_0(pair)
<FlagSubscribedSearchDocumentsForSearchUpdate>b__41_0(i)
<FlagSubscribedSearchDocumentsForSearchDelete>b__42_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<DeleteAllItemsOnSearchServer>b__44_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateSearchDocumentsForReferencedItems>b__5_0(i)
<GenerateSearchDocumentsForReferencedItems>b__5_1(i)
<GenerateSearchDocumentsForContentLists>b__6_0(i)
<GenerateSearchDocumentsForContentLists>b__6_1(i)
<GenerateSearchDocumentsForContentLists>b__6_2(i)
<GenerateSearchDocumentsForContentLists>b__6_3(t)
<GenerateSearchDocumentsForContentLists>b__6_4(i)
<GenerateSearchDocumentsForContentLists>b__6_5(st)
<GenerateSearchDocumentsForContentLists>b__6_6(t)
<GenerateSearchDocumentsForContentLists>b__6_7(t)
<GenerateSearchDocumentsForContentLists>b__6_8(t)
<GenerateSearchDocumentsForContentLists>b__6_9(t)
<GenerateSearchDocumentsForContentLists>b__6_10(t)
<GenerateSearchDocumentsForContentLists>b__6_11(i)
<GenerateSearchDocumentsForModules>b__7_0(t)
<GenerateSearchDocumentsForModules>b__7_1(i)
<GenerateSearchDocumentsForModules>b__7_2(st)
<GenerateSearchDocumentsForModules>b__7_3(t)
<GenerateSearchDocumentsForModules>b__7_4(t)
<GenerateSearchDocumentsForModules>b__7_5(t)
<GenerateSearchDocumentsForModules>b__7_6(t)
<GenerateSearchDocumentsForModules>b__7_7(t)
<GenerateSearchDocumentsForCurriculumStandards>b__8_0(t)
<GenerateSearchDocumentsForCurriculumStandards>b__8_1(t)
<GenerateSearchTagsForSpecificCurriculumStandards>b__9_0(t)
<GetModuleSearchIndexingInfo>b__10_0(i)
<GetContentListSearchIndexingInfo>b__11_0(i)
<UploadSearchDocuments>b__13_0(document)
<DeleteSearchDocuments>b__14_0(item)
<DeleteSearchDocuments>b__14_1(item)
<FlagSearchDocumentsForDeletion>b__17_0(item)
<FlagSearchDocumentsForUpdate>b__19_0(i)
<FlagContentListsForSearchUpdate>b__22_0(ID)
<FlagContentListsForSearchDeletion>b__24_0(ID)
<FlagModulesForSearchUpdate>b__26_0(ID)
<FlagModulesForSearchDeletion>b__28_0(ID)
<FlagCurriculumStandardsForSearchUpdate>b__30_0(ID)
<FlagCurriculumStandardsForSearchDeletion>b__32_0(ID)
<FlagAllCurriculumStandardsForUpdate>b__33_0(id)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<UploadSearchDocuments>b__1(document)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetClassesInSchoolWithAccessToSelectedContent>b__8_0(x)
<GetUsersInClasses>b__14_0(i)
<GetUsersInClasses>b__14_1(i)
<GetUsersInClasses>b__14_2(users)
<ArchiveClasses>b__21_0(i)
<ArchiveClasses>b__21_1(i)
<ArchiveClasses>b__21_2(i)
<ArchiveClasses>b__21_3(j)
<ArchiveClasses>b__21_4(i)
<ArchiveClasses>b__21_5(i)
<UndoClassArchive>b__22_0(i)
<UndoClassArchive>b__22_1(i)
<EnsureClassesExist>b__43_0(c)
<EnsureClassesExist>b__43_1(c)
<PostClassListsSentComment>b__60_0(i)
<PostClassListsSentComment>b__60_1(i)
<PostClassListsSentComment>b__60_2(ucr)
<PostClassListsSentComment>b__60_3(user)
<PostClassListsSentComment>b__60_4(roles)
<PostClassListsSentComment>b__60_6(role)
<PostClassListsSentComment>b__60_7(dict)
<GenerateClassListDetailsModel>b__63_0(i)
<GenerateClassListDetailsModel>b__63_1(i)
<GenerateClassListDetailsModel>b__63_2(i)
<GenerateClassListDetailsModel>b__63_3(i)
<BuildSpreadsheetOfClassDetails>b__64_0(user)
<BuildSpreadsheetOfClassDetails>b__64_1(user)
<BuildSpreadsheetOfClassDetails>b__64_2(user)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<OutputClassData>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<OutputMockClassDataForSchoolSelection>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<EnsureClassesExist>b__2(name)
.ctor()
<EnsureClassesExist>b__3(existingName)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetClassesForUsers>b__0(c)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<PostClassListsSentComment>b__5(dict)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateClassListDetailsModel>b__4(u)
<GenerateClassListDetailsModel>b__5(u)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<StoreMultipleUserAnswerRecords>b__1(i)
.cctor()
.ctor()
<StoreMultipleUserAnswerRecords>b__8_0(i)
<DeleteUserAnswerRecordsForAttempt>b__13_0(i)
<GetAllUserAnswerRecordsGlobally>b__14_0(doc)
<DeleteUserAnswerHistoryRecordsForAttempt>b__19_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GenerateAndSaveUsersProgressForAnalysis>b__2_0(i)
<GenerateAndSaveUsersProgressForAnalysis>b__2_1(i)
<GenerateAndSaveUsersProgressForAnalysis>b__2_2(j)
<GenerateAndSaveUsersProgressForAnalysis>b__2_3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<PerformUpdateOfFrenchOPEStats>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetBrainBeeClasses>b__5_0(i)
<GetBrainBeeClasses>b__5_1(i)
<GetBrainBeeClasses>b__5_2(i)
<GetBrainBeeClasses>b__5_3(j)
<AssignPracticeAssessmentToAlleMCATClasses>b__6_0(i)
<AssignPracticeAssessmentToAlleMCATClasses>b__6_1(i)
<AssignPracticeAssessmentToAlleMCATClasses>b__6_2(i)
<AssignPracticeAssessmentToAlleMCATClasses>b__6_3(i)
<AssignPracticeAssessmentToAlleMCATClasses>b__6_4(i)
<AssignPracticeAssessmentToAlleMCATClasses>b__6_5(i)
<AssignPracticeAssessmentToAlleMCATClasses>b__6_6(i)
<AssignEMCATToAlleMCATClasses>b__7_0(i)
<AssignEMCATToAlleMCATClasses>b__7_1(i)
<AssignEMCATToAlleMCATClasses>b__7_2(i)
<AssignEMCATToAlleMCATClasses>b__7_3(i)
<AssignEMCATToAlleMCATClasses>b__7_4(i)
<AssignEMCATToAlleMCATClasses>b__7_5(i)
<AssignEMCATToAlleMCATClasses>b__7_6(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<DeleteEventsForAttempt>b__11_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<PerformServerInitialisationOfAssessmentAttempt>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
<RecordAssessmentAttemptFocusEvents>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<UpdateTestUserAnswersAndEvents>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetFinalUserAnswersForMultipleAttempts>b__58_0(i)
<GetFinalUserAnswersForMultipleAttempts>b__58_1(i)
<GetFinalUserAnswersForMultipleAttempts>b__58_2(i)
<FillInMissingQuestionNames>b__59_0(i)
<SelectSampleQuestionsForTest>b__68_0(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_0(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_2(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_4(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_5(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_6(j)
<GetAllAssessmentEventsAndStatusesForContext>b__71_7(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_8(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_9(i)
<GetAllAssessmentEventsAndStatusesForContext>b__71_12(i)
<GetUpdatedAssessmentEventsAndStatusesForContext>b__72_2(i)
<GetUpdatedAssessmentEventsAndStatusesForContext>b__72_3(i)
<GenerateAssessmentEventsAndStatusReturnObject>b__73_0(i)
<GenerateAssessmentEventsAndStatusReturnObject>b__73_1(i)
<GenerateAssessmentEventsAndStatusReturnObject>b__73_2(i)
<GenerateAssessmentEventsAndStatusReturnObject>b__73_3(j)
<GetAllAssessmentEventsAndStatusForUser>b__74_0(i)
<GetAllAssessmentEventsAndStatusForUser>b__74_1(i)
<GetAllAssessmentEventsAndStatusForUser>b__74_2(i)
<GetAllAssessmentEventsAndStatusForUser>b__74_3(i)
<NotifySupportAboutNewAttemptsOnImportantAssessments>b__79_0(i)
<NotifySupportAboutNewAttemptsOnImportantAssessments>b__79_1(i)
<NotifySupportAboutNewAttemptsOnImportantAssessments>b__79_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FillInMissingQuestionNames>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAllAssessmentEventsAndStatusesForContext>b__1(i)
.ctor()
<GetAllAssessmentEventsAndStatusesForContext>b__3(i)
<GetAllAssessmentEventsAndStatusesForContext>b__10(i)
<GetAllAssessmentEventsAndStatusesForContext>b__11(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUpdatedAssessmentEventsAndStatusesForContext>b__0(i)
<GetUpdatedAssessmentEventsAndStatusesForContext>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ApplyDynamoStatusesToTestAttempts>b__10_0(i)
<ApplyDynamoStatusesToTestAttempts>b__10_1(i)
<UpgradeDatabaseTestAttemptsWithDynamoDataAttemptStatus>b__11_0(i)
<UpgradeDatabaseTestAttemptsWithDynamoDataAttemptStatus>b__11_1(i)
<UpgradeDatabaseTestAttemptsWithDynamoDataAttemptStatus>b__11_2(i)
<UpgradeDatabaseTestAttemptsWithDynamoDataAttemptStatus>b__11_3(i)
<GetAssessmentAttemptStatusesFromDynamo>b__13_0(d)
<GetAttemptsOverdueForExpiryFromDynamo>b__46_0(doc)
<GetAttemptsDueForDeletionFromDynamo>b__47_0(doc)
<GetAttemptsWhichWereNeverStartedFromDynamo>b__48_0(doc)
<GetAttemptsStuckInFinalisationFromDynamo>b__49_0(doc)
<GetLiveAttemptsWhichHaveLostConnection>b__50_0(doc)
<GetAllLiveAssessmentAttemptStatusesFromDynamo>b__51_0(doc)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
.ctor()
<UpdateTestOverallScoreForUser>b__4(i)
<UpdateTestOverallScoreForUser>b__5(i)
.cctor()
.ctor()
<UpdateTestOverallScoreForUser>b__35_0(i)
<UpdateTestOverallScoreForUser>b__35_1(i)
<UpdateTestOverallScoreForUser>b__35_2(i)
<UpdateTestOverallScoreForUser>b__35_3(i)
<UpdateTestOverallScoreForUser>b__35_6(i)
<UpdateTestOverallScoreForUser>b__35_7(i)
<UpdateTestOverallScoreForUser>b__35_8(i)
<UpdateTestOverallScoreForUser>b__35_9(i)
<UpdateTestOverallScoreForUser>b__35_10(i)
<UpdateTestOverallScoreForUser>b__35_11(i)
<UpdateTestOverallScoreForUser>b__35_12(i)
<UpdateTestOverallScoreForUser>b__35_13(i)
<UpdateTestOverallScoreForUser>b__35_14(i)
<UpdateTestOverallScoreForUser>b__35_15(i)
<GetGradingStepStatusesForAttempt>b__37_0(i)
<GetGradingStepStatusesForMultipleAttempts>b__38_0(i)
<GetCurrentGradingStepResultsForAttempt>b__40_0(i)
<GetCurrentGradingStepResultsForMultipleAttempts>b__41_0(i)
<GetCurrentGradingStepResultsForMultipleAttempts>b__41_1(i)
<GetCurrentGradingStepResultsForMultipleAttempts>b__41_2(i)
<ContinueAttemptGrading>b__43_0(i)
<ContinueAttemptGrading>b__43_1(i)
<ContinueAttemptGrading>b__43_2(i)
<ContinueAttemptGrading>b__43_3(i)
<DetermineMarkingSectionVariantInfoForAttempt>b__50_0(i)
<DetermineMarkingSectionVariantInfoForAttempt>b__50_1(i)
<GroupQuestionsByMarkingSection>b__51_0(i)
<GroupQuestionsByMarkingSection>b__51_1(i)
<GroupQuestionsByMarkingSection>b__51_2(i)
<GroupQuestionsByMarkingSection>b__51_3(i)
<SuggestGradesForTestAttempt>b__52_0(i)
<SuggestGradesForTestAttempt>b__52_1(i)
<SuggestGradesForTestAttempt>b__52_2(i)
<SuggestGradesForTestAttempt>b__52_3(i)
<PrepareForTeacherQuestionGradingStep>b__54_0(i)
<ApplyGradeAggregationStep>b__55_1(i)
<SaveOutputGradeFromMarkingProcess>b__56_0(i)
<SaveOutputGradeFromMarkingProcess>b__56_1(i)
<DetermineAnalysisGroupScoresForAttempt>b__59_0(i)
<DetermineAnalysisGroupScoresForAttempt>b__59_1(i)
<DetermineAnalysisGroupScoresForAttempt>b__59_2(i)
<DetermineAnalysisGroupScoresForAttempt>b__59_3(i)
<CompileAttemptMarkingData>b__64_0(item1, item2)
<CompileAttemptMarkingData>b__64_1(i)
<CompileAttemptMarkingData>b__64_2(i)
<CompileAttemptMarkingData>b__64_3(i)
<CompileAttemptMarkingData>b__64_4(i)
<CompileAttemptMarkingData>b__64_5(i)
<GetMultipleAttemptsMarkingData>b__65_0(i)
<GetMultipleAttemptsMarkingData>b__65_1(x, y)
<FillInMissingQuestionNames>b__66_0(i)
<GetGradingMethodFromDatabase>b__72_0(i)
<SaveAssessorQuestionGradesForAttempt>b__74_0(i)
<FinaliseAssessorQuestionGradesForAttemptAfterValidation>b__76_0(i)
<FinaliseAssessorQuestionGradesForAttemptAfterValidation>b__76_3(i)
<FinaliseAssessorAggregatedGradeForAttempt>b__81_0(i)
<FinaliseAssessorAggregatedGradeForAttempt>b__81_2(i)
<FlagSectionMarkingStatusAsComplete>b__95_0(i)
<FlagSectionMarkingStatusAsComplete>b__95_3(i)
<isNextStepForAttemptAManualAggregationStep>b__98_0(i)
<GetAssessmentMarkingSectionVariantOptions>b__120_0(i)
<GetAssessmentMarkingSectionVariantOptions>b__120_1(i)
<GetAnalysisGroupResultsForMultipleAttempts>b__126_0(i)
<GetAnalysisGroupResultsForMultipleAttempts>b__126_1(i)
<GetAnalysisGroupResultsForMultipleAttempts>b__126_2(i)
<RecommendRemediationActivitiesForAssessmentAttempt>b__127_0(i)
<RecommendRemediationActivitiesForAssessmentAttempt>b__128_0(i)
<RecommendRemediationActivitiesForAssessmentAttempt>b__128_1(i)
<RecommendRemediationActivitiesForAssessmentAttempt>b__128_2(i)
<SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt>b__129_0(i)
<SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt>b__129_1(i)
<SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt>b__129_2(i)
<SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt>b__129_3(i)
<SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt>b__129_5(i)
<SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt>b__129_6(i)
<SaveRecommendationRecordsForAttempt>b__132_0(i)
<GetAllRecommendationsForMultipleAttempts>b__133_0(i)
<GetAllRecommendationsForMultipleAttempts>b__133_1(i)
<GetAllRecommendationsForMultipleAttempts>b__133_2(i)
<GetAllRecommendationsForMultipleAttempts>b__133_3(j)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__136_1(i)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__136_2(i)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__136_3(i)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__136_5(group)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__136_6(i)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__136_7(i)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__136_11(rcmd)
<EmailStudentWithAssessmentResultsAndRecommendations_Old>b__137_1(i)
<EmailStudentWithAssessmentResultsAndRecommendations_Old>b__137_2(i)
<EmailStudentWithAssessmentResultsAndRecommendations_Old>b__137_3(i)
<EmailStudentWithAssessmentResultsAndRecommendations_Old>b__137_4(i)
<EmailStudentWithAssessmentResultsAndRecommendations_Old>b__137_6(i)
<ApplyAllGradingStepsToTestAttempt>b__139_0(i)
<ApplyAllGradingStepsToTestAttempt>b__139_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ApplyGradeAggregationStep>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DetermineAnalysisGroupScoresForAttempt>b__4(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FillInMissingQuestionNames>b__1(i)
.ctor()
<GetGradingMethod>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FinaliseAssessorQuestionGradesForAttemptAfterValidation>b__1(i)
<FinaliseAssessorQuestionGradesForAttemptAfterValidation>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FinaliseAssessorAggregatedGradeForAttempt>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FlagSectionMarkingStatusAsComplete>b__1(i)
<FlagSectionMarkingStatusAsComplete>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetMarkingSet>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetMarkingSetMarkers>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SuggestMostAppropriateRemediationActivitiesForAssessmentAttempt>b__4(analysisGroup)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateResultsAndRecommendationsEmailTemplateModel>b__0(i)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__4(i)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__8(rec)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__9(gp)
<GenerateResultsAndRecommendationsEmailTemplateModel>b__10(group)
.ctor()
<EmailStudentWithAssessmentResultsAndRecommendations_Old>b__0(i)
<EmailStudentWithAssessmentResultsAndRecommendations_Old>b__5(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<CreateAttemptStepStatusesFromTest>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<Clean>b__8_0(m)
<ValidateGradeRule>b__18_0(grade)
<ValidateMarkedItemsReferenceRule>b__20_0(rule)
<ValidateMarkedItemsReferenceSection>b__22_0(section)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAssessment>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetMultipleAssessments>b__30_0(i)
<EstimateTimeForAssessment>b__31_0(i)
<EstimateTimeForAssessment>b__31_1(i)
<GetGradingMethodFromDatabase>b__39_0(i)
<SelectSampleQuestionsForTest>b__60_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetGradingMethod>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAssessmentContext>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FindOrCreateBlankTestAttempt>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetAssessmentReportingData>b__7_0(section)
<GetAssessmentReportingData>b__7_1(u)
<SummariseQuestionScores>b__8_0(score)
<SummariseQuestionScores>b__8_1(score)
<SummariseQuestionScores>b__8_2(c)
<SummariseQuestionScores>b__8_3(c)
<GetAnalysisGroupsForUser>b__13_0(ag)
<GetAnalysisGroups>b__15_0(ag)
<GetAnalysisGroupStudentResults>b__16_0(i)
<GetAnalysisGroupStudentResults>b__16_1(i)
<GetAnalysisGroupStudentResults>b__16_2(i)
<GetAnalysisGroupStudentResults>b__16_3(i)
<GetAnalysisGroupStudentResults>b__16_5(i)
<AttachRecommenations>b__21_0(i)
<AttachRecommenations>b__21_1(j)
<AttachRecommenations>b__21_2(j)
<AttachRecommenations>b__21_3(group)
<AttachRecommenations>b__21_4(i)
<AttachRecommenations>b__21_5(i)
<AttachRecommenations>b__21_6(i)
<AttachRecommenations>b__21_7(i)
<GenerateReportRecommendationsFromWorkingData>b__22_0(i)
<GenerateReportRecommendationsFromWorkingData>b__22_1(i)
<GenerateReportRecommendations>b__23_0(i)
<GenerateReportRecommendations>b__23_1(i)
<GenerateReportRecommendations>b__23_2(i)
<GenerateReportRecommendations>b__23_3(i)
<GenerateReportRecommendations>b__23_4(analysisGroup)
<GenerateReportRecommendations>b__23_6(i)
<GenerateReportRecommendations>b__23_7(i)
<GenerateReportRecommendations>b__23_8(i)
<GenerateReportGroupRecommendations>b__24_0(i)
<GenerateReportGroupRecommendations>b__24_1(j)
<GenerateReportGroupRecommendations>b__24_2(j)
<GenerateReportGroupRecommendations>b__24_3(group)
<GenerateReportGroupRecommendations>b__24_4(i)
<GenerateReportGroupRecommendations>b__24_5(i)
<GenerateReportGroupRecommendations>b__24_6(i)
<GenerateReportGroupRecommendations>b__24_7(i)
<GenerateReportGroupRecommendations>b__24_8(i)
<GenerateReportGroupRecommendations>b__24_9(i)
<GenerateReportGroupRecommendations>b__24_11(i)
<GenerateReportGroupRecommendations>b__24_12(i)
<GenerateReportGroupRecommendations>b__24_13(i)
<GenerateReportGroupRecommendations>b__24_14(i)
<GenerateReportGroupRecommendations>b__24_15(i)
<GenerateReportGroupRecommendations>b__24_16(i)
<GenerateReportGroupRecommendations>b__24_17(i)
<GenerateReportAnalysisGroupsFromAnalysisGroupResults>b__25_0(i)
<GetUserAssessmentResultSummaries>b__26_0(s)
<GetUserAssessmentResultSummaries>b__26_1(i)
<GetUserAssessmentResultSummaries>b__26_2(i)
<GetUserAssessmentResultSummaries>b__26_3(j)
<GetUserAssessmentResultSummaries>b__26_4(j)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_0(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_1(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_2(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_3(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_4(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_5(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_6(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_7(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_8(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_9(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_10(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_11(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_12(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_13(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_14(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_15(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_16(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_17(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_18(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_19(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_22(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_23(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_24(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_27(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_28(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__28_29(i)
<CreateLearnContentTasksForRecommendations>b__30_0(i)
<CreateLearnContentTasksForRecommendations>b__30_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAnalysisGroupsForUser>b__1(group)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAnalysisGroups>b__1(group)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAnalysisGroupStudentResults>b__4(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateReportRecommendations>b__5(recommendation)
.ctor()
<GenerateReportGroupRecommendations>b__10(j)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__20(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__21(j)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__25(i)
<AssignAppropriateRemediationTasksToAllUsersInAssessmentTask>b__26(j)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<ApplyQuickTestParametersForSimpleLists>b__15_0(i)
<ApplyQuickTestParametersForSmartLessons>b__16_0(i)
<ApplyQuickTestParametersForSmartLessons>b__16_1(i)
<ApplyQuickTestParametersForSmartLessons>b__16_2(j)
<ApplyQuickTestParametersForSmartLessons>b__16_3(i)
<ApplyQuickTestParametersForSmartLessons>b__16_4(i)
<ApplyQuickTestParametersForSmartLessons>b__16_9(i)
<ApplyQuickTestParametersForSmartLessons>b__16_10(i)
<ApplyQuickTestParametersForSmartLessons>b__16_11(i)
<ApplyQuickTestParametersForSmartLessons>b__16_13(i)
<SetUpTestStructureForSingleListTest>b__17_0(c)
<SetUpTestStructureForSingleListTest>b__17_1(c)
<SetUpTestStructureForMultipleListsTest>b__18_0(i)
<SetUpTestStructureForMultipleListsTest>b__18_1(i)
<SetUpTestStructureForMultipleListsTest>b__18_2(i)
<SetUpTestStructureForMultipleListsTest>b__18_3(i)
<SetUpTestStructureForMultipleListsTest>b__18_4(i)
<SetUpTestStructureForMultipleListsTest>b__18_6(i)
<SetUpTestStructureForMultipleListsTest>b__18_8(c)
<SetUpTestStructureForMultipleListsTest>b__18_9(c)
<SetUpTestStructureForSmartLessonsTest>b__19_0(i)
<SetUpTestStructureForSmartLessonsTest>b__19_3(i)
<SetUpTestStructureForSmartLessonsTest>b__19_4(i)
<SetUpTestStructureForSmartLessonsTest>b__19_5(i)
<SetUpTestStructureForSmartLessonsTest>b__19_6(i)
<SetUpTestStructureForSmartLessonsTest>b__19_7(i)
<SetUpTestStructureForSmartLessonsTest>b__19_8(i)
<SetUpTestStructureForSmartLessonsTest>b__19_9(j)
<SetUpTestStructureForSmartLessonsTest>b__19_10(j)
<SetUpTestStructureForSmartLessonsTest>b__19_11(i)
<SetUpTestStructureForSmartLessonsTest>b__19_12(i)
<SetUpTestStructureForSmartLessonsTest>b__19_13(i)
<SetUpTestStructureForSmartLessonsTest>b__19_14(i)
<SetUpTestStructureForSmartLessonsTest>b__19_15(j)
<SetUpTestStructureForSmartLessonsTest>b__19_16(j)
<SetUpTestStructureForSmartLessonsTest>b__19_17(i)
<SetUpTestStructureForSmartLessonsTest>b__19_18(i)
<SetUpTestStructureForSmartLessonsTest>b__19_19(i)
<SetUpTestStructureForSmartLessonsTest>b__19_21(c)
<SetUpTestStructureForSmartLessonsTest>b__19_22(c)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<ApplyQuickTestParametersForSmartLessons>b__5(i)
<ApplyQuickTestParametersForSmartLessons>b__7(i)
<ApplyQuickTestParametersForSmartLessons>b__8(i)
.ctor()
<ApplyQuickTestParametersForSmartLessons>b__6(i)
.ctor()
<ApplyQuickTestParametersForSmartLessons>b__12(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SetUpTestStructureForMultipleListsTest>b__5(i)
<SetUpTestStructureForMultipleListsTest>b__7(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SetUpTestStructureForSmartLessonsTest>b__1(i)
<SetUpTestStructureForSmartLessonsTest>b__20(i)
.ctor()
<SetUpTestStructureForSmartLessonsTest>b__2(j)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<Execute>b__0_0(i)
<Execute>b__0_1(i)
<Execute>b__0_2(i)
<Execute>b__0_3(i)
.ctor()
<Execute>b__0(i)
.cctor()
.ctor()
<Execute>b__1_0(i)
.ctor()
.ctor()
<Execute>b__0(i)
.cctor()
.ctor()
<Execute>b__0_1(i)
<Execute>b__0_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<Execute>b__0_0(i)
<Execute>b__0_1(i)
<Execute>b__0_2(i)
.ctor()
<Execute>b__0(i)
.ctor()
<Execute>b__0(i)
.cctor()
.ctor()
<Execute>b__0_1(i)
<Execute>b__0_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<Execute>b__0_0(i)
<Execute>b__0_1(i)
<Execute>b__0_2(i)
.cctor()
.ctor()
<Execute>b__0_0(i)
<Execute>b__0_1(i)
<Execute>b__0_2(i)
<Execute>b__0_3(i)
<Execute>b__0_4(i)
<Execute>b__0_5(i)
.cctor()
.ctor()
<CompareAnalysisGroupsDBProperties>b__25_0(i)
<CompareAnalysisGroupsDBProperties>b__25_1(i)
.cctor()
.ctor()
<GetMaxAnalysisGroupValue>b__5_0(i)
.cctor()
.ctor()
<get_MaxQuestionGradingStage>b__12_0(step)
<get_MaxQuestionGradingStage>b__12_1(step)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<RequestAnswerReviewAfterValidation>b__3_0(i)
<ExtractComponentAnswerStateFromStudentAnswer>b__23_0(i)
<ExtractLongAnswerTextFromStudentAnswer>b__24_0(i)
<ExtractLongAnswerTextFromStudentAnswer>b__24_1(i)
<GenerateSmartLessonAnswerReviewReport>b__26_1(i)
<GenerateSmartLessonAnswerReviewReport>b__27_0(i)
<GenerateSmartLessonAnswerReviewReport>b__27_3(i)
<GenerateSmartLessonAnswerReviewReport>b__27_4(i)
<GenerateSmartLessonAnswerReviewReport>b__27_5(i)
<GenerateSmartLessonAnswerReviewReport>b__27_6(i)
<GenerateSmartLessonAnswerReviewReport>b__27_7(i)
<GenerateSmartLessonAnswerReviewReport>b__27_9(i)
<GenerateSmartLessonAnswerReviewReport>b__27_10(i)
<GenerateSmartLessonAnswerReviewReport>b__27_11(i)
<GetSelfMarkedSectionsFromSmartLesson>b__30_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateSmartLessonAnswerReviewReport>b__0(i)
<GenerateSmartLessonAnswerReviewReport>b__2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateSmartLessonAnswerReviewReport>b__1(i)
<GenerateSmartLessonAnswerReviewReport>b__2(i)
.ctor()
<GenerateSmartLessonAnswerReviewReport>b__8(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<StartNewActivityAttempt>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<MoveAllFinalAnswersToAttempt>b__0(i)
<MoveAllFinalAnswersToAttempt>b__1(i)
.ctor()
<MoveAllFinalAnswersToAttempt>b__2(i)
<MoveAllFinalAnswersToAttempt>b__4(i)
.cctor()
.ctor()
<MoveAllFinalAnswersToAttempt>b__21_3(i)
<MoveAllFinalAnswersToAttempt>b__21_5(i)
<MoveAllFinalAnswersToAttempt>b__21_6(i)
<GetUsersAttemptsWhichCouldBeAssociatedWithTask>b__27_1(i)
<GetUsersAttemptsWhichCouldBeAssociatedWithTask>b__27_2(i)
<TransferSpecificActivityAttemptsToDynamo>b__35_0(i)
<TransferSpecificActivityAttemptsToDynamo>b__35_1(i)
<TransferSpecificActivityAttemptsToDynamo>b__35_2(i)
<GetDetailsOfSmartLessonAttemptsForTask>b__36_0(i)
<GetDetailsOfSmartLessonAttemptsForTask>b__36_1(i)
<RollUpMultipleSmartLessonTaskAttemptsIntoMostRecentOne>b__38_0(i)
<RollUpMultipleSmartLessonTaskAttemptsIntoMostRecentOne>b__38_1(i)
<RollUpMultipleSmartLessonAttemptsIntoOne>b__39_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUsersAttemptsWhichCouldBeAssociatedWithTask>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<UpdateSmartLessonUsage>b__0(i)
<UpdateSmartLessonUsage>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<RollUpMultipleSmartLessonTaskAttemptsIntoMostRecentOne>b__2(i)
.ctor()
<RollUpMultipleSmartLessonTaskAttemptsIntoMostRecentOne>b__3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateSmartLessonProgressReport>b__0(i)
<GenerateSmartLessonProgressReport>b__2(i)
.cctor()
.ctor()
<GenerateSmartLessonProgressReport>b__2_1(i)
<GenerateSmartLessonProgressReport>b__4_0(i)
<GenerateSmartLessonProgressReport>b__4_1(i)
<GenerateSmartLessonProgressReport>b__4_2(i)
<GenerateSmartLessonProgressReportForSpecificUser>b__5_0(i)
<GenerateSmartLessonProgressReportForSpecificUser>b__5_1(i)
<GenerateSmartLessonProgressReport>b__6_0(i)
<GenerateSmartLessonProgressReport>b__6_1(i)
<GenerateSmartLessonProgressReport>b__6_2(i)
<GenerateSmartLessonProgressReport>b__6_3(j)
<GenerateSmartLessonProgressReport>b__6_4(i)
<GenerateSmartLessonProgressReport>b__6_5(i)
<GenerateSmartLessonProgressReport>b__6_6(i)
<GenerateSmartLessonProgressReport>b__6_8(i)
<GenerateSmartLessonProgressReport>b__6_9(i)
<GenerateSmartLessonProgressReport>b__6_10(i)
<GenerateSmartLessonProgressReport>b__6_11(j)
<GenerateSmartLessonProgressReport>b__6_13(i)
<GenerateSmartLessonProgressReport>b__6_14(i)
<GenerateSmartLessonProgressReport>b__6_15(i)
<GenerateSmartLessonProgressReport>b__6_16(i)
<GenerateSmartLessonProgressReport>b__6_17(i)
<GenerateSmartLessonProgressReport>b__6_18(i)
<GenerateSmartLessonProgressReport>b__6_19(i)
<GenerateSmartLessonProgressReport>b__6_20(i)
<GenerateSmartLessonProgressReport>b__6_21(i)
<GenerateSmartLessonProgressReport>b__6_22(i)
<GenerateSmartLessonProgressReport>b__6_25(i)
<GenerateSmartLessonProgressReport>b__6_26(i)
<GenerateSmartLessonProgressReport>b__6_27(i)
<GenerateSmartLessonProgressReport>b__6_28(i)
<GenerateSmartLessonProgressReport>b__6_29(item1, item2)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_0(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_1(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_2(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_3(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_4(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_5(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_6(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_7(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_8(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_9(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_10(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_11(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_12(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_13(j)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_14(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_16(i)
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__10_17(i)
<GenerateAutomaticInsightStatementsForSingleUserSmartLessonProgressReport>b__11_0(i)
<GenerateAutomaticInsightStatementsForSingleUserSmartLessonProgressReport>b__11_1(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_0(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_1(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_2(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_3(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_4(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_5(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_7(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_15(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_16(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_18(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_19(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_21(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12_22(i)
<GenerateTimeSeriesUsageDataForSmartLessonReport>b__13_2(i)
<GenerateTimeSeriesUsageDataForSmartLessonReport>b__13_3(i)
<GenerateTimeSeriesUsageDataForSmartLessonReport>b__13_4(i)
<GetCommonMistakesForSmartLessonProgressReport>b__17_0(i)
<GetCommonMistakesForSmartLessonProgressReport>b__17_1(i)
<GetCommonMistakesForSmartLessonProgressReportForSpecificUser>b__18_0(i)
<GetCommonMistakesForSmartLessonProgressReport>b__19_1(i)
<GetCommonMistakesForSmartLessonProgressReport>b__19_2(i)
<GetCommonMistakesForSmartLessonProgressReport>b__19_3(i)
<GetCommonMistakesForSmartLessonProgressReport>b__19_4(i)
<GetCommonMistakesForSmartLessonProgressReport>b__19_5(i)
<GetCommonMistakesForSmartLessonProgressReport>b__19_6(i)
<GetCommonMistakesForSmartLessonProgressReport>b__19_7(a, b)
<GetUserAnswersForSmartLessonProgressReport>b__21_0(i)
<GetUserAnswersForSmartLessonProgressReport>b__21_1(i)
<GetUserAnswersForSmartLessonProgressReportForSpecificUser>b__23_0(i)
<GetUserAnswersForSmartLessonProgressReport>b__24_1(i)
<GetUserAnswersForSmartLessonProgressReport>b__24_2(i)
<GetUserAnswersForSmartLessonProgressReport>b__24_3(i)
<GetUserAnswersForSmartLessonProgressReport>b__24_4(i)
<GetUserAnswersForSmartLessonProgressReport>b__24_6(i)
<GetUserAnswersForSmartLessonProgressReport>b__24_7(i)
<GetUserAnswersForSmartLessonProgressReport>b__24_8(i1, i2)
<GetAggregateProgressMultipleActivitiesForMultipleUsers>b__26_0(i)
<GetAggregateProgressMultipleActivitiesForMultipleUsers>b__26_1(i)
<GetAggregateProgressMultipleActivitiesForMultipleUsers>b__26_2(i)
<GetAggregateProgressMultipleActivitiesForMultipleUsers>b__26_3(j)
<GetAggregateProgressMultipleActivitiesForMultipleUsers>b__26_4(i)
<DetermineAlertLevelForStudentsInSmartLesson>b__27_1(i)
<DetermineAlertLevelForStudentsInSmartLesson>b__27_2(i)
<DetermineAlertLevelForStudentsInSmartLesson>b__27_4(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateSmartLessonProgressReport>b__7(i)
<GenerateSmartLessonProgressReport>b__12(i)
.ctor()
<GenerateSmartLessonProgressReport>b__23(i)
<GenerateSmartLessonProgressReport>b__24(j)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GenerateAutomaticInsightStatementsForSmartLessonProgressReport>b__15(i)
.ctor()
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__6(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__8(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__9(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__10(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__11(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__12(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__13(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__14(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__17(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__20(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__23(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__24(i)
<GenerateTimeSeriesProgressDataForSmartLessonReport>b__25(i)
.ctor()
<GenerateTimeSeriesUsageDataForSmartLessonReport>b__0(i)
<GenerateTimeSeriesUsageDataForSmartLessonReport>b__1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetCommonMistakesForSmartLessonProgressReport>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetUserAnswersForSmartLessonProgressReport>b__0(i)
.ctor()
.ctor()
<GetUserAnswersForSmartLessonProgressReport>b__5(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DetermineAlertLevelForStudentsInSmartLesson>b__0(i)
<DetermineAlertLevelForStudentsInSmartLesson>b__3(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SaveNewSectionCompletionScores>b__1_0(i)
<SaveNewSectionCompletionScores>b__1_1(i)
<SaveNewSectionCompletionScores>b__1_2(i)
<GetAppropriateDataSetsForStatsSaveAfterFirstFilter>b__4_0(i)
<GetAppropriateDataSetsForStatsSaveAfterFirstFilter>b__4_1(i)
<GetAppropriateDataSetsForStatsSaveAfterFirstFilter>b__4_2(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<SaveMultipleActivityAttempts>b__16_0(i)
<GetActivityAttempts>b__19_0(i)
<GetActivityAttempts>b__19_1(doc)
<GetUsersAttemptsForSpecificActivities>b__21_0(i)
<GetMultipleUsersAttemptsForSpecificActivities>b__23_0(i)
<GetMultipleUsersAttemptsForSpecificActivities>b__23_1(i)
<GetUsersAttemptsBasicDetailsForSpecificActivitiesAsync>b__24_0(i)
<GetMultipleUsersAttemptsInfoForSpecificActivities>b__26_0(i)
<GetMultipleUsersAttemptsInfoForSpecificActivities>b__26_1(i)
<FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod>b__28_1(i)
<FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod>b__28_2(i)
<GetAllAttemptIDsForActivity>b__32_0(i)
<SaveMultipleAnswers>b__52_0(i)
<GenerateQuestionProgressItemsForActivityAttempt>b__59_0(i)
<GenerateQuestionProgressItemsForActivityAttempt>b__59_1(i)
<GetAttemptSectionCompletionStats>b__61_1(i)
<GetAttemptQuestionCompletionStats>b__66_0(i)
<GetAttemptQuestionCompletionStats>b__66_1(i)
<GetAttemptQuestionCompletionStats>b__66_2(i)
<UpdateSectionCompletionStats>b__68_0(i)
<UpdateQuestionCompletionStats>b__69_0(i)
<BulkInsertAttempts>b__75_0(i)
<BulkInsertAnswers>b__76_0(i)
<BulkInsertSectionCompletionStats>b__77_0(i)
<BulkInsertQuestionCompletionStats>b__78_0(i)
<UpdateApproxLastUpdatedForAllAttempts>b__79_1(i)
<UpdateApproxLastUpdatedForAllAttempts>b__79_2(i)
<GetAllAttemptIDs>b__80_0(doc)
<GetAllAttempts>b__81_0(doc)
<GetAllAttemptsStartedSinceDate>b__82_0(doc)
<GetAllAttemptIDsUpdatedSinceDate>b__83_0(doc)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<FindMostRecentAttemptInfoForMultipleUsersForActivitiesInTimePeriod>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<MarkCompleteAnswerAsNotMostRecent>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetAttemptSectionCompletionStats>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<UpdateApproxLastUpdatedForAllAttempts>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetAllProgressDataForMultipleAttempts>b__48_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<GetStructuredActivityAsync>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<GetMultipleStructuredActivitiesFromDatabaseAsync>b__9_0(i)
<GetMultipleStructuredActivitiesFromDatabaseAsync>b__9_1(i)
<GetMultipleStructuredActivities>b__11_0(i)
<GetMultipleStructuredActivities>b__11_1(i)
<GetMultipleStructuredActivities>b__11_2(i)
<GetMultipleStructuredActivities>b__11_3(i)
<IsLessonFeedbackInappropriate>b__32_0(f)
<SetDefaultThumbnailForAllStructuredActivities>b__45_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<IsItemStructuredActivity>b__0()
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<SaveAttemptProgressItems>b__4(newSectionStat)
<SaveAttemptProgressItems>b__7(newQuestionStat)
.cctor()
.ctor()
<SaveAttemptProgressItems>b__3_0(i)
<SaveAttemptProgressItems>b__3_1(i)
<SaveAttemptProgressItems>b__3_2(i)
<SaveAttemptProgressItems>b__3_3(i)
<SaveAttemptProgressItems>b__3_5(i)
<SaveAttemptProgressItems>b__3_6(i)
<CreateNewAttemptProgressPlaceholders>b__4_0(i)
<DetermineContentIDStatsUpdates>b__8_0(i)
<DetermineContentIDStatsUpdates>b__8_1(i)
<DetermineSectionStatsUpdates>b__9_0(i)
<DetermineSectionStatsUpdates>b__9_1(i)
<DetermineSectionStatsUpdates>b__9_2(i)
<DetermineAttemptCompletionFromFilteredSections>b__17_1(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<DetermineAttemptCompletionFromFilteredSections>b__0(i)
<DetermineAttemptCompletionFromFilteredSections>b__1(i)
.ctor()
<DetermineAttemptCompletionFromFilteredSections>b__0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<RecalculateProgressForAllAttemptsForSmartLesson>b__0(attemptID)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<CompareLists>b__5_0(i)
.ctor()
<FromUserAndActivitiesLists>b__0(i)
.cctor()
.ctor()
<CompareLists>b__5_0(i)
.cctor()
.ctor()
<GetAllReferencedContentIDs>b__2_0(i)
<GetAllActivityGroupIDs>b__6_0(i)
<GetAllOptionalActivityGroups>b__8_0(i)
<GetAllOptionalActivityGroupIDs>b__9_0(i)
<GetAllOptionalActivityGroupIDs>b__9_1(i)
<AreSectionNamesIdentical>b__16_0(i)
<AreSectionNamesIdentical>b__16_1(i)
<DoesChangedStructureRequireStatsUpdates>b__17_0(i)
<DoesChangedStructureRequireStatsUpdates>b__17_1(i)
<DoesChangedStructureRequireStatsUpdates>b__17_2(i)
.ctor()
<FindAnyRemovedSectionIDsFromChangedStructure>b__0(i)
.cctor()
.ctor()
<CompareLists>b__4_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
<QueryForFirstOrDefault>b__0(conn)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.cctor()
.ctor()
<get_ContactRolesParsed>b__8_0(i)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
.ctor()
MoveNext()
SetStateMachine(stateMachine)
